!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Main=t():e.Main=t()}(this,function(){return function(e){function t(r){if(a[r])return a[r].exports;var i=a[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var a={};return t.m=e,t.c=a,t.p="/dist/",t(0)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(1),i=a(79);i.doBootstrap()["catch"](function(e){console.log("Desktop bootstrapping failed: "+e)}),window.tableau=r},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(2),i=a(78),n=a(11);n.VersionNumber.SetVersionNumber("0.9.0");var o=new r.ExtensionsImpl;t.extensions=new i.Extensions(o);var l=a(3);t.ExtensionContext=l.ExtensionContext,t.ExtensionMode=l.ExtensionMode,t.AnalyticsObjectType=l.AnalyticsObjectType,t.ColumnType=l.ColumnType,t.DashboardObjectType=l.DashboardObjectType,t.DataType=l.DataType,t.DateRangeType=l.DateRangeType,t.EncodingType=l.EncodingType,t.ErrorCodes=l.ErrorCodes,t.FieldAggregationType=l.FieldAggregationType,t.FieldRoleType=l.FieldRoleType,t.FilterDomainType=l.FilterDomainType,t.FilterType=l.FilterType,t.FilterUpdateType=l.FilterUpdateType,t.FilterNullOption=l.FilterNullOption,t.MarkType=l.MarkType,t.ParameterValueType=l.ParameterValueType,t.PeriodType=l.PeriodType,t.QuickTableCalcType=l.QuickTableCalcType,t.SelectionUpdateType=l.SelectionUpdateType,t.SheetType=l.SheetType,t.SortDirection=l.SortDirection,t.TableauEventType=l.TableauEventType,t.TrendLineModelType=l.TrendLineModelType},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(3),i=a(5),n=a(11),o=a(11),l=a(68),s=a(69),d=a(70),c=a(71),u=a(72),p=a(76),m=a(77),g=function(){function e(){}return e.prototype.initializeAsync=function(e){var t=this;return this._initializationPromise||(this._initializationPromise=new Promise(function(a,r){if(i.InternalApiDispatcherHolder.hasDesktopApiDispatcherPromise()){var o=i.InternalApiDispatcherHolder.getDesktopDispatcherPromise();o.then(function(a){return t.onDispatcherReceived(a,e)}).then(function(){a()})}else{var l=t.onDispatcherReceived.bind(t);n.doCrossFrameBootstrap(window,n.VersionNumber.Instance).then(function(t){return l(t,e)}).then(function(){a()})}})),this._initializationPromise},e.prototype.onDispatcherReceived=function(e,t){var a=this;e.setVersionNumber(n.VersionNumber.Instance),n.registerAllSharedServices(e),u.registerAllExtensionsServices(e);var i=n.ApiServiceRegistry.instance.getService("InitializationService");return i.initializeDashboardExtensionsAsync(t).then(function(e){if(!e.extensionInstance.locator.dashboardPath)throw new o.TableauError(r.ErrorCodes.InternalError,"Unexpected error during initialization.");a.dashboardContent=a.initializeDashboardContent(e.extensionDashboardInfo,e.extensionInstance.locator.dashboardPath),a.environment=new s.Environment(e.extensionEnvironment),a.settings=a.initializeSettings(e.extensionSettingsInfo),a.ui=new c.UI(new m.UIImpl)})},e.prototype.initializeDashboardContent=function(e,t){var a=new n.DashboardImpl(e,t),r=new n.Dashboard(a);return new l.DashboardContent(r)},e.prototype.initializeSettings=function(e){var t=new p.SettingsImpl(e);return new d.Settings(t)},e}();t.ExtensionsImpl=g},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(4))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.Desktop="desktop",e.Server="server"}(a=t.ExtensionContext||(t.ExtensionContext={}));var r;!function(e){e.Authoring="authoring",e.Viewing="viewing"}(r=t.ExtensionMode||(t.ExtensionMode={}));var i;!function(e){e.Cluster="cluster",e.Forecast="forecast",e.TrendLine="trend-line"}(i=t.AnalyticsObjectType||(t.AnalyticsObjectType={}));var n;!function(e){e.Discrete="discrete",e.Continuous="continuous"}(n=t.ColumnType||(t.ColumnType={}));var o;!function(e){e.Blank="blank",e.Worksheet="worksheet",e.QuickFilter="quick-filter",e.ParameterControl="parameter-control",e.PageFilter="page-filter",e.Legend="legend",e.Title="title",e.Text="text",e.Image="image",e.WebPage="web-page",e.Extension="extension"}(o=t.DashboardObjectType||(t.DashboardObjectType={}));var l;!function(e){e.String="string",e.Int="int",e.Float="float",e.Bool="bool",e.Date="date",e.DateTime="date-time",e.Spatial="spatial"}(l=t.DataType||(t.DataType={}));var s;!function(e){e.Last="last",e.LastN="last-n",e.Next="next",e.NextN="next-n",e.Current="current",e.ToDate="to-date"}(s=t.DateRangeType||(t.DateRangeType={}));var d;!function(e){e.Column="column",e.Row="row",e.Page="page",e.Filter="filter",e.MarksType="marks-type",e.MeasureValues="measure-values",e.Color="color",e.Size="size",e.Label="label",e.Detail="detail",e.Tooltip="tooltip",e.Shape="shape",e.Path="path",e.Angle="angle"}(d=t.EncodingType||(t.EncodingType={}));var c;!function(e){e.APINotInitialized="api-not-initialized",e.DialogAlreadyOpen="dialog-already-open",e.DialogClosedByUser="dialog-closed-by-user",e.InternalError="internal-error",e.InvalidDomainDialog="invalid-dialog-domain",e.InvalidParameter="invalid-parameter",e.MissingFilter="missing-filter",e.MissingParameter="missing-parameter",e.ServerError="server-error",e.SettingSaveInProgress="setting-save-in-progress",e.UnsupportedEventName="unsupported-event-name",e.UnsupportedMethodForDataSourceType="unsupported-method-for-data-source-type"}(c=t.ErrorCodes||(t.ErrorCodes={}));var u;!function(e){e.Sum="sum",e.Avg="avg",e.Min="min",e.Max="max",e.Stdev="stdev",e.Stdevp="stdevp",e.Var="var",e.Varp="varp",e.Count="count",e.Countd="countd",e.Median="median",e.Attr="attr",e.None="none",e.Year="year",e.Qtr="qtr",e.Month="month",e.Day="day",e.Hour="hour",e.Minute="minute",e.Second="second",e.Week="week",e.Weekday="weekday",e.MonthYear="month-year",e.Mdy="mdy",e.End="end",e.TruncYear="trunc-year",e.TruncQtr="trunc-qtr",e.TruncMonth="trunc-month",e.TruncWeek="trunc-week",e.TruncDay="trunc-day",e.TruncHour="trunc-hour",e.TruncMinute="trunc-minute",e.TruncSecond="trunc-second",e.Quart1="quart1",e.Quart3="quart3",e.Skewness="skewness",e.Kurtosis="kurtosis",e.InOut="in-out",e.User="user"}(u=t.FieldAggregationType||(t.FieldAggregationType={}));var p;!function(e){e.Dimension="dimension",e.Measure="measure",e.Unknown="unknown"}(p=t.FieldRoleType||(t.FieldRoleType={}));var m;!function(e){e.Categorical="categorical",e.Range="range",e.Hierarchical="hierarchical",e.RelativeDate="relative-date"}(m=t.FilterType||(t.FilterType={}));var g;!function(e){e.Add="add",e.All="all",e.Replace="replace",e.Remove="remove"}(g=t.FilterUpdateType||(t.FilterUpdateType={}));var h;!function(e){e.Relevant="relevant",e.Database="database"}(h=t.FilterDomainType||(t.FilterDomainType={}));var S;!function(e){e.NullValues="null-values",e.NonNullValues="non-null-values",e.AllValues="all-values"}(S=t.FilterNullOption||(t.FilterNullOption={}));var f;!function(e){e.Bar="bar",e.Line="line",e.Area="area",e.Square="square",e.Circle="circle",e.Shape="shape",e.Text="text",e.Map="map",e.Pie="pie",e.GanttBar="gantt-bar",e.Polygon="polygon"}(f=t.MarkType||(t.MarkType={}));var y;!function(e){e.All="all",e.List="list",e.Range="range"}(y=t.ParameterValueType||(t.ParameterValueType={}));var T;!function(e){e.Years="years",e.Quarters="quarters",e.Months="months",e.Weeks="weeks",e.Days="days",e.Hours="hours",e.Minutes="minutes",e.Seconds="seconds"}(T=t.PeriodType||(t.PeriodType={}));var b;!function(e){e.RunningTotal="running-total",e.Difference="difference",e.PercentDifference="percent-difference",e.PercentOfTotal="percent-of-total",e.Rank="rank",e.Percentile="percentile",e.MovingAverage="moving-average",e.YTDTotal="ytd-total",e.CompoundGrowthRate="compound-growth-rate",e.YearOverYearGrowth="year-over-year-growth",e.YTDGrowth="ytd-growth",e.Undefined="undefined"}(b=t.QuickTableCalcType||(t.QuickTableCalcType={}));var I;!function(e){e.Replace="select-replace",e.Add="select-add",e.Remove="select-remove"}(I=t.SelectionUpdateType||(t.SelectionUpdateType={}));var C;!function(e){e.Dashboard="dashboard",e.Story="story",e.Worksheet="worksheet"}(C=t.SheetType||(t.SheetType={}));var v;!function(e){e.Increasing="increasing",e.Decreasing="decreasing"}(v=t.SortDirection||(t.SortDirection={}));var D;!function(e){e.FilterChanged="filter-changed",e.MarkSelectionChanged="mark-selection-changed",e.ParameterChanged="parameter-changed",e.SettingsChanged="settings-changed"}(D=t.TableauEventType||(t.TableauEventType={}));var P;!function(e){e.Linear="linear",e.Logarithmic="logarithmic",e.Exponential="exponential",e.Polynomial="polynomial"}(P=t.TrendLineModelType||(t.TrendLineModelType={}))},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(6)),r(a(7)),r(a(8)),r(a(9)),r(a(10))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.Desktop="desktop",e.Server="server",e.Unknown="unknown"}(a=t.ExtensionContext||(t.ExtensionContext={}));var r;!function(e){e.Authoring="authoring",e.Viewing="viewing",e.Unknown="unknown"}(r=t.ExtensionMode||(t.ExtensionMode={}));var i;!function(e){e.Discrete="discrete",e.Continuous="continuous"}(i=t.ColumnType||(t.ColumnType={}));var n;!function(e){e.Blank="blank",e.Worksheet="worksheet",e.QuickFilter="quick-filter",e.ParameterControl="parameter-control",e.PageFilter="page-filter",e.Legend="legend",e.Title="title",e.Text="text",e.Image="image",e.WebPage="web-page",e.Extension="extension"}(n=t.DashboardObjectType||(t.DashboardObjectType={}));var o;!function(e){e.String="string",e.Int="int",e.Float="float",e.Bool="bool",e.Date="date",e.DateTime="date-time",e.Spatial="spatial"}(o=t.DataType||(t.DataType={}));var l;!function(e){e.Number="number",e.String="string",e.Date="date",e.Boolean="boolean"}(l=t.EncodedDataType||(t.EncodedDataType={}));var s;!function(e){e.INITIALIZATION_ERROR="initialization-error",e.INTERNAL_ERROR="internal-error",e.MISSING_ENUM_MAPPING="missing-enum-mapping",e.MISSING_PARAMETER="missing-parameter",e.PERMISSION_DENIED="permission-denied",e.PRES_MODEL_PARSING_ERROR="pres-model-parsing-error",e.VERSION_NOT_CONFIGURED="version-not-configured",e.UNKNOWN_VERB_ID="unknown-verb-id"}(s=t.ErrorCodes||(t.ErrorCodes={}));var d;!function(e){e.Sum="sum",e.Avg="avg",e.Min="min",e.Max="max",e.Stdev="stdev",e.Stdevp="stdevp",e.Var="var",e.Varp="varp",e.Count="count",e.Countd="countd",e.Median="median",e.Attr="attr",e.None="none",e.Year="year",e.Qtr="qtr",e.Month="month",e.Day="day",e.Hour="hour",e.Minute="minute",e.Second="second",e.Week="week",e.Weekday="weekday",e.MonthYear="month-year",e.Mdy="mdy",e.End="end",e.TruncYear="trunc-year",e.TruncQtr="trunc-qtr",e.TruncMonth="trunc-month",e.TruncWeek="trunc-week",e.TruncDay="trunc-day",e.TruncHour="trunc-hour",e.TruncMinute="trunc-minute",e.TruncSecond="trunc-second",e.Quart1="quart1",e.Quart3="quart3",e.Skewness="skewness",e.Kurtosis="kurtosis",e.InOut="in-out",e.User="user"}(d=t.FieldAggregationType||(t.FieldAggregationType={}));var c;!function(e){e.Dimension="dimension",e.Measure="measure",e.Unknown="unknown"}(c=t.FieldRoleType||(t.FieldRoleType={}));var u;!function(e){e.Add="add",e.All="all",e.Replace="replace",e.Remove="remove"}(u=t.FilterUpdateType||(t.FilterUpdateType={}));var p;!function(e){e.Dashboard="dashboard",e.Story="story",e.Worksheet="worksheet"}(p=t.SheetType||(t.SheetType={}));var m;!function(e){e.All="all",e.List="list",e.Range="range"}(m=t.DomainRestrictionType||(t.DomainRestrictionType={}));var g;!function(e){e.Years="years",e.Quarters="quarters",e.Months="months",e.Weeks="weeks",e.Days="days",e.Hours="hours",e.Minutes="minutes",e.Seconds="seconds"}(g=t.DateStepPeriod||(t.DateStepPeriod={}));var h;!function(e){e.NullValues="nullvalues",e.NonNullValues="nonnullvalues",e.AllValues="allvalues"}(h=t.FilterNullOption||(t.FilterNullOption={}));var S;!function(e){e.Relevant="relevant",e.Database="database"}(S=t.FilterDomainType||(t.FilterDomainType={}));var f;!function(e){e.Replace="select-replace",e.Add="select-add",e.Remove="select-remove"}(f=t.SelectionUpdateType||(t.SelectionUpdateType={}));var y;!function(e){e.IncludeNull="include-null",e.IncludeNonNull="include-non-null",e.IncludeAll="include-all"}(y=t.QuantitativeIncludedValues||(t.QuantitativeIncludedValues={}));var T;!function(e){e.Bar="bar",e.Line="line",e.Area="area",e.Square="square",e.Circle="circle",e.Shape="shape",e.Text="text",e.Map="map",e.Pie="pie",e.GanttBar="gantt-bar",e.Polygon="polygon"}(T=t.MarkType||(t.MarkType={}));var b;!function(e){e.Categorical="categorical",e.Range="range",e.RelativeDate="relativeDate",e.Hierarchical="hierarchical"}(b=t.FilterType||(t.FilterType={}));var I;!function(e){e.Last="last",e.LastN="lastN",e.Next="next",e.NextN="nextN",e.Current="current",e.ToDate="toDate"}(I=t.DateRangeType||(t.DateRangeType={}));var C;!function(e){e.DialogAlreadyOpen="dialog-already-open",e.InvalidDomain="invalid-domain",e.Success="success"}(C=t.ExtensionDialogResult||(t.ExtensionDialogResult={}))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){function t(){return window.__tableauDesktopDispatcher}function a(){return!!e.getDesktopDispatcherPromise()}function r(e){window.__tableauDesktopDispatcher=e}e.getDesktopDispatcherPromise=t,e.hasDesktopApiDispatcherPromise=a,e.setDesktopDispatcherPromise=r}(a=t.InternalApiDispatcherHolder||(t.InternalApiDispatcherHolder={}))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.SelectedMarksChanged="selected-marks-changed",e.ParameterChanged="parameter-changed",e.FilterChanged="filter-changed",e.ExtensionDialogUpdate="extension-dialog-update",e.SettingsChanged="settings-changed"}(a=t.NotificationId||(t.NotificationId={}))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.ExtensionLocator="extension-locator",e.ExtensionBootstrapInfo="extension-bootstrap-info",e.ExtensionSettingsInfo="extension-settings-info",e.VisualId="visual-id",e.SheetPath="sheet-path",e.IgnoreAliases="ignore-aliases",e.IgnoreSelection="ignore-selection",e.IncludeAllColumns="include-all-columns",e.MaxRows="max-rows",e.UnderlyingDataTable="underlying-data-table",e.UnderlyingSummaryDataTable="underlying-summary-data-table",e.DataSourceDataTable="data-source-data-table",e.SettingsValues="settings-values",e.SelectedData="selected-data",e.HighlightedData="highlighted-data",e.FieldName="field-name",e.FilterValues="filter-values",e.FilterUpdateType="filter-update-type",e.IsExcludeMode="is-exclude",e.FilterRangeMin="filter-range-min",e.FilterRangeMax="filter-range-max",e.FilterRangeNullOption="filter-range-null-option",e.WorksheetFilters="worksheet-filters",e.FieldId="field-id",e.DomainType="domain-type",e.CategoricalDomain="categorical-domain",e.QuantitativeDomain="quantitative-dmain",e.WorksheetName="worksheet-name",e.DashboardName="dashboard",e.ParameterInfo="parameter-info",e.ParameterInfos="parameter-infos",e.ParameterCaption="paremeter-caption",e.ParameterFieldName="parameter-field-name",e.ParameterValue="parameter-value",e.Selection="selection",e.SelectionUpdateType="selectionUpdateType",e.HierValSelectionModels="hierarchicalValueSelectionModels",e.QuantRangeSelectionModels="quantativeRangeSelectionModels",e.DimValSelectionModels="dimensionValueSelectionModels",e.DataSourceId="data-source-id",e.DataSchema="data-schema",e.DataSourceName="data-source-name",e.ColumnsToInclude="columns-to-include",e.JoinDescription="join-description",e.ConnectionDescriptionSummaries="connection-description-summaries",e.ExtensionDialogUrl="extension-dialog-url",e.ExtensionDialogPayload="extension-dialog-payload",e.IsExtensionDialog="is-extension-dialog",e.ExtensionDialogH="extension-dialog-height",e.ExtensionDialogW="extension-dialog-width",e.ExtensionDialogResult="extension-dialog-result"}(a=t.ParameterId||(t.ParameterId={}))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.ApplyCategoricalFilter="categorical-filter",e.ApplyRangeFilter="range-filter",e.ClearFilter="clear-filter",e.InitializeExtension="initialize-extension",e.GetDataSummaryData="get-summary-data",e.GetUnderlyingData="get-underlying-data",e.GetDataSourceData="get-datasource-data",e.SaveExtensionSettings="save-extension-settings",e.GetSelectedMarks="get-selected-marks",e.GetHighlightedMarks="get-highlighted-marks",e.GetParametersForSheet="get-parameters-for-sheet",e.FindParameter="find-parameter",e.ChangeParameterValue="change-parameter-value",e.ClearSelectedMarks="clear-selected-marks",e.SelectByValue="select-by-value",e.GetDataSources="get-data-sources",e.RefreshDataSource="refresh-data-source",e.GetFilters="get-filters",e.GetCategoricalDomain="get-categorical-domain",e.GetRangeDomain="get-range-domain",e.GetJoinDescription="get-join-description",e.GetConnectionDescriptionSummaries="get-connection-description-summaries",e.DisplayDialog="display-dialog",e.CloseDialog="close-dialog"}(a=t.VerbId||(t.VerbId={}))},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0});var i=a(12);t.Dashboard=i.Dashboard;var n=a(14);t.EventListenerManager=n.EventListenerManager;var o=a(16);t.TableauError=o.TableauError;var l=a(17);t.VersionNumber=l.VersionNumber;var s=a(18);t.InternalToExternalEnumMappings=s.InternalToExternalEnumMappings;var d=a(21);t.TableauEvent=d.TableauEvent;var c=a(22);t.SingleEventManagerImpl=c.SingleEventManagerImpl;var u=a(23);t.DashboardImpl=u.DashboardImpl;var p=a(45);t.ServiceImplBase=p.ServiceImplBase;var m=a(28);t.ErrorHelpers=m.ErrorHelpers,r(a(46)),r(a(54)),r(a(31))},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(13),n=function(e){function t(t){var a=e.call(this,t)||this;return a._dashboardImpl=t,t.initializeWithPublicInterfaces(a),a}return r(t,e),Object.defineProperty(t.prototype,"worksheets",{get:function(){return this._dashboardImpl.worksheets},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"objects",{get:function(){return this._dashboardImpl.objects},enumerable:!0,configurable:!0}),t}(i.Sheet);t.Dashboard=n},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(14),n=function(e){function t(t){var a=e.call(this)||this;return a._sheetImpl=t,a}return r(t,e),Object.defineProperty(t.prototype,"name",{get:function(){return this._sheetImpl.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"sheetType",{get:function(){return this._sheetImpl.sheetType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this._sheetImpl.size},enumerable:!0,configurable:!0}),t.prototype.findParameterAsync=function(e){return this._sheetImpl.findParameterAsync(e,this)},t.prototype.getParametersAsync=function(){return this._sheetImpl.getParametersAsync(this)},t}(i.EventListenerManager);t.Sheet=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(16),n=function(){function e(){this._eventListenerManagers={}}return e.prototype.addEventListener=function(e,t){if(!this._eventListenerManagers.hasOwnProperty(e))throw new i.TableauError(r.ErrorCodes.UnsupportedEventName,"Cannot add event, unsupported event type: "+e);return this._eventListenerManagers[e].addEventListener(t)},e.prototype.removeEventListener=function(e,t){if(!this._eventListenerManagers.hasOwnProperty(e))throw new i.TableauError(r.ErrorCodes.UnsupportedEventName,"Cannot remove event, unsupported event type: "+e);return this._eventListenerManagers[e].removeEventListener(t)},e.prototype.addNewEventType=function(e){this._eventListenerManagers[e.eventType]=e},e}();t.EventListenerManager=n},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(4))},function(e,t){"use strict";var a=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){function t(a,r){var i=e.call(this,a+": "+r)||this;return i._errorCode=a,Object.setPrototypeOf(i,t.prototype),i}return a(t,e),Object.defineProperty(t.prototype,"errorCode",{get:function(){return this._errorCode},enumerable:!0,configurable:!0}),t}(Error);t.TableauError=r},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(16),n=function(){function e(e){var t=e.split(".").map(function(e){return parseInt(e,10)});if(3!==t.length)throw new i.TableauError(r.ErrorCodes.InternalError,"Invalid version number: "+e);this.major=t[0],this.minor=t[1],this.fix=t[2]}return Object.defineProperty(e,"Instance",{get:function(){return e._instance},enumerable:!0,configurable:!0}),e.SetVersionNumber=function(t){e._instance=new e(t)},Object.defineProperty(e.prototype,"formattedValue",{get:function(){return this.major+"."+this.minor+"."+this.fix},enumerable:!0,configurable:!0}),e}();t.VersionNumber=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(19),n=a(20),o=function(){function e(){}return e.extensionContext=new n.EnumConverter((l={},l[i.ExtensionContext.Desktop]=r.ExtensionContext.Desktop,l[i.ExtensionContext.Server]=r.ExtensionContext.Server,l)),e.extensionMode=new n.EnumConverter((s={},s[i.ExtensionMode.Authoring]=r.ExtensionMode.Authoring,s[i.ExtensionMode.Viewing]=r.ExtensionMode.Viewing,s)),e.columnType=new n.EnumConverter((d={},d[i.ColumnType.Continuous]=r.ColumnType.Continuous,d[i.ColumnType.Discrete]=r.ColumnType.Discrete,d)),e.fieldAggregationType=new n.EnumConverter((c={},c[i.FieldAggregationType.Attr]=r.FieldAggregationType.Attr,c[i.FieldAggregationType.Avg]=r.FieldAggregationType.Avg,c[i.FieldAggregationType.Count]=r.FieldAggregationType.Count,c[i.FieldAggregationType.Countd]=r.FieldAggregationType.Countd,c[i.FieldAggregationType.Day]=r.FieldAggregationType.Day,c[i.FieldAggregationType.End]=r.FieldAggregationType.End,c[i.FieldAggregationType.Hour]=r.FieldAggregationType.Hour,c[i.FieldAggregationType.InOut]=r.FieldAggregationType.InOut,c[i.FieldAggregationType.Kurtosis]=r.FieldAggregationType.Kurtosis,c[i.FieldAggregationType.Max]=r.FieldAggregationType.Max,c[i.FieldAggregationType.Mdy]=r.FieldAggregationType.Mdy,c[i.FieldAggregationType.Median]=r.FieldAggregationType.Median,c[i.FieldAggregationType.Min]=r.FieldAggregationType.Min,c[i.FieldAggregationType.Minute]=r.FieldAggregationType.Minute,c[i.FieldAggregationType.MonthYear]=r.FieldAggregationType.MonthYear,c[i.FieldAggregationType.None]=r.FieldAggregationType.None,c[i.FieldAggregationType.Qtr]=r.FieldAggregationType.Qtr,c[i.FieldAggregationType.Quart1]=r.FieldAggregationType.Quart1,c[i.FieldAggregationType.Quart3]=r.FieldAggregationType.Quart3,c[i.FieldAggregationType.Second]=r.FieldAggregationType.Second,c[i.FieldAggregationType.Skewness]=r.FieldAggregationType.Skewness,c[i.FieldAggregationType.Stdev]=r.FieldAggregationType.Stdev,c[i.FieldAggregationType.Stdevp]=r.FieldAggregationType.Stdevp,c[i.FieldAggregationType.Sum]=r.FieldAggregationType.Sum,c[i.FieldAggregationType.TruncDay]=r.FieldAggregationType.TruncDay,c[i.FieldAggregationType.TruncHour]=r.FieldAggregationType.TruncHour,c[i.FieldAggregationType.TruncMinute]=r.FieldAggregationType.TruncMinute,c[i.FieldAggregationType.TruncMonth]=r.FieldAggregationType.TruncMonth,c[i.FieldAggregationType.TruncQtr]=r.FieldAggregationType.TruncQtr,c[i.FieldAggregationType.TruncSecond]=r.FieldAggregationType.TruncSecond,c[i.FieldAggregationType.TruncWeek]=r.FieldAggregationType.TruncWeek,c[i.FieldAggregationType.TruncYear]=r.FieldAggregationType.TruncYear,c[i.FieldAggregationType.User]=r.FieldAggregationType.User,c[i.FieldAggregationType.Var]=r.FieldAggregationType.Var,c[i.FieldAggregationType.Varp]=r.FieldAggregationType.Varp,c[i.FieldAggregationType.Week]=r.FieldAggregationType.Week,c[i.FieldAggregationType.Weekday]=r.FieldAggregationType.Weekday,c[i.FieldAggregationType.Year]=r.FieldAggregationType.Year,c)),e.fieldRoleType=new n.EnumConverter((u={},u[i.FieldRoleType.Dimension]=r.FieldRoleType.Dimension,u[i.FieldRoleType.Measure]=r.FieldRoleType.Measure,u[i.FieldRoleType.Unknown]=r.FieldRoleType.Unknown,u)),e.sheetType=new n.EnumConverter((p={},p[i.SheetType.Dashboard]=r.SheetType.Dashboard,p[i.SheetType.Story]=r.SheetType.Story,p[i.SheetType.Worksheet]=r.SheetType.Worksheet,p)),e.dashboardObjectType=new n.EnumConverter((m={},m[i.DashboardObjectType.Extension]=r.DashboardObjectType.Extension,m[i.DashboardObjectType.Blank]=r.DashboardObjectType.Blank,m[i.DashboardObjectType.Image]=r.DashboardObjectType.Image,m[i.DashboardObjectType.Legend]=r.DashboardObjectType.Legend,m[i.DashboardObjectType.PageFilter]=r.DashboardObjectType.PageFilter,m[i.DashboardObjectType.ParameterControl]=r.DashboardObjectType.ParameterControl,m[i.DashboardObjectType.QuickFilter]=r.DashboardObjectType.QuickFilter,m[i.DashboardObjectType.Text]=r.DashboardObjectType.Text,m[i.DashboardObjectType.Title]=r.DashboardObjectType.Title,m[i.DashboardObjectType.WebPage]=r.DashboardObjectType.WebPage,m[i.DashboardObjectType.Worksheet]=r.DashboardObjectType.Worksheet,m)),e.dataType=new n.EnumConverter((g={},g[i.DataType.Bool]=r.DataType.Bool,g[i.DataType.Date]=r.DataType.Date,g[i.DataType.DateTime]=r.DataType.DateTime,g[i.DataType.Float]=r.DataType.Float,g[i.DataType.Int]=r.DataType.Int,g[i.DataType.String]=r.DataType.String,g)),e.filterUpdateType=new n.EnumConverter((h={},h[i.FilterUpdateType.Add]=r.FilterUpdateType.Add,h[i.FilterUpdateType.All]=r.FilterUpdateType.All,h[i.FilterUpdateType.Remove]=r.FilterUpdateType.Remove,h[i.FilterUpdateType.Replace]=r.FilterUpdateType.Replace,h)),e.allowableValues=new n.EnumConverter((S={},S[i.DomainRestrictionType.All]=r.ParameterValueType.All,S[i.DomainRestrictionType.List]=r.ParameterValueType.List,S[i.DomainRestrictionType.Range]=r.ParameterValueType.Range,S)),e.dateStepPeriod=new n.EnumConverter((f={},f[i.DateStepPeriod.Years]=r.PeriodType.Years,f[i.DateStepPeriod.Quarters]=r.PeriodType.Quarters,f[i.DateStepPeriod.Months]=r.PeriodType.Months,f[i.DateStepPeriod.Weeks]=r.PeriodType.Weeks,f[i.DateStepPeriod.Days]=r.PeriodType.Days,f[i.DateStepPeriod.Hours]=r.PeriodType.Hours,f[i.DateStepPeriod.Minutes]=r.PeriodType.Minutes,f[i.DateStepPeriod.Seconds]=r.PeriodType.Seconds,f)),e.dateRangeType=new n.EnumConverter((y={},y[i.DateRangeType.Current]=r.DateRangeType.Current,y[i.DateRangeType.Last]=r.DateRangeType.Last,y[i.DateRangeType.LastN]=r.DateRangeType.LastN,y[i.DateRangeType.Next]=r.DateRangeType.Next,y[i.DateRangeType.NextN]=r.DateRangeType.NextN,y[i.DateRangeType.ToDate]=r.DateRangeType.ToDate,y)),e.errorCode=new n.EnumConverter((T={},T[i.ErrorCodes.INITIALIZATION_ERROR]=r.ErrorCodes.InternalError,T[i.ErrorCodes.INTERNAL_ERROR]=r.ErrorCodes.InternalError,T[i.ErrorCodes.MISSING_ENUM_MAPPING]=r.ErrorCodes.InternalError,T[i.ErrorCodes.MISSING_PARAMETER]=r.ErrorCodes.InternalError,T[i.ErrorCodes.PERMISSION_DENIED]=r.ErrorCodes.InternalError,T[i.ErrorCodes.PRES_MODEL_PARSING_ERROR]=r.ErrorCodes.InternalError,T[i.ErrorCodes.UNKNOWN_VERB_ID]=r.ErrorCodes.InternalError,T[i.ErrorCodes.VERSION_NOT_CONFIGURED]=r.ErrorCodes.APINotInitialized,T)),e.filterType=new n.EnumConverter((b={},b[i.FilterType.Categorical]=r.FilterType.Categorical,b[i.FilterType.Range]=r.FilterType.Range,b[i.FilterType.RelativeDate]=r.FilterType.RelativeDate,b[i.FilterType.Hierarchical]=r.FilterType.Hierarchical,b)),e}();t.InternalToExternalEnumMappings=o;var l,s,d,c,u,p,m,g,h,S,f,y,T,b},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(6)),r(a(7)),r(a(8)),r(a(9)),r(a(10))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(16),n=function(){function e(e,t){this._mappings=e,this._defaultVal=t}return e.prototype.convert=function(e,t){if(this._mappings.hasOwnProperty(e))return this._mappings[e];if(void 0!==this._defaultVal&&!t)return this._defaultVal;throw new i.TableauError(r.ErrorCodes.InternalError,"Enum Mapping not found for: "+e)},e}();t.EnumConverter=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._type=e}return Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),e}();t.TableauEvent=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._eventType=e,this._handlers=[]}return Object.defineProperty(e.prototype,"eventType",{get:function(){return this._eventType},enumerable:!0,configurable:!0}),e.prototype.addEventListener=function(e){var t=this;return this._handlers.push(e),function(){return t.removeEventListener(e)}},e.prototype.removeEventListener=function(e){var t=this._handlers.length;return this._handlers=this._handlers.filter(function(t){return t!==e}),t>this._handlers.length},e.prototype.triggerEvent=function(e){for(var t=0,a=this._handlers;t<a.length;t++){var r=a[t];try{var i=e();r(i)}catch(n){continue}}},e}();t.SingleEventManagerImpl=a},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(24),l=a(18),s=a(25),d=a(26),c=a(27),u=a(30),p=a(32),m=a(33),g=a(28),h=function(e){function t(t,a){var r=e.call(this,new p.SheetInfoImpl(t.name,i.SheetType.Dashboard,new d.Size(t.size.h,t.size.w)))||this;return r._info=t,r._sheetPath=a,r}return r(t,e),Object.defineProperty(t.prototype,"worksheets",{get:function(){return this._worksheets},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"objects",{get:function(){return this._objects},enumerable:!0,configurable:!0}),t.prototype.initializeWithPublicInterfaces=function(e){g.ErrorHelpers.verifyInternalValue(e,"dashboard"),this._worksheets=new Array,this._objects=new Array;for(var t=0,a=this._info.zones;t<a.length;t++){var r=a[t],u=void 0,h=new d.Size(r.height,r.width);if(r.zoneType===n.DashboardObjectType.Worksheet){var S=new p.SheetInfoImpl(r.name,i.SheetType.Worksheet,h),f={worksheet:r.name,dashboard:this._info.name,storyboard:this._sheetPath.storyboard,flipboardZoneID:this._sheetPath.flipboardZoneID,storyPointID:this._sheetPath.storyPointID},y=new m.WorksheetImpl(S,f,e);u=new c.Worksheet(y),this._worksheets.push(u)}var T=new s.Point(r.x,r.y),b=new o.DashboardObject(e,l.InternalToExternalEnumMappings.dashboardObjectType.convert(r.zoneType),T,h,u);this._objects.push(b)}},t}(u.SheetImpl);t.DashboardImpl=h},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{
value:!0});var a=function(){function e(e,t,a,r,i){this._dashboard=e,this._type=t,this._position=a,this._size=r,this._worksheet=i}return Object.defineProperty(e.prototype,"dashboard",{get:function(){return this._dashboard},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._position},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"worksheet",{get:function(){return this._worksheet},enumerable:!0,configurable:!0}),e}();t.DashboardObject=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"x",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},enumerable:!0,configurable:!0}),e}();t.Point=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){this._height=e,this._width=t}return Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),e}();t.Size=a},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(13),n=a(28),o=function(e){function t(t){var a=e.call(this,t)||this;return a._worksheetImpl=t,a._worksheetImpl.initializeEvents(a).forEach(function(e){return a.addNewEventType(e)}),a}return r(t,e),Object.defineProperty(t.prototype,"parentDashboard",{get:function(){return this._worksheetImpl.parentDashboard},enumerable:!0,configurable:!0}),t.prototype.applyFilterAsync=function(e,t,a,r){return this._worksheetImpl.applyFilterAsync(e,t,a,r)},t.prototype.applyRangeFilterAsync=function(e,t){return this._worksheetImpl.applyRangeFilterAsync(e,t)},t.prototype.clearFilterAsync=function(e){return this._worksheetImpl.clearFilterAsync(e)},t.prototype.getAnalyticObjectsAsync=function(){throw n.ErrorHelpers.apiNotImplemented("Worksheet.getAnalyticObjectsAsync")},t.prototype.getDataSourcesAsync=function(){return this._worksheetImpl.getDataSourcesAsync()},t.prototype.getEncodingsAsync=function(){throw n.ErrorHelpers.apiNotImplemented("Worksheet.getEncodingsAsync")},t.prototype.getFiltersAsync=function(){return this._worksheetImpl.getFiltersAsync()},t.prototype.getSelectedMarksAsync=function(){return this._worksheetImpl.getSelectedMarksAsync()},t.prototype.getHighlightedMarksAsync=function(){return this._worksheetImpl.getHighlightedMarksAsync()},t.prototype.getSummaryDataAsync=function(e){return this._worksheetImpl.getSummaryDataAsync(e)},t.prototype.getUnderlyingDataAsync=function(e){return this._worksheetImpl.getUnderlyingDataAsync(e)},t.prototype.clearSelectedMarksAsync=function(){return this._worksheetImpl.clearSelectedMarksAsync()},t.prototype.selectMarksByIDAsync=function(e,t){return this._worksheetImpl.selectMarksByIdAsync(e,t)},t.prototype.selectMarksByValueAsync=function(e,t){return this._worksheetImpl.selectMarksByValueAsync(e,t)},t.prototype.selectMarksByIdAsync=function(e,t){return this._worksheetImpl.selectMarksByIdAsync(e,t)},t}(i.Sheet);t.Worksheet=o},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(29),n=a(16),o=function(){function e(){}return e.apiNotImplemented=function(e){return new n.TableauError(r.ErrorCodes.InternalError,e+" API not yet implemented.")},e.verifyInternalValue=function(e,t){if(null===e||void 0===e)throw new n.TableauError(r.ErrorCodes.InternalError,e+" is invalid value for: "+t)},e.verifyParameter=function(e,t){if(null===e||void 0===e)throw new n.TableauError(r.ErrorCodes.InvalidParameter,e+" is invalid value for paramter: "+t)},e.verifyStringParameter=function(e,t){if(null===e||void 0===e||""===e)throw new n.TableauError(r.ErrorCodes.InvalidParameter,e+" is invalid value for paramter: "+t)},e.verifyEnumValue=function(e,t){var a=!1;if(Object.keys(t).forEach(function(r){t[r]===e.toString()&&(a=!0)}),!a)throw new n.TableauError(r.ErrorCodes.InvalidParameter,e+" is invalid value for enum: "+t)},e.verifyRangeParamType=function(e,t){if(!e&&!t)throw new n.TableauError(r.ErrorCodes.InvalidParameter,"Unexpected invalid param value, at least one of min or max is required.");if(!i.Param.isTypeNumber(e)&&!i.Param.isTypeDate(e))throw new n.TableauError(r.ErrorCodes.InvalidParameter,"Unexpected invalid param value, only Date and number are allowed for parameter min.");if(!i.Param.isTypeNumber(t)&&!i.Param.isTypeDate(t))throw new n.TableauError(r.ErrorCodes.InvalidParameter,"Unexpected invalid param value, only Date and number are allowed for parameter max.");if(typeof e!=typeof t)throw new n.TableauError(r.ErrorCodes.InvalidParameter,"Unexpected invalid param value, parameters min and max should be of the same type.")},e}();t.ErrorHelpers=o},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(16),n=function(){function e(){}return e.serializeDateForPlatform=function(e){var t=e.getUTCFullYear(),a=e.getUTCMonth()+1,r=e.getUTCDate(),i=e.getUTCHours(),n=e.getUTCMinutes(),o=e.getUTCSeconds();return t+"-"+a+"-"+r+" "+i+":"+n+":"+o},e.serializeBooleanForPlatform=function(e){return e?"true":"false"},e.serializeNumberForPlatform=function(e){return e.toString(10)},e.isTypeNumber=function(e){return"number"==typeof e||e instanceof Number},e.isTypeDate=function(e){return e instanceof Date},e.isTypeString=function(e){return"string"==typeof e||e instanceof String},e.isTypeBool=function(e){return"boolean"==typeof e||e instanceof Boolean},e.serializeParamterValue=function(t){if(e.isTypeNumber(t))return e.serializeNumberForPlatform(t);if(e.isTypeDate(t))return e.serializeDateForPlatform(t);if(e.isTypeBool(t))return e.serializeBooleanForPlatform(t);if(e.isTypeString(t))return t;throw new i.TableauError(r.ErrorCodes.InternalError,"Unexpected invalid value for: "+t)},e}();t.Param=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(31),i=a(28),n=function(){function e(e){this._sheetInfoImpl=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this._sheetInfoImpl.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sheetType",{get:function(){return this._sheetInfoImpl.sheetType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sheetPath",{get:function(){return this._sheetInfoImpl.sheetPath},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this._sheetInfoImpl.sheetSize},enumerable:!0,configurable:!0}),e.prototype.findParameterAsync=function(e,t){i.ErrorHelpers.verifyParameter(e,"parameterName"),i.ErrorHelpers.verifyParameter(t,"sheet");var a=r.ApiServiceRegistry.instance.getService("parameters-service");return a.findParameterByNameAsync(e,t)},e.prototype.getParametersAsync=function(e){i.ErrorHelpers.verifyParameter(e,"sheet");var t=r.ApiServiceRegistry.instance.getService("parameters-service");return t.getParametersForSheetAsync(this.sheetPath,e)},e}();t.SheetImpl=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(16),n=function(){function e(){this._services={}}return e.prototype.registerService=function(e){this._services[e.serviceName]=e},e.prototype.getService=function(e){if(!this._services.hasOwnProperty(e))throw new i.TableauError(r.ErrorCodes.InternalError,"Service not registered: "+e);return this._services[e]},e}(),o=function(){function e(){}return Object.defineProperty(e,"instance",{get:function(){if(window.__tableauApiServiceRegistry||e.setInstance(new n),!window.__tableauApiServiceRegistry)throw new i.TableauError(r.ErrorCodes.InternalError,"Service registry failed");return window.__tableauApiServiceRegistry},enumerable:!0,configurable:!0}),e.setInstance=function(e){window.__tableauApiServiceRegistry=e},e}();t.ApiServiceRegistry=o},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=function(){function e(e,t,a){this._name=e,this._sheetType=t,this._sheetSize=a}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sheetSize",{get:function(){return this._sheetSize},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sheetType",{get:function(){return this._sheetType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sheetPath",{get:function(){return{sheetName:this.name,isDashboard:this.sheetType===r.SheetType.Dashboard}},enumerable:!0,configurable:!0}),e}();t.SheetInfoImpl=i},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(34),l=a(35),s=a(30),d=a(22),c=a(40),u=a(43),p=a(44),m=a(31),g=a(28),h=function(e,t){return e&&t&&e.worksheet===t.worksheet&&e.dashboard===t.dashboard&&e.storyboard===t.storyboard&&e.storyPointID===t.storyPointID&&e.flipboardZoneID===t.flipboardZoneID},S=function(e){function t(t,a,r){var i=e.call(this,t)||this;return i._visualId=a,i._parentDashboard=r,i}return r(t,e),Object.defineProperty(t.prototype,"parentDashboard",{get:function(){return this._parentDashboard},enumerable:!0,configurable:!0}),t.prototype.initializeEvents=function(e){var t,a=this,r=new Array;try{t=m.ApiServiceRegistry.instance.getService("notification-service")}catch(o){return r}var l=new d.SingleEventManagerImpl(i.TableauEventType.MarkSelectionChanged);t.registerHandler(n.NotificationId.SelectedMarksChanged,function(e){var t=e;return h(t,a.visualId)},function(t){l.triggerEvent(function(){return new u.MarksSelectedEvent(e)})});var s=new d.SingleEventManagerImpl(i.TableauEventType.FilterChanged);return t.registerHandler(n.NotificationId.FilterChanged,function(e){var t=e;return a.visualId.worksheet===t.visualId.worksheet},function(t){s.triggerEvent(function(){return new c.FilterChangedEvent(e,t.fieldName)})}),r.push(l),r.push(s),r},Object.defineProperty(t.prototype,"visualId",{get:function(){return this._visualId},enumerable:!0,configurable:!0}),t.prototype.applyFilterAsync=function(e,t,a,r){g.ErrorHelpers.verifyEnumValue(a,i.FilterUpdateType);var n=m.ApiServiceRegistry.instance.getService("filter-service");return n.applyFilterAsync(this.visualId,e,t,a,r)},t.prototype.applyRangeFilterAsync=function(e,t){g.ErrorHelpers.verifyParameter(e,"fieldName"),g.ErrorHelpers.verifyParameter(t,"filterOptions"),g.ErrorHelpers.verifyRangeParamType(t.min,t.max),t.nullOption&&g.ErrorHelpers.verifyEnumValue(t.nullOption,i.FilterNullOption);var a=m.ApiServiceRegistry.instance.getService("filter-service");return a.applyRangeFilterAsync(this.visualId,e,t)},t.prototype.clearFilterAsync=function(e){g.ErrorHelpers.verifyParameter(e,"fieldName");var t=m.ApiServiceRegistry.instance.getService("filter-service");return t.clearFilterAsync(this.visualId,e)},t.prototype.getDataSourcesAsync=function(){var e=this,t=m.ApiServiceRegistry.instance.getService("data-source-service");return t.getDataSourcesAsync(this.visualId).then(function(t){var a=t,r=a.worksheetDataSchemaMap[e.name],i=[],n=r.primaryDataSource;i.push(e.createDataSourceFromInfo(a.dataSources[n]));for(var o=0,l=r.referencedDataSourceList;o<l.length;o++){var s=l[o];s!==n&&i.push(e.createDataSourceFromInfo(a.dataSources[s]))}return i})},t.prototype.getFiltersAsync=function(){var e=m.ApiServiceRegistry.instance.getService("filter-service");return e.getFiltersAsync(this.visualId)},t.prototype.getSelectedMarksAsync=function(){var e=m.ApiServiceRegistry.instance.getService("get-data-service");return e.getSelectedMarksAsync(this.visualId)},t.prototype.getHighlightedMarksAsync=function(){var e=m.ApiServiceRegistry.instance.getService("get-data-service");return e.getHighlightedMarksAsync(this.visualId)},t.prototype.getSummaryDataAsync=function(e){var t=m.ApiServiceRegistry.instance.getService("get-data-service");return e=e||{},t.getUnderlyingDataAsync(this.visualId,p.GetDataType.Summary,!!e.ignoreAliases,!!e.ignoreSelection,!0,0)},t.prototype.getUnderlyingDataAsync=function(e){var t=m.ApiServiceRegistry.instance.getService("get-data-service");return e=e||{},t.getUnderlyingDataAsync(this.visualId,p.GetDataType.Underlying,!!e.ignoreAliases,!!e.ignoreSelection,!!e.includeAllColumns,e.maxRows||0)},t.prototype.clearSelectedMarksAsync=function(){var e=m.ApiServiceRegistry.instance.getService("selection-service");return e.clearSelectedMarksAsync(this.visualId)},t.prototype.selectMarksByValueAsync=function(e,t){g.ErrorHelpers.verifyParameter(e,"fieldName"),g.ErrorHelpers.verifyEnumValue(t,i.SelectionUpdateType);var a=m.ApiServiceRegistry.instance.getService("selection-service");return a.selectMarksByValueAsync(this.visualId,e,t)},t.prototype.selectMarksByIdAsync=function(e,t){g.ErrorHelpers.verifyParameter(e,"fieldName"),g.ErrorHelpers.verifyEnumValue(t,i.SelectionUpdateType);var a=m.ApiServiceRegistry.instance.getService("selection-service");return a.selectMarksByIdAsync(this.visualId,e,t)},t.prototype.createDataSourceFromInfo=function(e){var t=new l.DataSourceImpl(e),a=new o.DataSource(t);return t.initializeWithPublicInterfaces(a),a},t}(s.SheetImpl);t.WorksheetImpl=S},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._dataSourceImpl=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this._dataSourceImpl.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._dataSourceImpl.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fields",{get:function(){return this._dataSourceImpl.fields},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extractUpdateTime",{get:function(){return this._dataSourceImpl.extractUpdateTime},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isExtract",{get:function(){return this._dataSourceImpl.isExtract},enumerable:!0,configurable:!0}),e.prototype.refreshAsync=function(){return this._dataSourceImpl.refreshAsync()},e.prototype.getActiveTablesAsync=function(){return this._dataSourceImpl.getActiveTablesAsync()},e.prototype.getConnectionSummariesAsync=function(){return this._dataSourceImpl.getConnectionSummariesAsync()},e.prototype.getUnderlyingDataAsync=function(e){return this._dataSourceImpl.getUnderlyingDataAsync(e)},e}();t.DataSource=a},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(36),i=a(37),n=a(38),o=a(39),l=a(31),s=a(28),d=function(){function e(e){var t=this;this._dataSourceInfo=e,this._fields=e.fields.map(function(e){var a=new r.FieldImpl(e,t);return new n.Field(a)})}return Object.defineProperty(e.prototype,"name",{get:function(){return this._dataSourceInfo.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._dataSourceInfo.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extractUpdateTime",{get:function(){return this._dataSourceInfo.extractUpdateTime},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fields",{get:function(){return this._fields},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isExtract",{get:function(){return this._dataSourceInfo.isExtract},enumerable:!0,configurable:!0}),e.prototype.refreshAsync=function(){var e=l.ApiServiceRegistry.instance.getService("data-source-service");return e.refreshAsync(this._dataSourceInfo.id)},e.prototype.getConnectionSummariesAsync=function(){var e=l.ApiServiceRegistry.instance.getService("data-source-service");return e.getConnectionSummariesAsync(this._dataSourceInfo.id).then(function(e){return e.map(function(e){return new i.ConnectionSummary(e)})})},e.prototype.getActiveTablesAsync=function(){var e=l.ApiServiceRegistry.instance.getService("data-source-service");return e.getActiveTablesAsync(this._dataSourceInfo.id).then(function(e){return e.map(function(e){return new o.TableSummary(e)})})},e.prototype.getUnderlyingDataAsync=function(e){var t={ignoreAliases:!1,maxRows:1e4,columnsToInclude:[]};e=e||{};var a=l.ApiServiceRegistry.instance.getService("get-data-service");return a.getDataSourceDataAsync(this.id,!!e.ignoreAliases,e.maxRows||t.maxRows,e.columnsToInclude||t.columnsToInclude)},e.prototype.initializeWithPublicInterfaces=function(e){s.ErrorHelpers.verifyInternalValue(e,"dataSource"),this._fields=this._dataSourceInfo.fields.map(function(t){var a=new r.FieldImpl(t,e);return new n.Field(a)})},e}();t.DataSourceImpl=d},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(18),i=function(){function e(e,t){this._fieldInfo=e,this._parentDataSource=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this._fieldInfo.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._fieldInfo.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"description",{get:function(){return this._fieldInfo.description},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"aggregation",{get:function(){return r.InternalToExternalEnumMappings.fieldAggregationType.convert(this._fieldInfo.aggregation)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dataSource",{get:function(){return this._parentDataSource},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"role",{get:function(){return r.InternalToExternalEnumMappings.fieldRoleType.convert(this._fieldInfo.role)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isHidden",{get:function(){return this._fieldInfo.isHidden},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isGenerated",{get:function(){return this._fieldInfo.isGenerated},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isCalculatedField",{get:function(){return this._fieldInfo.isCalculatedField},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isCombinedField",{get:function(){return this._fieldInfo.isCombinedField},enumerable:!0,configurable:!0}),e.prototype.getCalculatedFieldAsync=function(){throw new Error("Field getCalculatedFieldAsync method not yet implemented.")},e}();t.FieldImpl=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._connectionInfo=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this._connectionInfo.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._connectionInfo.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"serverURI",{get:function(){return this._connectionInfo.serverURI},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._connectionInfo.type},enumerable:!0,configurable:!0}),e}();t.ConnectionSummary=a},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(28),i=function(){function e(e){this._fieldImpl=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this._fieldImpl.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._fieldImpl.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"description",{get:function(){return this._fieldImpl.description},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"aggregation",{get:function(){return this._fieldImpl.aggregation},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dataSource",{get:function(){return this._fieldImpl.dataSource},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"role",{get:function(){return this._fieldImpl.role},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isHidden",{get:function(){return this._fieldImpl.isHidden},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isGenerated",{get:function(){return this._fieldImpl.isGenerated},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isCalculatedField",{get:function(){return this._fieldImpl.isCalculatedField},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"columnType",{get:function(){throw r.ErrorHelpers.apiNotImplemented("Field.columnType")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isCombinedField",{get:function(){return this._fieldImpl.isCombinedField},enumerable:!0,configurable:!0}),e.prototype.getCalculatedFieldAsync=function(){return this._fieldImpl.getCalculatedFieldAsync()},e}();t.Field=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._tableInfo=e}return Object.defineProperty(e.prototype,"name",{get:function(){return this._tableInfo.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._tableInfo.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"connectionId",{get:function(){return this._tableInfo.connectionId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"customSQL",{get:function(){return this._tableInfo.customSQL},enumerable:!0,configurable:!0}),e}();t.TableSummary=a},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(16),o=a(41),l=function(e){function t(t,a){var r=e.call(this,i.TableauEventType.FilterChanged,t)||this;return r._fieldName=a,r}return r(t,e),Object.defineProperty(t.prototype,"fieldName",{get:function(){return this._fieldName},enumerable:!0,configurable:!0}),t.prototype.getFilterAsync=function(){var e=this;return this._worksheet.getFiltersAsync().then(function(t){var a=t.find(function(t){return t.fieldName===e._fieldName});if(!a)throw new n.TableauError(i.ErrorCodes.MissingFilter,"cannot find filter: "+e._fieldName);return a})},t}(o.TableauWorksheetEvent);t.FilterChangedEvent=l},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(42),n=function(e){function t(t,a){var r=e.call(this,t,a)||this;return r._worksheet=a,r}return r(t,e),Object.defineProperty(t.prototype,"worksheet",{get:function(){return this._worksheet},enumerable:!0,configurable:!0}),t}(i.TableauSheetEvent);t.TableauWorksheetEvent=n},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(21),n=function(e){function t(t,a){var r=e.call(this,t)||this;return r._sheet=a,r}return r(t,e),Object.defineProperty(t.prototype,"sheet",{get:function(){return this._sheet},enumerable:!0,configurable:!0}),t}(i.TableauEvent);t.TableauSheetEvent=n},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(41),o=function(e){function t(t){return e.call(this,i.TableauEventType.MarkSelectionChanged,t)||this}return r(t,e),t.prototype.getMarksAsync=function(){return this.worksheet.getSelectedMarksAsync()},t}(n.TableauWorksheetEvent);t.MarksSelectedEvent=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.Summary="summary",e.Underlying="underlying"}(a=t.GetDataType||(t.GetDataType={}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(18),i=a(16),n=function(){function e(e){this._dispatcher=e}return e.prototype.execute=function(e,t){return this._dispatcher.execute(e,t)["catch"](function(e){var t=e,a=r.InternalToExternalEnumMappings.errorCode.convert(t.errorCode);throw new i.TableauError(a,t.message)})},e}();t.ServiceImplBase=n},function(e,t,a){"use strict";function r(e){try{return e.self!==e.parent}catch(t){return!0}}function i(e,t){return new Promise(function(a,i){r(e)||i("This extension is not running inside an iframe or desktop. Initialization failed.");var l=new n.CrossFrameMessenger(e,e.parent,"*"),s=l.prepareInitializationMessage(t,n.VERSION);l.setCommandResponseMessageHandler(function(e){if(e.commandGuid===s.messageGuid){var t=new o.CrossFrameDispatcher(l);a(t)}}),l.startListening(),s.send()})}Object.defineProperty(t,"__esModule",{value:!0});var n=a(47),o=a(53);t.doCrossFrameBootstrap=i},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(48)),r(a(51)),t.VERSION={major:1,minor:0,fix:0}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(49),i=a(50),n=a(51),o=a(52),l=function(){function e(e,t,a){this.thisWindow=e,this.otherWindow=t,this.otherWindowOrigin=a}return e.prototype.startListening=function(){var e=this;if(!this.unregisterFunction){var t=this.onMessageReceived.bind(this);this.thisWindow.addEventListener("message",t,!0),this.unregisterFunction=function(){return e.thisWindow.removeEventListener("message",t,!0)}}},e.prototype.stopListening=function(){this.unregisterFunction&&(this.unregisterFunction(),this.unregisterFunction=void 0)},e.prototype.setInitializeMessageHandler=function(e){this.initializeMessageHandler=e},e.prototype.setCommandResponseMessageHandler=function(e){this.commandResponseMessageHandler=e},e.prototype.setCommandMessageHandler=function(e){this.commandMessageHandler=e},e.prototype.setNotificationMessageHandler=function(e){this.notificationMessageHandler=e},e.prototype.prepareInitializationMessage=function(e,t){var a={msgGuid:r.Guid.create().formattedValue,msgType:n.MessageType.Initialize,crossFrameVersion:t,apiVersion:e};return this.prepareMessage(a)},e.prototype.prepareCommandMessage=function(e,t){var a={msgGuid:r.Guid.create().formattedValue,msgType:n.MessageType.Command,verbId:e,parameters:t};return this.prepareMessage(a)},e.prototype.prepareCommandResponseMessage=function(e,t,a){var i={msgGuid:r.Guid.create().formattedValue,msgType:n.MessageType.CommandResponse,commandGuid:e,data:t,error:a};return this.prepareMessage(i)},e.prototype.prepareNotificationMessage=function(e,t){var a={msgGuid:r.Guid.create().formattedValue,msgType:n.MessageType.Notification,notificationId:e,data:t};return this.prepareMessage(a)},e.prototype.prepareMessage=function(e){if(!this.otherWindow||!this.otherWindowOrigin)throw"Other window not initialized, cannot dispatch messages";var t=new i.CrossFramePreparedMessage(e,this.otherWindow,this.otherWindowOrigin);return t},e.prototype.onMessageReceived=function(e){if((!this.otherWindow||e.source===this.otherWindow)&&e.data){var t=e.data;if(o.isMessage(t))switch(t.msgType){case n.MessageType.Initialize:if(!o.isInitMessage(t)||!this.initializeMessageHandler)return;this.initializeMessageHandler(t,e.source);break;case n.MessageType.CommandResponse:if(!o.isCommandResponseMessage(t)||!this.commandResponseMessageHandler)return;this.commandResponseMessageHandler(t,e.source);break;case n.MessageType.Command:if(!o.isCommandMessage(t)||!this.commandMessageHandler)return;this.commandMessageHandler(t,e.source);break;case n.MessageType.Notification:if(!o.isNotificationMessage(t)||!this.notificationMessageHandler)return;this.notificationMessageHandler(t,e.source)}}},e}();t.CrossFrameMessenger=l},function(e,t){"use strict";function a(e){void 0===e&&(e=1);for(var t="",a=0;a<e;a++)t+=(65536*(1+Math.random())|0).toString(16).substring(1);return t}Object.defineProperty(t,"__esModule",{value:!0});var r=/^[a-f0-9]{8}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{12}$/i,i="00000000-0000-0000-0000-000000000000",n=function(){function e(e){this.value=e.toLowerCase()}return Object.defineProperty(e.prototype,"formattedValue",{get:function(){return this.value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEmpty",{get:function(){return this.value===i},enumerable:!0,configurable:!0}),e.isGuid=function(t){return t instanceof e||r.test(t)},e.create=function(){return new e([a(2),a(),a(),a(),a(3)].join("-"))},e.parse=function(t){if(!e.isGuid(t))throw new TypeError("Value is not a valid GUID: '"+t+"'");return new e(t)},e.prototype.toString=function(){return this.value},e.prototype.equals=function(t){var a=t instanceof e?t:e.parse(t);return this.formattedValue===a.formattedValue},e.EMPTY=new e(i),e}();t.Guid=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t,a){this._message=e,this._target=t,this._origin=a}return Object.defineProperty(e.prototype,"messageGuid",{get:function(){return this._message.msgGuid},enumerable:!0,configurable:!0}),e.prototype.send=function(){return this._target.postMessage(this._message,this._origin),this},e}();t.CrossFramePreparedMessage=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.Initialize="initialize",e.Notification="notification",e.Command="command",e.CommandResponse="command-response"}(a=t.MessageType||(t.MessageType={}))},function(e,t,a){"use strict";function r(e){if(!e)return!1;var t=e;if(!t||!t.msgGuid||!t.msgType)return!1;if(!d.Guid.isGuid(t.msgGuid))return!1;if("string"!=typeof t.msgType)return!1;var a=[c.MessageType.Command,c.MessageType.CommandResponse,c.MessageType.Initialize,c.MessageType.Notification];return!(a.indexOf(t.msgType)<0)}function i(e){if(!e)return!1;var t=e;return"object"==typeof t&&("number"==typeof t.fix&&"number"==typeof t.minor&&"number"==typeof t.major)}function n(e){if(!r(e))return!1;var t=e;return t.msgType===c.MessageType.Initialize&&(!(!t.apiVersion||!i(t.apiVersion))&&!(!t.crossFrameVersion||!i(t.crossFrameVersion)))}function o(e){if(!r(e))return!1;var t=e;return t.msgType===c.MessageType.CommandResponse&&(!!d.Guid.isGuid(t.commandGuid)&&!(!t.data&&!t.error))}function l(e){if(!r(e))return!1;var t=e;return t.msgType===c.MessageType.Command&&(!(!t.parameters||"object"!=typeof t.parameters)&&!(!t.verbId||"string"!=typeof t.verbId))}function s(e){if(!r(e))return!1;var t=e;return t.msgType===c.MessageType.Notification&&(!(!t.data||"object"!=typeof t.data)&&!(!t.notificationId||"string"!=typeof t.notificationId));
}Object.defineProperty(t,"__esModule",{value:!0});var d=a(49),c=a(51);t.isMessage=r,t.isVersion=i,t.isInitMessage=n,t.isCommandResponseMessage=o,t.isCommandMessage=l,t.isNotificationMessage=s},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){if(this._messenger=e,this._pendingPromises={},this._notificationHandlers=[],!this._messenger)throw"Missing messenger object";this._messenger.setCommandResponseMessageHandler(this.onCommandResponse.bind(this)),this._messenger.setNotificationMessageHandler(this.onNotification.bind(this))}return e.prototype.setVersionNumber=function(e){this._versionNumber=e},e.prototype.execute=function(e,t){var a=this,r=this._messenger.prepareCommandMessage(e,t),i=new Promise(function(e,t){a._pendingPromises[r.messageGuid]={resolve:e,reject:t}});return r.send(),i},e.prototype.registerNotificationHandler=function(e){this._notificationHandlers.push(e)},e.prototype.unregisterNotificationHandler=function(e){this._notificationHandlers=this._notificationHandlers.filter(function(t){return t!==e})},e.prototype.onCommandResponse=function(e){if(!(Object.keys(this._pendingPromises).indexOf(e.commandGuid)<0)){var t=this._pendingPromises[e.commandGuid];e.error&&t.reject(e.error),e.data&&t.resolve({result:e.data}),delete this._pendingPromises[e.commandGuid]}},e.prototype.onNotification=function(e){for(var t=0,a=this._notificationHandlers;t<a.length;t++){var r=a[t];try{r({notificationId:e.notificationId,data:e.data})}catch(i){}}},e}();t.CrossFrameDispatcher=a},function(e,t,a){"use strict";function r(e){c.ApiServiceRegistry.instance.registerService(new i.DataSourceServiceImpl(e)),c.ApiServiceRegistry.instance.registerService(new o.GetDataServiceImpl(e)),c.ApiServiceRegistry.instance.registerService(new n.FilterServiceImpl(e)),c.ApiServiceRegistry.instance.registerService(new l.NotificationServiceImpl(e)),c.ApiServiceRegistry.instance.registerService(new s.ParametersServiceImpl(e)),c.ApiServiceRegistry.instance.registerService(new d.SelectionServiceImpl(e))}Object.defineProperty(t,"__esModule",{value:!0});var i=a(55),n=a(56),o=a(60),l=a(61),s=a(62),d=a(66),c=a(31);t.registerAllSharedServices=r},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(45),l=a(16),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"data-source-service"},enumerable:!0,configurable:!0}),t.prototype.refreshAsync=function(e){var t=(a={},a[n.ParameterId.DataSourceId]=e,a);return this.execute(n.VerbId.RefreshDataSource,t).then(function(e){});var a},t.prototype.getActiveTablesAsync=function(e){var t=(a={},a[n.ParameterId.DataSourceId]=e,a);return this.execute(n.VerbId.GetJoinDescription,t).then(function(t){var a=t.result;if(0===a.tables.length)throw new l.TableauError(i.ErrorCodes.UnsupportedMethodForDataSourceType,"getActiveTables is not supported for: "+e);return a.tables});var a},t.prototype.getDataSourcesAsync=function(e){var t=(a={},a[n.ParameterId.VisualId]=e,a);return this.execute(n.VerbId.GetDataSources,t).then(function(e){var t=e.result;return t});var a},t.prototype.getConnectionSummariesAsync=function(e){var t=(a={},a[n.ParameterId.DataSourceId]=e,a);return this.execute(n.VerbId.GetConnectionDescriptionSummaries,t).then(function(e){var t=e.result;return t});var a},t}(o.ServiceImplBase);t.DataSourceServiceImpl=s},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(57),l=a(18),s=a(58),d=a(45),c=a(59),u=a(29),p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"filter-service"},enumerable:!0,configurable:!0}),t.prototype.applyFilterAsync=function(e,t,a,r,i){var l=n.VerbId.ApplyCategoricalFilter,s={};return s[n.ParameterId.VisualId]=e,s[n.ParameterId.FieldName]=t,s[n.ParameterId.FilterValues]=a,s[n.ParameterId.FilterUpdateType]=o.ExternalToInternalEnumMappings.filterUpdateType.convert(r),s[n.ParameterId.IsExcludeMode]=void 0!==i&&void 0!==i.isExcludeMode&&i.isExcludeMode,this.execute(l,s).then(function(e){return t})},t.prototype.applyRangeFilterAsync=function(e,t,a){var r=n.VerbId.ApplyRangeFilter,i={};if(a.min){var l=void 0;l=a.min instanceof Date?u.Param.serializeDateForPlatform(a.min):a.min,i[n.ParameterId.FilterRangeMin]=l}if(a.max){var s=void 0;s=a.max instanceof Date?u.Param.serializeDateForPlatform(a.max):a.max,i[n.ParameterId.FilterRangeMax]=s}return a.nullOption&&(i[n.ParameterId.FilterRangeNullOption]=o.ExternalToInternalEnumMappings.nullOptions.convert(a.nullOption)),i[n.ParameterId.FieldName]=t,i[n.ParameterId.VisualId]=e,this.execute(r,i).then(function(e){return t})},t.prototype.clearFilterAsync=function(e,t){var a=n.VerbId.ClearFilter,r={};return r[n.ParameterId.VisualId]=e,r[n.ParameterId.FieldName]=t,this.execute(a,r).then(function(e){return t})},t.prototype.getFiltersAsync=function(e){var t=this,a=n.VerbId.GetFilters,r={};return r[n.ParameterId.VisualId]=e,this.execute(a,r).then(function(e){var a=e.result;return t.convertDomainFilters(a)})},t.prototype.getCategoricalDomainAsync=function(e,t,a){var r=this,i=n.VerbId.GetCategoricalDomain,l={};return l[n.ParameterId.VisualId]={worksheet:e},l[n.ParameterId.FieldId]=t,l[n.ParameterId.DomainType]=o.ExternalToInternalEnumMappings.filterDomainType.convert(a),this.execute(i,l).then(function(e){var t=e.result;return r.convertCategoricalDomain(t,a)})},t.prototype.getRangeDomainAsync=function(e,t,a){var r=this,i=n.VerbId.GetRangeDomain,l={};return l[n.ParameterId.VisualId]={worksheet:e},l[n.ParameterId.FieldId]=t,l[n.ParameterId.DomainType]=o.ExternalToInternalEnumMappings.filterDomainType.convert(a),this.execute(i,l).then(function(e){var t=e.result;return r.convertRangeDomain(t,a)})},t.prototype.convertDomainFilters=function(e){var t=this,a=[];return e.forEach(function(e){switch(e.filterType){case n.FilterType.Categorical:var r=e;if(!r)throw new Error("Invalid Categorical Filter");a.push(t.convertCategoricalFilter(r));break;case n.FilterType.Range:var r=e;if(!r)throw new Error("Invalid Range Filter");a.push(t.convertRangeFilter(r));break;case n.FilterType.RelativeDate:var r=e;if(!r)throw new Error("Invalid Relative Date Filter");a.push(t.convertRelativeDateFilter(r))}}),a},t.prototype.convertCategoricalFilter=function(e){var t=e.values.map(function(e){return new c.DataValue(e.value,e.formattedValue)});return new s.CategoricalFilter(e.visualId.worksheet,e.fieldCaption,e.fieldName,i.FilterType.Categorical,t,e.isExclude)},t.prototype.convertRangeFilter=function(e){var t=new c.DataValue(e.min.value,e.min.formattedValue),a=new c.DataValue(e.max.value,e.max.formattedValue);return new s.RangeFilter(e.visualId.worksheet,e.fieldCaption,e.fieldName,i.FilterType.Range,t,a,e.includeNullValues)},t.prototype.convertRelativeDateFilter=function(e){var t=new c.DataValue(e.anchorDate.value,e.anchorDate.formattedValue);return new s.RelativeDateFilter(e.visualId.worksheet,e.fieldCaption,e.fieldName,i.FilterType.RelativeDate,t,l.InternalToExternalEnumMappings.dateStepPeriod.convert(e.periodType),l.InternalToExternalEnumMappings.dateRangeType.convert(e.rangeType),e.rangeN)},t.prototype.convertCategoricalDomain=function(e,t){var a=e.values.map(function(e){return new c.DataValue(e.value,e.formattedValue)});return new s.CategoricalDomain(a,t)},t.prototype.convertRangeDomain=function(e,t){var a=new c.DataValue(e.min.value,e.min.formattedValue),r=new c.DataValue(e.max.value,e.max.formattedValue);return new s.RangeDomain(a,r,t)},t}(d.ServiceImplBase);t.FilterServiceImpl=p},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(19),n=a(20),o=function(){function e(){}return e.filterDomainType=new n.EnumConverter((l={},l[r.FilterDomainType.Relevant]=i.FilterDomainType.Relevant,l[r.FilterDomainType.Database]=i.FilterDomainType.Database,l)),e.nullOptions=new n.EnumConverter((s={},s[r.FilterNullOption.AllValues]=i.FilterNullOption.AllValues,s[r.FilterNullOption.NonNullValues]=i.FilterNullOption.NonNullValues,s[r.FilterNullOption.NonNullValues]=i.FilterNullOption.NullValues,s)),e.filterUpdateType=new n.EnumConverter((d={},d[r.FilterUpdateType.Add]=i.FilterUpdateType.Add,d[r.FilterUpdateType.All]=i.FilterUpdateType.All,d[r.FilterUpdateType.Remove]=i.FilterUpdateType.Remove,d[r.FilterUpdateType.Replace]=i.FilterUpdateType.Replace,d)),e}();t.ExternalToInternalEnumMappings=o;var l,s,d},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(31),o=a(28),l=function(){function e(e,t,a,r){this._worksheetName=e,this._fieldName=t,this._filterType=a,this._fieldId=r}return Object.defineProperty(e.prototype,"worksheetName",{get:function(){return this._worksheetName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fieldName",{get:function(){return this._fieldName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fieldId",{get:function(){return this._fieldId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filterType",{get:function(){return this._filterType},enumerable:!0,configurable:!0}),e.prototype.getFieldAsync=function(){throw new Error("Method not implemented")},e}();t.Filter=l;var s=function(e){function t(t,a,r,i,n,o){var l=e.call(this,t,a,i,r)||this;return l._appliedValues=n,l._isExcludeMode=o,l}return r(t,e),Object.defineProperty(t.prototype,"appliedValues",{get:function(){return this._appliedValues},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isExcludeMode",{get:function(){return this._isExcludeMode},enumerable:!0,configurable:!0}),t.prototype.getDomainAsync=function(e){e||(e=i.FilterDomainType.Relevant),o.ErrorHelpers.verifyEnumValue(e,i.FilterDomainType);var t=n.ApiServiceRegistry.instance.getService("filter-service");return t.getCategoricalDomainAsync(this._worksheetName,this._fieldId,e)},t}(l);t.CategoricalFilter=s;var d=function(e){function t(t,a,r,i,n,o,l){var s=e.call(this,t,a,i,r)||this;return s._min=n,s._max=o,s._includeNullValues=l,s}return r(t,e),Object.defineProperty(t.prototype,"minValue",{get:function(){return this._min},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxValue",{get:function(){return this._max},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includeNullValues",{get:function(){return this._includeNullValues},enumerable:!0,configurable:!0}),t.prototype.getDomainAsync=function(e){var t=n.ApiServiceRegistry.instance.getService("filter-service");return e||(e=i.FilterDomainType.Relevant),o.ErrorHelpers.verifyEnumValue(e,i.FilterDomainType),t.getRangeDomainAsync(this._worksheetName,this._fieldId,e)},t}(l);t.RangeFilter=d;var c=function(e){function t(t,a,r,i,n,o,l,s){var d=e.call(this,t,a,i,r)||this;return d._anchorDate=n,d._periodType=o,d._rangeType=l,d._rangeN=s,d}return r(t,e),Object.defineProperty(t.prototype,"anchorDate",{get:function(){return this._anchorDate},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"periodType",{get:function(){return this._periodType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rangeType",{get:function(){return this._rangeType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rangeN",{get:function(){return this._rangeN},enumerable:!0,configurable:!0}),t}(l);t.RelativeDateFilter=c;var u=function(){function e(e,t){this._values=e,this._domainType=t}return Object.defineProperty(e.prototype,"values",{get:function(){return this._values},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._domainType},enumerable:!0,configurable:!0}),e}();t.CategoricalDomain=u;var p=function(){function e(e,t,a){this._min=e,this._max=t,this._domainType=a}return Object.defineProperty(e.prototype,"type",{get:function(){return this._domainType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"min",{get:function(){return this._min},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"max",{get:function(){return this._max},enumerable:!0,configurable:!0}),e}();t.RangeDomain=p},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t,a,r,i){this._data=e,this._columns=t,this._totalRowCount=a,this._isSummaryData=r,this._marksInfo=i,this._name=r?"Summary Data Table":"Underlying Data Table"}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{get:function(){return this._data},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"columns",{get:function(){return this._columns},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"marksInfo",{get:function(){return this._marksInfo},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"totalRowCount",{get:function(){return this._totalRowCount},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSummaryData",{get:function(){return this._isSummaryData},enumerable:!0,configurable:!0}),e}();t.DataTable=a;var r=function(){function e(e,t,a){this._type=e,this._color=t,this._tupleId=a}return Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){return this._color},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tupleId",{get:function(){return this._tupleId},enumerable:!0,configurable:!0}),e}();t.MarkInfo=r;var i=function(){function e(e,t,a,r){this._fieldName=e,this._dataType=t,this._isReferenced=a,this._index=r}return Object.defineProperty(e.prototype,"fieldName",{get:function(){return this._fieldName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dataType",{get:function(){return this._dataType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isReferenced",{get:function(){return this._isReferenced},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"index",{get:function(){return this._index},enumerable:!0,configurable:!0}),e}();t.Column=i;var n=function(){function e(e,t){this._value=e,this._formattedValue=t}return Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"formattedValue",{get:function(){return this._formattedValue},enumerable:!0,configurable:!0}),e}();t.DataValue=n},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(45),l=a(59),s=a(44),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"get-data-service"},enumerable:!0,configurable:!0}),t.prototype.getUnderlyingDataAsync=function(e,t,a,r,i,o){var l=this,d=t===s.GetDataType.Summary?n.VerbId.GetDataSummaryData:n.VerbId.GetUnderlyingData,c={};return c[n.ParameterId.VisualId]=e,c[n.ParameterId.IgnoreAliases]=a,c[n.ParameterId.IgnoreSelection]=r,c[n.ParameterId.IncludeAllColumns]=i,c[n.ParameterId.MaxRows]=o,this.execute(d,c).then(function(e){var t=e.result;return l.processResultsTable(t.data,t.isSummary)})},t.prototype.getSelectedMarksAsync=function(e){var t=this,a=(r={},r[n.ParameterId.VisualId]=e,r);return this.execute(n.VerbId.GetSelectedMarks,a).then(function(e){var a=e.result;return{data:a.data.map(function(e){return t.processResultsTable(e,!0)})}});var r},t.prototype.getHighlightedMarksAsync=function(e){var t=this,a=(r={},r[n.ParameterId.VisualId]=e,r);return this.execute(n.VerbId.GetHighlightedMarks,a).then(function(e){var a=e.result;return{data:a.data.map(function(e){return t.processResultsTable(e,!0)})}});var r},t.prototype.getDataSourceDataAsync=function(e,t,a,r){var i=this,o=(l={},l[n.ParameterId.DataSourceId]=e,l[n.ParameterId.IgnoreAliases]=t,l[n.ParameterId.MaxRows]=a,l[n.ParameterId.ColumnsToInclude]=r,l);return this.execute(n.VerbId.GetDataSourceData,o).then(function(e){var t=e.result;return i.processResultsTable(t.data,!1)});var l},t.prototype.processResultsTable=function(e,t){var a,r=e.headers.map(function(e){return new l.Column(e.fieldCaption,i.DataType.String,e.isReferenced,e.index)});e.marks&&(a=e.marks.map(function(e){return new l.MarkInfo(e.type,e.color,e.tupleId)}));var n=e.dataTable.map(function(e){return e.map(function(e){return new l.DataValue(e.value,e.formattedValue)})});return a?new l.DataTable(n,r,n.length,t,a):new l.DataTable(n,r,n.length,t)},t}(o.ServiceImplBase);t.GetDataServiceImpl=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){this._filterFn=e,this._callbackFn=t}return e.prototype.onNotification=function(e){this._filterFn(e)&&this._callbackFn(e)},e}(),r=function(){function e(e){this.dispatcher=e,this._handlers={},this.dispatcher.registerNotificationHandler(this.onNotification.bind(this))}return Object.defineProperty(e.prototype,"serviceName",{get:function(){return"notification-service"},enumerable:!0,configurable:!0}),e.prototype.registerHandler=function(e,t,r){var i=this,n=this._handlers[e]||new Array,o=new a(t,r);return n.push(o),this._handlers[e]=n,function(){return i.removeRegistration(e,o)}},e.prototype.hasHandlersForNotificationType=function(e){return this._handlers.hasOwnProperty(e)},e.prototype.onNotification=function(e){this.hasHandlersForNotificationType(e.notificationId)&&this._handlers[e.notificationId].forEach(function(t){return t.onNotification(e.data)})},e.prototype.removeRegistration=function(e,t){this.hasHandlersForNotificationType(e)&&(this._handlers[e]=this._handlers[e].filter(function(e){return e!==t}))},e}();t.NotificationServiceImpl=r},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(45),l=a(63),s=a(65),d=a(16),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"parameters-service"},enumerable:!0,configurable:!0}),t.prototype.getParametersForSheetAsync=function(e,t){var a=(r={},r[n.ParameterId.SheetPath]=e,r);return this.execute(n.VerbId.GetParametersForSheet,a).then(function(e){var a=e.result;return a.map(function(e){var a=new l.ParameterImpl(e);return new s.Parameter(a,t)})});var r},t.prototype.changeParameterValueAsync=function(e,t){var a=(r={},r[n.ParameterId.ParameterFieldName]=e,r[n.ParameterId.ParameterValue]=t,r);return this.execute(n.VerbId.ChangeParameterValue,a).then(function(e){var t=e.result;return t});var r},t.prototype.findParameterByNameAsync=function(e,t){return this.findParameterAsync(t,e,void 0)},t.prototype.findParameterByGlobalFieldNameAsync=function(e,t){return this.findParameterAsync(t,void 0,e)},t.prototype.findParameterAsync=function(e,t,a){var r={};if(void 0!==t)r[n.ParameterId.ParameterCaption]=t;else{if(void 0===a)throw new d.TableauError(i.ErrorCodes.InvalidParameter,"name or fieldName must be provided to find parameter");r[n.ParameterId.ParameterFieldName]=a}return this.execute(n.VerbId.FindParameter,r).then(function(t){var a=function(e){return"fieldName"in e};if(a(t.result)){var r=t.result,i=new l.ParameterImpl(r);return new s.Parameter(i,e)}})},t}(o.ServiceImplBase);t.ParametersServiceImpl=c},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(15),i=a(19),n=a(18),o=a(64),l=a(59),s=a(31),d=a(22),c=a(28),u=a(29),p=function(){function e(e){this.setParameterInfo(e)}return Object.defineProperty(e.prototype,"name",{get:function(){return this._parameterInfo.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentValue",{get:function(){return new l.DataValue(this._parameterInfo.currentValue.value,this._parameterInfo.currentValue.formattedValue)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dataType",{get:function(){return n.InternalToExternalEnumMappings.dataType.convert(this._parameterInfo.dataType)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._globalFieldName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"allowableValues",{get:function(){return this._allowableValues},enumerable:!0,configurable:!0}),e.prototype.changeValueAsync=function(e){var t=this;c.ErrorHelpers.verifyParameter(e,"newValue");var a=u.Param.serializeParamterValue(e),r=s.ApiServiceRegistry.instance.getService("parameters-service");return r.changeParameterValueAsync(this._globalFieldName,a).then(function(e){return t.setParameterInfo(e),t.currentValue})},e.prototype.initializeEvents=function(e){var t=this;c.ErrorHelpers.verifyInternalValue(e,"sheet");var a,n=new Array;try{a=s.ApiServiceRegistry.instance.getService("notification-service")}catch(l){return n}var u=new d.SingleEventManagerImpl(r.TableauEventType.ParameterChanged);return a.registerHandler(i.NotificationId.ParameterChanged,function(e){var a=e;return a===t._globalFieldName},function(t){u.triggerEvent(function(){return new o.ParameterChangedEvent(t,e)})}),n.push(u),n},e.prototype.setParameterInfo=function(e){this._parameterInfo=e,this._globalFieldName=e.fieldName;var t,a,i,o,s,d=n.InternalToExternalEnumMappings.allowableValues.convert(e.allowableValuesType);if(d===r.ParameterValueType.List){var c=e.allowableValues||[];t=c.map(function(e){return new l.DataValue(e.value,e.formattedValue)})}else d===r.ParameterValueType.Range&&(a=e.minValue&&new l.DataValue(e.minValue.value,e.minValue.formattedValue),i=e.maxValue&&new l.DataValue(e.maxValue.value,e.maxValue.formattedValue),o=e.stepSize,s=e.dateStepPeriod&&n.InternalToExternalEnumMappings.dateStepPeriod.convert(e.dateStepPeriod));this._allowableValues={type:d,allowableValues:t,minValue:a,maxValue:i,stepSize:o,dateStepPeriod:s}},e}();t.ParameterImpl=p},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(31),o=a(16),l=a(42),s=function(e){function t(t,a){var r=e.call(this,i.TableauEventType.ParameterChanged,a)||this;return r._globalFieldName=t,r}return r(t,e),t.prototype.getParameterAsync=function(){var e=this,t=n.ApiServiceRegistry.instance.getService("parameters-service");return t.findParameterByGlobalFieldNameAsync(this._globalFieldName,this.sheet).then(function(t){if(void 0===t)throw new o.TableauError(i.ErrorCodes.MissingParameter,"Cannot find parameter: "+e._globalFieldName);return t})},t}(l.TableauSheetEvent);t.ParameterChangedEvent=s},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(14),n=function(e){function t(t,a){var r=e.call(this)||this;return r.parameterImpl=t,r.parameterImpl.initializeEvents(a).forEach(function(e){return r.addNewEventType(e)}),r}return r(t,e),Object.defineProperty(t.prototype,"name",{get:function(){return this.parameterImpl.name},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentValue",{get:function(){return this.parameterImpl.currentValue},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dataType",{get:function(){return this.parameterImpl.dataType},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"allowableValues",{get:function(){return this.parameterImpl.allowableValues},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"id",{get:function(){return this.parameterImpl.id},enumerable:!0,configurable:!0}),t.prototype.changeValueAsync=function(e){return this.parameterImpl.changeValueAsync(e)},t}(i.EventListenerManager);t.Parameter=n},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(15),n=a(19),o=a(67),l=a(45),s=a(16),d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"selection-service"},enumerable:!0,configurable:!0}),t.prototype.clearSelectedMarksAsync=function(e){var t=(a={},a[n.ParameterId.VisualId]=e,a);return this.execute(n.VerbId.ClearSelectedMarks,t).then(function(e){});var a},t.prototype.selectMarksByValueAsync=function(e,t,a){if(0===t.length)throw new s.TableauError(i.ErrorCodes.InvalidParameter,"Selection criteria missing for selecting marks by value");var r=this.validateSelectionUpdateType(a),o=this.validateSelectionCriteria(t[0]),l=this.parseSelectionMarks(t,o),d=(u={},u[n.ParameterId.VisualId]=e,u[n.ParameterId.SelectionUpdateType]=r,u);switch(o){case c.HierarchicalType:d[n.ParameterId.HierValSelectionModels]=l.hierModelArr;break;case c.RangeType:d[n.ParameterId.QuantRangeSelectionModels]=l.quantModelArr;break;case c.DimensionType:d[n.ParameterId.DimValSelectionModels]=l.dimModelArr}return this.execute(n.VerbId.SelectByValue,d).then(function(e){});var u},t.prototype.selectMarksByIdAsync=function(e,t,a){if(0===t.length)throw new s.TableauError(i.ErrorCodes.InvalidParameter,"Marks info missing for selecting marks by Id");var r=this.validateSelectionUpdateType(a),o=this.parseSelectionIds(t),l=(d={},d[n.ParameterId.VisualId]=e,d[n.ParameterId.SelectionUpdateType]=r,d[n.ParameterId.Selection]=o.selection,d);return this.execute(n.VerbId.SelectByValue,l).then(function(e){});var d},t.prototype.parseSelectionIds=function(e){for(var t=[],a=new o.SelectionModelsContainer,r=0;r<e.length;r++){var n=e[r].tupleId;if(void 0===n||null===n)throw new s.TableauError(i.ErrorCodes.InternalError,"tupleId parsing error");t.push(n.toString())}if(0!==t.length){var l=new o.TupleSelectionModel;l.selectionType="tuples",l.objectIds=t,a.selection=l}return a},t.prototype.parseSelectionMarks=function(e,t){for(var a=new o.SelectionModelsContainer,r=!1,n=0;n<e.length;n++){var l=e[n];if(l.fieldName&&void 0!==l.value&&null!==l.value){var d=new RegExp("([[A-Za-z0-9]+]).*","g"),u=l.value;if(d.test(l.fieldName)){if(t!==c.HierarchicalType){r=!0;break}var p=this.addToParamsList(l.fieldName,l.value);a.hierModelArr.push(p)}else if(void 0!==u.min&&void 0!==u.max){if(t!==c.RangeType){r=!0;break}var m=this.addToRangeParamsList(l.fieldName,u);a.quantModelArr.push(m)}else{if(t!==c.DimensionType){r=!0;break}var g=this.addToParamsList(l.fieldName,l.value);a.dimModelArr.push(g)}}}if(r)throw new s.TableauError(i.ErrorCodes.InternalError,"Selection Criteria parsing error");return a},t.prototype.validateSelectionCriteria=function(e){var t,a=e,r=new RegExp("([[A-Za-z0-9]+]).*","g"),n=a.value;if(!a.fieldName||void 0===a.value||null===a.value)throw new s.TableauError(i.ErrorCodes.InternalError,"Selection Criteria parsing error");return t=r.test(a.fieldName)?c.HierarchicalType:void 0!==n.min&&void 0!==n.max?c.RangeType:c.DimensionType},t.prototype.addToParamsList=function(e,t){var a=new o.ValueSelectionModel,r=[];if(t instanceof Array)for(var i=t,n=0;n<i.length;n++)r.push(i[n].toString());else r.push(t.toString());return a.qualifiedFieldCaption=e,a.selectValues=r,a},t.prototype.addToRangeParamsList=function(e,t){var a=new o.RangeSelectionModel;return a.qualifiedFieldCaption=e,void 0!==t.max&&null!==t.max&&(a.maxValue=t.max.toString()),void 0!==t.min&&null!==t.min&&(a.minValue=t.min.toString()),a.included=this.validateNullOptionType(t.nullOption),a},t.prototype.validateSelectionUpdateType=function(e){return e===i.SelectionUpdateType.Replace?n.SelectionUpdateType.Replace:e===i.SelectionUpdateType.Add?n.SelectionUpdateType.Add:e===i.SelectionUpdateType.Remove?n.SelectionUpdateType.Remove:n.SelectionUpdateType.Replace},t.prototype.validateNullOptionType=function(e){if(e){if(e===i.FilterNullOption.NullValues)return n.QuantitativeIncludedValues.IncludeNull;if(e===i.FilterNullOption.NonNullValues)return n.QuantitativeIncludedValues.IncludeNonNull;if(e===i.FilterNullOption.AllValues)return n.QuantitativeIncludedValues.IncludeAll}return n.QuantitativeIncludedValues.IncludeAll},t}(l.ServiceImplBase);t.SelectionServiceImpl=d;var c;!function(e){e[e.HierarchicalType=1]="HierarchicalType",e[e.RangeType=2]="RangeType",e[e.DimensionType=3]="DimensionType",e[e.TuplesType=4]="TuplesType"}(c||(c={}))},function(e,t){"use strict";var a=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e}();t.SelectionModel=r;var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.selectValues=[],t}return a(t,e),t}(r);t.ValueSelectionModel=i;var n=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(i);t.HierarchicalSelectionModel=n;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(r);t.RangeSelectionModel=o;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t}(i);t.DimensionSelectionModel=l;var s=function(){function e(){this.objectIds=[]}return e}();t.TupleSelectionModel=s;var d=function(){function e(){this.hierModelArr=[],this.dimModelArr=[],this.quantModelArr=[]}return e}();t.SelectionModelsContainer=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._dashboard=e;
}return Object.defineProperty(e.prototype,"dashboard",{get:function(){return this._dashboard},enumerable:!0,configurable:!0}),e}();t.DashboardContent=a},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(11),i=function(){function e(e){this._apiVersion=e.apiVersion,this._context=r.InternalToExternalEnumMappings.extensionContext.convert(e.extensionContext),this._language=e.extensionLanguage,this._locale=e.extensionLocale,this._mode=r.InternalToExternalEnumMappings.extensionMode.convert(e.extensionMode),this._operatingSystem=e.operatingSystem,this._tableauVersion=e.tableauVersion}return Object.defineProperty(e.prototype,"apiVersion",{get:function(){return this._apiVersion},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"context",{get:function(){return this._context},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"language",{get:function(){return this._language},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"locale",{get:function(){return this._locale},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mode",{get:function(){return this._mode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"operatingSystem",{get:function(){return this._operatingSystem},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tableauVersion",{get:function(){return this._tableauVersion},enumerable:!0,configurable:!0}),e}();t.Environment=i},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(11),n=function(e){function t(t){var a=e.call(this)||this;return a._settingsImpl=t,a._settingsImpl.initializeEvents().forEach(function(e){return a.addNewEventType(e)}),a}return r(t,e),t.prototype.erase=function(e){this._settingsImpl.erase(e)},t.prototype.get=function(e){return this._settingsImpl.get(e)},t.prototype.getAll=function(){return this._settingsImpl.getAll()},Object.defineProperty(t.prototype,"isModified",{get:function(){return this._settingsImpl.isModified},enumerable:!0,configurable:!0}),t.prototype.saveAsync=function(){return this._settingsImpl.saveAsync()},t.prototype.set=function(e,t){this._settingsImpl.set(e,t)},t}(i.EventListenerManager);t.Settings=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this._impl=e}return e.prototype.displayDialogAsync=function(e,t,a){return this._impl.displayDialogAsync(e,t,a)},e.prototype.closeDialog=function(e){this._impl.closeDialog(e)},e}();t.UI=a},function(e,t,a){"use strict";function r(e){i.ApiServiceRegistry.instance.registerService(new n.InitializationServiceImpl(e)),i.ApiServiceRegistry.instance.registerService(new o.SettingsServiceImpl(e)),i.ApiServiceRegistry.instance.registerService(new l.UIServiceImpl(e))}Object.defineProperty(t,"__esModule",{value:!0});var i=a(11),n=a(73),o=a(74),l=a(75);t.registerAllExtensionsServices=r},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(11),n=a(5),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"InitializationService"},enumerable:!0,configurable:!0}),t.prototype.initializeDashboardExtensionsAsync=function(e){var t=(a={},a[n.ParameterId.IsExtensionDialog]=e,a);return this.execute(n.VerbId.InitializeExtension,t).then(function(e){var t=e.result;return t});var a},t}(i.ServiceImplBase);t.InitializationServiceImpl=o},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(3),n=a(11),o=a(5),l=a(11),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"SettingsService"},enumerable:!0,configurable:!0}),t.prototype.saveSettingsAsync=function(e){var t=(a={},a[o.ParameterId.SettingsValues]=e,a);return this.execute(o.VerbId.SaveExtensionSettings,t).then(function(e){var t=e.result;if(!t||!t.settingsValues)throw new l.TableauError(i.ErrorCodes.InternalError,"Unexpected error savings settings.");return t.settingsValues});var a},t}(n.ServiceImplBase);t.SettingsServiceImpl=s},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(3),n=a(5),o=a(11),l=400,s=600,d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),Object.defineProperty(t.prototype,"serviceName",{get:function(){return"UIService"},enumerable:!0,configurable:!0}),t.prototype.displayDialogAsync=function(e,t,a){var r=(u={},u[n.ParameterId.ExtensionDialogUrl]=e,u[n.ParameterId.ExtensionDialogPayload]=t,u),d=a&&a.height?a.height:l,c=a&&a.width?a.width:s;if(d<=0||c<=0)throw new o.TableauError(i.ErrorCodes.InvalidParameter,"Size parameters for displayDialogAsync must be positive");return r[n.ParameterId.ExtensionDialogH]=d,r[n.ParameterId.ExtensionDialogW]=c,this.execute(n.VerbId.DisplayDialog,r).then(function(e){var t=e.result;switch(t){case n.ExtensionDialogResult.DialogAlreadyOpen:throw new o.TableauError(i.ErrorCodes.DialogAlreadyOpen,"There already exists an open dialog for this extension.");case n.ExtensionDialogResult.InvalidDomain:throw new o.TableauError(i.ErrorCodes.InvalidDomainDialog,"The url of an extension dialog must match the domain of the parent extension.");default:return}});var u},t.prototype.closeDialog=function(e){var t=e?(a={},a[n.ParameterId.ExtensionDialogPayload]=e,a):{};return this.execute(n.VerbId.CloseDialog,t).then(function(e){});var a},t}(o.ServiceImplBase);t.UIServiceImpl=d},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(3),n=a(5),o=a(11),l=function(e){function t(t){var a=e.call(this,i.TableauEventType.SettingsChanged)||this;return a._newSettings=t,a}return r(t,e),Object.defineProperty(t.prototype,"newSettings",{get:function(){return this._newSettings},enumerable:!0,configurable:!0}),t}(o.TableauEvent),s=function(){function e(e){this._saveInProgress=!1,this.initializeSettings(e)}return e.prototype.erase=function(e){o.ErrorHelpers.verifyParameter(e,"key"),this._currentSettings[e]&&(this.verifySettingsAreUnlocked(),delete this._currentSettings[e],this._isModified=!0)},e.prototype.get=function(e){return o.ErrorHelpers.verifyParameter(e,"key"),this._currentSettings[e]},e.prototype.getAll=function(){return Object.assign({},this._currentSettings)},Object.defineProperty(e.prototype,"isModified",{get:function(){return this._isModified},enumerable:!0,configurable:!0}),e.prototype.saveAsync=function(){var e=this;if(this.verifySettingsAreUnlocked(),!this._isModified)return Promise.resolve(this._currentSettings);this._saveInProgress=!0;var t=o.ApiServiceRegistry.instance.getService("SettingsService");return t.saveSettingsAsync(this._currentSettings).then(function(t){return e._saveInProgress=!1,e._isModified=!1,Object.assign(e._currentSettings,t),t})},e.prototype.set=function(e,t){o.ErrorHelpers.verifyStringParameter(e,"key"),o.ErrorHelpers.verifyParameter(t,"value"),this.verifySettingsAreUnlocked(),this._currentSettings[e]=t,this._isModified=!0},e.prototype.initializeEvents=function(){var e,t=this,a=new Array;try{e=o.ApiServiceRegistry.instance.getService("notification-service")}catch(r){return a}var s=new o.SingleEventManagerImpl(i.TableauEventType.SettingsChanged);return e.registerHandler(n.NotificationId.SettingsChanged,function(e){return!0},function(e){t._currentSettings=e.newSettings,s.triggerEvent(function(){return new l(e.newSettings)})}),a.push(s),a},e.prototype.initializeSettings=function(e){o.ErrorHelpers.verifyParameter(e,"settingsInfo"),o.ErrorHelpers.verifyParameter(e.settingsValues,"settingsInfo.SettingsValues"),this._currentSettings=e.settingsValues,this._isModified=!1},e.prototype.verifySettingsAreUnlocked=function(){if(this._saveInProgress)throw new o.TableauError(i.ErrorCodes.SettingSaveInProgress,e.ASYNC_SAVE_IN_PROGRESS)},e.ASYNC_SAVE_IN_PROGRESS="Async Save is in progress, updating settings is not allowed.",e}();t.SettingsImpl=s},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(3),i=a(5),n=a(11),o=function(){function e(){}return e.prototype.displayDialogAsync=function(e,t,a){var o=n.ApiServiceRegistry.instance.getService("UIService"),l=n.ApiServiceRegistry.instance.getService("notification-service");return new Promise(function(s,d){o.displayDialogAsync(e,t||"",a).then(function(){var e=l.registerHandler(i.NotificationId.ExtensionDialogUpdate,function(e){return!0},function(t){t.isCloseEvent?s(t.closePayload):d(new n.TableauError(r.ErrorCodes.DialogClosedByUser,"Extension dialog closed by user.")),e()})})["catch"](function(e){d(e)})})},e.prototype.closeDialog=function(e){var t=n.ApiServiceRegistry.instance.getService("UIService");t.closeDialog(e)},e}();t.UIImpl=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){this.extensionImpl=e,this.extensionImpl=e}return Object.defineProperty(e.prototype,"dashboardContent",{get:function(){return this.extensionImpl.dashboardContent},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"environment",{get:function(){return this.extensionImpl.environment},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"settings",{get:function(){return this.extensionImpl.settings},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ui",{get:function(){return this.extensionImpl.ui},enumerable:!0,configurable:!0}),e.prototype.initializeAsync=function(){return this.extensionImpl.initializeAsync(!1)},e.prototype.initializeDialogAsync=function(){return this.extensionImpl.initializeAsync(!0)},e}();t.Extensions=a},function(e,t,a){"use strict";function r(){if(!s.hasQt())return Promise.reject("Not running in desktop with qt available");var e=s.initializeWebChannelPresLayer().then(function(e){var t=new o.AddInApiPresLayerImpl(e);if(!t.AddInInstanceInfo.addInLocatorPresModel||!t.AddInInstanceInfo.addInRegistrationPresModel)throw new i.InternalTableauError(n.ErrorCodes.INITIALIZATION_ERROR,"Unexpected failure to initialize.");var a=new i.ApiEventHandler(t,t.AddInInstanceInfo,(!0)),r=new l.DesktopApiDispatcher(a);return r});return n.InternalApiDispatcherHolder.setDesktopDispatcherPromise(e),e}Object.defineProperty(t,"__esModule",{value:!0});var i=a(80),n=a(104),o=a(105),l=a(106),s=a(107);t.doBootstrap=r},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(81)),r(a(84));var i=a(91);t.NotificationId=i.NotificationId},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(83),n=a(84),o=a(85),l=a(86),s=a(90),d=a(95),c=a(102),u=function(){function e(e,t,a){this._presLayer=e,this._presLayerExtensionInstance=t,this._runningInDesktop=a,this._presLayerAddInLocator=this._presLayerExtensionInstance.addInLocatorPresModel}return e.prototype.setVersionNumber=function(e){this._versionNumber=e,this._commandRegistry=l.CommandMappingRegistryFactory.createCommandMappingRegistry(e,this._runningInDesktop),this._apiToPresLayerRegistry=d.ParameterMappingRegistryFactory.createApiToPresLayerParamRegistry(e),this._presLayerToApiRegistry=d.ParameterMappingRegistryFactory.createPresLayerToApiParamRegistry(e),this._eventRegistry=s.EventMappingRegistryFactory.createEventMappingRegistry(e);var t=this._presLayerExtensionInstance.addInRegistrationPresModel.addInName,a=this._presLayerExtensionInstance.addInRegistrationPresModel.addInId,i=this._presLayerExtensionInstance.addInRegistrationPresModel.extensionPermissions;this._permissionValidator=new c.PermissionValidator(e,t,a,i),this._apiExtensionLocator=this._presLayerToApiRegistry.get(o.ParameterId.AddInLocator,r.ParameterId.ExtensionLocator)(this._presLayerAddInLocator);for(var n=0,u=Object.keys(this._eventRegistry);n<u.length;n++){var p=u[n];this._presLayer.registerNotificationHandler(p,this.onPresLayerNotification.bind(this,p))}},e.prototype.setEventHandler=function(e){this._eventHandler=e},e.prototype.execute=function(e,t){var a=this;this.assertInitialized();var n=this._commandRegistry.getCommand(e);if(!this._permissionValidator.validate(n.commandId))return Promise.reject(i.ErrorHelpers.permissionDeniedError(n.commandId));t=t||{},n.needsAddInLocator&&(t[r.ParameterId.ExtensionLocator]=this._apiExtensionLocator);var o=n.createParams(t,this._apiToPresLayerRegistry);return this._presLayer.invokeCommand(n.namespace,n.commandId,o).then(function(e){var t=n.ProcessResult(e,a._presLayerToApiRegistry);return{result:t}})},Object.defineProperty(e.prototype,"ApiExtensionLocator",{get:function(){return this._apiExtensionLocator},enumerable:!0,configurable:!0}),e.prototype.assertInitialized=function(){if(!this._versionNumber)throw new n.InternalTableauError(r.ErrorCodes.VERSION_NOT_CONFIGURED,"Cannot run commands, API is not initialized.")},e.prototype.onPresLayerNotification=function(e,t){var a=this._eventRegistry[e],r=a.converter(t);this._eventHandler&&(r.filterByLocator?this._locatorsRepresentSameExtensionInstance(r.locator,this._apiExtensionLocator)&&this._eventHandler(a.apiId,r):this._eventHandler(a.apiId,r))},e.prototype._locatorsRepresentSameExtensionInstance=function(e,t){return!(!e.dashboardPath||!t.dashboardPath)&&(e.instanceId===t.instanceId&&e.dashboardPath.isDashboard===t.dashboardPath.isDashboard)},e}();t.ApiEventHandler=u},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(6)),r(a(7)),r(a(8)),r(a(9)),r(a(10))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(84),n=function(){function e(){}return e.presModelParsingError=function(e){return new i.InternalTableauError(r.ErrorCodes.PRES_MODEL_PARSING_ERROR,"Unexpected format of pres model: "+e)},e.permissionDeniedError=function(e){return new i.InternalTableauError(r.ErrorCodes.PERMISSION_DENIED,"Missing required permission to run "+e)},e.invalidValueForArgumentError=function(e,t){return new i.InternalTableauError(r.ErrorCodes.INTERNAL_ERROR,e+" is not a valid value for: "+t)},e.verifyValue=function(t,a){if(null===t||void 0===t)throw e.invalidValueForArgumentError(t,a)},e}();t.ErrorHelpers=n},function(e,t){"use strict";var a=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){function t(a,r){var i=e.call(this,a+": "+r)||this;return i._errorCode=a,Object.setPrototypeOf(i,t.prototype),i}return a(t,e),Object.defineProperty(t.prototype,"errorCode",{get:function(){return this._errorCode},enumerable:!0,configurable:!0}),t}(Error);t.InternalTableauError=r},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.IntegerRLE="intRle",e.UnsignedIntegerRLE="uintRle",e.FloatRLE="floatRle",e.ParameterID="paramType",e.AllowCustomDatabase="allowCustomDatabase",e.AllowCustomSchema="allowCustomSchema",e.AllowCustomSQL="allowCustomSql",e.AllowCustomSQLWithoutSchema="allowCustomSqlWithoutSchema",e.AllowPreviewData="allowPreviewData",e.AllowStoredProc="allowStoredProcedure",e.AllowUnion="allowUnion",e.AreVariablesVisible="areVariablesVisible",e.AttrLegacyConnection="widgetAttrLegacy",e.AttrReadUncommitted="widgetAttrReadUncommittedData",e.AttrRequireSSL="widgetAttrRequireSsl",e.AttrRequireEncryption="widgetAttrRequireEncryption",e.Bool="bool",e.CanPartition="canPartition",e.CanRecommendDataSources="canRecommendDatasources",e.CanRecommendTables="canRecommendTables",e.CheckPermissions="checkPermissions",e.DatabaseNameOptional="databaseNameOptional",e.DatabaseWHOptional="databaseWarehouseOptional",e.DoValidation="doValidation",e.DoneLoadingAllSheets="googleSheetDoneLoading",e.GABasicItemsEnabled="gaBasicItemsEnabled",e.GADimensionMeasuresEnabled="gaDimensionsMeasuresEnabled",e.GAFiltersEnabled="gaFiltersEnabled",e.HasDatabase="hasDatabase",e.HasDataLoss="hasDataLoss",e.HasFastMetadata="hasFastMetadata",e.HasNewlyDiscoveredSchema="hasNewlyDiscoveredSchema",e.HasPermissions="hasPermissions",e.HasSchema="hasSchema",e.HasSchemaCount="hasSchemaCount",e.HasTables="hasTables",e.HasUncommittedChanges="hasUncommittedChanges",e.HasWarehouse="hasWarehouse",e.HasWarning="hasWarning",e.IsCalculated="isCalculated",e.IsConnectedToDataSource="isConnectedDatasource",e.IsDisabledDataConnection="isDisabledDataConnection",e.IsEditable="isEditable",e.IsEnabled="isEnabled",e.IsFinishedConnecting="isFinishedConnecting",e.IsHidden="isHidden",e.IsMultiTable="isMultiTable",e.IsNewCustomSQL="isNewCustomSql",e.IsNewDataSource="isNewDataSrc",e.IsPublishedFederated="isPublishedFederated",e.IsSampled="isSampled",e.IsSchemaMemberNewlyDiscovered="isSchemaMemberNewlyDiscovered",e.IsSlowFast="isSlowfast",e.IsSupported="isSupported",e.IsTableSelectionVisible="isTableSelectionVisible",e.IsTableauServerDatasource="isTableauServerDatasource",e.IsTableauServerDatasourceConnectable="isTableauServerDatasourceConnectable",e.IsTableauServerDatasourceDownloadable="isTableauServerDatasourceDownloadable",e.IsVisible="isVisible",e.NeedFlatten="needFlatten",e.SSLRequiresCertificate="sslRequiresCertificate",e.SchemaOptional="schemaOptional",e.ServiceNameOptional="serviceNameOptional",e.ShouldWarnForCrossSchemaJoins="shouldWarnCrossSchemaJoins",e.ShowBrowseButton="showBrowseButton",e.ShowConnectionPrompt="showConnectionPrompt",e.ShowDBBrowseButton="showDbBrowseButton",e.ShowDBNamePrompt="showDbPrompt",e.ShowDBWHNamePrompt="showDbwhPrompt",e.ShowImportSSLCertLabel="showImportSslcertLabel",e.ShowPortPrompt="showPortPrompt",e.ShowSSLCheckbox="showSslCheckbox",e.ShowEncryptionCheckbox="showEncryptionCheckbox",e.ShowServerNamePrompt="showServerPrompt",e.ShowServiceNamePrompt="showServicePrompt",e.ShowUncommittedDataCheckbox="showUncommittedDataCheckbox",e.SupportsGenericAuth="supportsGenericAuth",e.TableauServerFetchAscending="tableauServerFetchAscending",e.UsesRadioButton="usesRadioButton",e.BigQueryLegacySQLCheckStatus="datasourceBigqueryLegacySqlCheckStatus",e.HasBigQueryLegacySQLCheck="datasourceBigqueryLegacySqlCheck",e.AutoFetchLimit="autoFetchLimit",e.ConnectionType="connectionType",e.IconId="iconId",e.SelectedCatalogIndex="selectedCatalogIndex",e.SelectedCubeIndex="selectedCubeIndex",e.SelectedGAAccountIndex="selectedGaAccountIndex",e.SelectedGAMeasureSetIndex="selectedGaMeasureSetIndex",e.SelectedGAPropertyIndex="selectedGaPropertyIndex",e.SelectedGASegmentIndex="selectedGaSegmentIndex",e.SelectedGAViewIndex="selectedGaViewIndex",e.SelectedGoogleSheetIndex="selectedGoogleSheetIndex",e.SelectedOptionIndex="selectedOptionIndex",e.SlowMetadataCount="slowMetadataCount",e.TableauServerFetchSortBy="tableauServerFetchSort",e.ActualParameterOrdinal="actualParameterOrdinal",e.ActualParameterType="actualParameterType",e.CharSetID="charsetId",e.DataSourceOrdinal="datasourceOrdinal",e.FilterCount="filterCount",e.VariablesCount="variablesCount",e.ActualParameterDisplayName="actualParameterDisplayName",e.ActualParameterName="actualParameterName",e.ActualParameterValue="actualParameterValue",e.AttrAPIVersion="attrApiVersion",e.AttrAuthType="widgetAttrAuthtype",e.AttrConnectionData="attrConnectionData",e.AttrConnectionName="attrConnectionName",e.AttrConnectionType="widgetAttrConnectiontype",e.AttrConnectionURL="attrConnectionUrl",e.AttrCubeSpecificationId="widgetAttrCubeSpecificationId",e.AttrCubeSpecificationValue="widgetAttrCubeSpecificationValue",e.AttrDSN="widgetAttrDsn",e.AttrDatabase="widgetAttrDb",e.AttrDatabaseWarehouse="widgetAttrDbwh",e.AttrDriver="widgetAttrDriver",e.AttrFilename="widgetAttrFilename",e.AttrHTTPPath="widgetAttrHttpPath",e.AttrIncrementalRefreshKey="attrIncrementalRefreshKey",e.AttrKerberosHost="widgetAttrKerberosHost",e.AttrKerberosRealm="widgetAttrKerberosRealm",e.AttrKerberosService="widgetAttrKerberosService",e.AttrLastRecordToken="attrLastRecordToken",e.AttrMDWPath="widgetAttrMdwPath",e.AttrMDWUsername="widgetAttrMdwUsername",e.AttrODBCPrompt="widgetAttrOdbcPrompt",e.AttrODBCStringExtras="widgetAttrOdbcStringExtras",e.AttrPort="widgetAttrPort",e.AttrSAPClient="widgetAttrSapClient",e.AttrSAPLanguage="widgetAttrSapLanguage",e.AttrEdition="widgetAttrSslEdition",e.AttrSAMLIdP="widgetAttrSamlIdp",e.AttrSSODomain="widgetAttrSsoDomain",e.AttrSSLCert="widgetAttrSslCert",e.AttrScriptVersion="attrScriptVersion",e.AttrServer="widgetAttrServer",e.AttrService="widgetAttrService",e.AttrUsername="widgetAttrUser",e.AuthenticationPrompt="authenticationPrompt",e.ButtonClickAction="buttonClickAction",e.ButtonCaption="buttonCaption",e.ButtonImageFile="buttonImageFile",e.ButtonImagePath="buttonImagePath",e.ButtonImagePathKey="buttonImagePathKey",e.ButtonNavigationTarget="buttonNavigationTarget",e.Caption="caption",e.CatalogListPrompt="catalogListPrompt",e.CatalogName="catalogName",e.CatalogSearchTerm="catalogSearchTerm",e.Category="itemCategory",e.ClassName="classNameForCleaning",e.CloudFileClassName="cloudFileClassName",e.CloudFileStorageProvider="cloudFileStorageProvider",e.ConfigName="connectionConfigName",e.ConnectionCaption="connectionCaption",e.ConnectionDescriptionLabel="connectionDescriptionLabel",e.ConnectionClass="connectionClassName",e.ConnectionName="connectionName",e.ConnectionOptionName="connectionOptionName",e.ConnectionSpecificationTitle="connectionSpecificationTitle",e.ConnectionTypeLabel="connectionTypeLabel",e.ConnectionURI="connectionUri",e.CubeDescription="cubeDescription",e.CubeLastUpdated="cubeLastUpdated",e.CubeListPrompt="cubeListPrompt",e.CubeName="cubeName",e.CubeSearchTerm="cubeSearchTerm",e.CurrentText="currentText",e.CustomSplitStringSeparator="customSplitStringSeparator",e.DatasourceId="datasourceId",e.DBNamePrompt="dbNamePrompt",e.DBWHNamePrompt="dbWarehouseNamePrompt",e.DSClass="dsClass",e.DatabaseName="datasourceDatabaseName",e.DatabaseNote="databaseNote",e.DragLabel="dragLabel",e.EffectiveDateRange="effectiveDateRange",e.GoogleSheetCreatedTime="googleSheetCreatedTime",e.GoogleSheetId="googleSheetId",e.GoogleSheetLastModifiedTime="googleSheetLastModifiedTime",e.GoogleSheetLastModifyingUser="googleSheetLastModifyingUser",e.GoogleSheetLastViewedByUserTime="googleSheetLastViewedByUserTime",e.GoogleSheetMimeType="googleSheetMimeType",e.GoogleSheetName="googleSheetName",e.GoogleSheetOwner="googleSheetOwner",e.GoogleSheetThumbnailLink="googleSheetThumbnailLink",e.GoogleSheetThumbnailId="googleSheetThumbnailId",e.GoogleSheetThumbnailLocalPath="googleSheetThumbnailLocalPath",e.GoogleSheetWebViewLink="googleSheetWebViewLink",e.GoogleSheetsListErrorMessage="googleSheetsListErrorMessage",e.InitialSQL="initialSql",e.ISODate="isoDate",e.ISOEndDate="isoEndDate",e.ISOStartDate="isoStartDate",e.IsolationLevel="datasourceIsolationLevel",e.ItemDescription="itemDescription",e.ItemId="itemId",e.KerberosHost="datasourceKerberosHost",e.KerberosRealm="datasourceKerberosRealm",e.KerberosService="datasourceKerberosService",e.Name="name",e.OptionId="optionId",e.PartitioningButtonLabel="partitioningButtonLabel",e.PartitioningButtonTooltip="partitioningButtonTooltip",e.PartitioningText="queryPartitioningText",e.PdfStartPage="pdfStartPage",e.PdfEndPage="pdfEndPage",e.PortPrompt="portPrompt",e.PromptText="promptText",e.QueryBanding="queryBanding",e.QueryText="queryText",e.RecommendationUUID="recommendationUuid",e.SQLQuery="sqlQuery",e.SchemaComboFallbackText="schemaComboFallbackText",e.SchemaLabel="schemaLabel",e.SchemaMemberGlobalName="schemaMemberGlobalName",e.SchemaName="datasourceSchemaName",e.ScriptText="scriptText",e.SecondaryWhiteList="secondaryWhiteList",e.Server="datasourceServer",e.ServerNamePrompt="serverNamePrompt",e.Service="datasourceService",e.ServiceNamePrompt="servicePrompt",e.SheetFormatting="sheetFormatting",e.SlowMetadataSearchTerm="slowMetadataSearchTerm",e.StandardConnectionName="datasourceStandardConnectionName",e.StandardConnectionPlaceholderText="standardConnectionPlaceholderText",e.StoredProcedureParameterTitle="storedProcedureParameterTitle",e.TableAlias="tableAlias",e.RightTableAlias="rightTableAlias",e.TableCaption="tableCaption",e.TableCollectionName="tableCollectionName",e.TablePlaceholderText="tablePlaceholderText",e.TableRanking="tableRanking",e.TableSortKey="tableSortkey",e.TableTooltip="tableTooltip",e.TableToReplace="tableToReplace",e.TableWarningMessage="tableWarningMessage",e.TableauServerDatasourceDescription="tableauServerDatasourceDescription",e.TableauServerDatasourceLastExtract="tableauServerDatasourceLastExtract",e.TableauServerDatasourceModified="tableauServerDatasourceModified",e.TableauServerDatasourceOwner="tableauServerDatasourceOwner",e.TableauServerDatasourcePath="tableauServerDatasourcePath",e.TableauServerFetchSearchQuery="tableauServerFetchSearchQuery",e.TableauServerName="tableauServerName",e.TableauServerProjectName="tableauServerProjectName",e.TableauServerUsername="tableauServerUsername",e.TransportType="transportType",e.WarehouseName="datasourceWarehouseName",e.WorkgroupWorkbookName="workgroupWorkbookName",e.AnalyticsItemTooltip="analyticsItemTooltip",e.Description="description",e.DSClassCaption="dsClassCaption",e.Formula="formula",e.MessageText="messageText",e.Datasource="datasource",e.DatasourceSource="datasourceSource",e.DatasourceTarget="datasourceTarget",e.FirstDatasource="firstDatasource",e.NewDatasource="newDatasource",e.ParametersDatasource="parametersDatasource",e.PrimaryDatasource="primaryDatasource",e.ButtonNavigationTargets="buttonNavigationTargets",e.ConnectionDatabases="connectionDatabases",e.ConnectionSchemas="connectionSchemas",e.ConnectionWarehouses="connectionWarehouses",e.DSClasses="dsClasses",e.PossibleChoices="possibleChoices",e.StandardConnections="standardConnections",e.Strings="strings",e.TableauServerProjectNames="tableauServerProjectNames",e.TableCaptions="tableCaptions",e.DataValues="dataValues",e.QueryBandErrors="queryBandErrors",e.QueryBandParameters="queryBandParameters",e.InitialSQLParameters="initialSqlParameters",e.ConnectionAttributes="connectionAttrs",e.ConnectionProps="connectionProps",e.DisplayNameMap="displayNameMap",e.LookupTable="lookupTable",e.OAuthAttrs="oauthAttrs",e.StringMap="stringMap",e.TableRankingMap="tableRankingMap",e.WDCAttributes="wdcAttrs",e.ConnectorAttributes="connectorAttrs",e.TableRelevanceParams="tableRelevanceParams",e.ActualParameterParameter="actualParameterParameter",e.DataColumnName="dataColumnName",e.LHSDataColumnName="lhsDataColumnName",e.RHSDataColumnName="rhsDataColumnName",e.FullCubeName="fullCubeName",e.FullVariableName="fullVariableName",e.SemanticRole="semanticRole",e.StoredProcedureName="storedProcName",e.TableName="tableName",e.AddedTableNames="addedTableNames",e.CoalesceGroupFields="coalesceGroupFields",e.QualifiedNames="qualifiedNames",e.JoinFieldAliases="joinField_aliases",e.JoinInfoFields="joinInfoFields",e.PivotGroupFields="pivotGroupFields",e.RemovedTableNames="removedTableNames",e.StoredProcedures="storedProcedures",e.TableNames="tableNames",e.ColumnName="columnName",e.FieldName="fn",e.FieldNames="fieldNames",e.GoogleSheetThumbnailImage="googleSheetThumbnailImage",e.AttrMDWPassword="widgetAttrMdwPassword",e.AttrPassword="widgetAttrPassword",e.DatasourcePassword="datasourcePassword",e.FederatedKeychain="federatedKeychain",e.DataParameterID="dataParamType",e.ConnectServerWidgetType="connectServerWidgetType",e.AuthenticationMode="authMode",e.ReconnectAuthMode="reconnectAuthMode",e.CurrentAuthOption="currAuthOption",e.AuthOptionList="authOptions",e.ConnectionSpecificationType="connectionSpecificationType",e.DataType="dataType",e.LHSDataType="lhsDataType",e.RHSDataType="rhsDataType",e.DefaultFieldRole="defaultFieldRole",e.FieldRole="fieldRole",e.DefaultFieldType="defaultFieldType",e.FieldType="fieldType",e.FieldTypeList="fieldTypeList",e.FieldTypeListDetail="fieldTypeListDetail",e.AggType="aggregation",e.DefaultAggType="defaultAggregation",e.ForecastAgg="forecastSummarizeTo",e.ForecastAutoAgg="forecastAutoSummarizeTo",e.ForecastAutoRangeUnits="forecastAutoRangeUnits",e.ForecastEndOfRangeUnits="forecastEndOfRangeUnits",e.ForecastNextRangeUnits="forecastNextRangeUnits",e.SourceAgg="sourceAggregation",e.TargetAgg="targetAggregation",e.AggregateByAggTypes="aggregateByAggTypes",e.AggregationValues="aggregationValues",e.SortAggValues="sortAggValues",e.ColumnClass="columnClass",e.DatePeriodType="datePeriodType",e.ConnectionWidgetType="connectionWidgetType",e.TablePillIcon="tablePillIconType",e.EnumeratedEntityType="enumeratedEntityType",e.PickEntitySearchType="entitySearchType",e.ExpressionOp="expressionOp",e.ExpressionOperatorCaption="expressionOperatorCaption",e.RelationalExperessionOps="relationalExpressionOps",e.HierarchyExpressionOps="hierarchyExpressionOps",e.DefaultSortDirection="defSortOrder",e.SortDirection="sortOrder",e.SortDirectionValues="sortDirectionValues",e.CubeMetadataCategory="cubeMetadataCategory",e.CubeMetadataCategories="cubeMetadataCategories",e.GoogleBasicInfoType="googleBasicInfoType",e.GoogleAnalyticsDateRangeOptionType="googleAnalyticsDateRangeOptionType",e.TableCalcType="tableCalcType",e.TableCalcTypeValues="tableCalcTypeValues",e.RelativeAddress="relativeAddress",e.RelativeValues="relativeValues",e.OrderingType="orderingType",e.OrderingTypeValues="orderingTypeValues",e.CategoricalBinItemType="categoricalBinItemType",e.AuthenticationInfos="authInfo",e.ConnectionWidgetParams="widgetConnectionParams",e.ConnectionSettings="connectionSettings",e.ReconnectAuthenticationSettings="reconnectAuthSettings",e.CubeConnectionSpecificationOption="cubeConnectionSpecificationOption",e.CubeConnectionSpecificationOptions="cubeConnectionSpecificationOptions",e.CubeConnectionSpecification="cubeConnectionSpecification",e.ConnectionSettingsOption="connectionSettingsOption",e.ConnectionSettingsOptions="connectionSettingsOptions",e.StringCollation="stringCollation",e.DatabaseEnumeration="databaseEnumeration",e.SchemaEnumeration="schemaEnumeration",e.StandardConnectionEnumeration="standardConnectionEnumeration",e.StoredProcedureEnumeration="storedProcedureEnumeration",e.TableEnumeration="tableEnumeration",e.WarehouseEnumeration="warehouseEnumeration",
e.SlowMetadataSchemaList="slowMetadataSchemaList",e.SlowMetadataTableList="slowMetadataTableList",e.CubeCatalog="cubeCatalog",e.CubeCatalogs="cubeCatalogs",e.CubeCatalogEnumeration="cubeCatalogEnumeration",e.Cube="cube",e.Cubes="cubes",e.CubeEnumeration="cubeEnumeration",e.GoogleAnalyticsBasicItem="googleAnalyticsBasicItem",e.GAMeasureSets="gaMeasureSets",e.GoogleAnalyticsViews="googleAnalyticsViews",e.GoogleAnalyticsProperties="googleAnalyticsProperties",e.GoogleBasicInfoItems="googleAnalyticsAccounts",e.GoogleAnalyticsComplexItem="googleAnalyticsComplexItem",e.GoogleAnalyticsPossibleDimensions="googleAnalyticsPossibleDimensions",e.GoogleAnalyticsPossibleMeasures="googleAnalyticsPossibleMeasures",e.GoogleAnalyticsPossibleSegments="googleAnalyticsPossibleSegments",e.GoogleAnalyticsSelectedDimensions="googleAnalyticsSelectedDimensions",e.GoogleAnalyticsSelectedMeasures="googleAnalyticsSelectedMeasures",e.GoogleAnalyticsDateRangeOption="googleAnalyticsDateRangeOption",e.GoogleAnalyticsDateRangeOptions="googleAnalyticsDateRangeOptions",e.GoogleAnalyticsEndDate="googleAnalyticsEndDate",e.GoogleAnalyticsStartDate="googleAnalyticsStartDate",e.GoogleAnalyticsDateRange="googleAnalyticsDateRange",e.GoogleAnalyticsQueryPartitioning="googleAnalyticsQueryPartitioning",e.GAConnectionDescription="gaConnectionDescription",e.GoogleSheetItem="googleSheetItem",e.GoogleSheetItems="googleSheetItems",e.GoogleSheetsListPresModel="googleSheetsList",e.GoogleSheetPanePresModel="googleSheetPane",e.TableauServerConnectionDescription="tableauServerConnectionDescription",e.InitialSQLPresModel="initialSqlPresModel",e.QueryBandingPresModel="queryBandingPresModel",e.SlowMetadata="slowMetadata",e.SlowMetadataSchemaSearchPresModel="slowMetadataSchemaSearch",e.SlowMetadataTableSearchPresModel="slowMetadataTableSearch",e.TableauServerProjectsPresModel="tableauServerProjectsPresmodel",e.TableauServerDataSourcePresModel="tableauServerDataSourcePresmodel",e.TableauServerDataSourcePresModels="tableauServerDataSourcePresmodels",e.TableauServerDataSourcesPresModel="tableauServerDataSourcesPresmodel",e.TableauServerDataPresModel="tableauServerDataPresmodel",e.StoredProcedureParameterPresModel="storedProcedureParameter",e.StoredProcedureParametersPresModel="storedProcedureParameters",e.CustomSQLInfo="customSqlInfo",e.ConnectionTableInfo="connectionTableInfo",e.TableInfos="tableInfos",e.ConnectionDescription="connectionDescription",e.ConnectionDescriptionSummary="connectionDescriptionSummary",e.ConnectionDescriptionSummaries="connectionDescriptionSummaries",e.DataSourceParserValidationMode="dataSourceParserValidationMode",e.OAuthCredentialTypeInfo="oauthCredentialTypeInfo",e.OAuthCredentialTypeInfos="oauthCredentialTypeInfos",e.OAuthSettings="oauthSettings",e.CredentialTypePropertiesFlag="credentialTypePropertiesFlag",e.CredentialTypePropertiesFlags="credentialTypePropertiesFlags",e.ConnectionTypeEnum="connectionTypeEnum",e.ConnectorType="connectorType",e.PdfPagePicker="pdfPagePicker",e.ActivateNew="activateNew",e.AddActions="addActions",e.AddAsFloating="addAsFloating",e.AddColorDictionary="addColorDictionary",e.AddDroplines="addDroplines",e.AddHeaders="addHeaders",e.AddHighlighting="addHighlighting",e.AddImageDictionary="addImageDictionary",e.AddMarkLabels="addMarkLabels",e.AddPages="addPages",e.AddSelection="addSelection",e.AddToFolder="addToFolder",e.AddVizData="addVizData",e.AlertConditionMet="alertConditionMet",e.AllFields="allFields",e.AllOnEmpty="allOnEmpty",e.AllPages="includeAllPages",e.AllowPreviewSizeChange="allowPreviewSizeChange",e.AllSelectedIsEffectivelyRangeTypeAll="allSelectedIsEffectivelyRangeTypeAll",e.AllStoryPoints="allStorypoints",e.AllowAllRange="allowAllRange",e.AllowCreatingNewParameters="allowCreatingNewParameters",e.AllowContinuousDate="allowContinuousDate",e.AllowDuplicateFieldDropOnFilterShelf="allowDuplicateFieldDropOnFilterShelf",e.AllowFilterPreset="allowFilterPreset",e.AllowHoverActions="allowHoverActions",e.AllowHyphenation="allowHyphenation",e.AllowJoinOnCalc="allowJoinOnCalc",e.AllowManualRange="allowManualRange",e.AllowMapping="allowMapping",e.AllowMultiSelect="allowMultiSelect",e.AllowNull="allowNull",e.AllowPanZoom="allowPanZoom",e.AllowPatternBased="allowPatternBasedUnion",e.AllowPromptText="allowPromptText",e.AllowSaveDataSource="allowSaveDataSource",e.AllowWholeDate="allowWholeDate",e.AllowWork="allowWork",e.AllowWrap="allowWrap",e.AppIs32Bit="appIs32Bit",e.AppIs64Bit="appIs64Bit",e.AppIsBeta="appIsBeta",e.AppIsOEM="appIsOem",e.AppendTde="appendTde",e.ApplyColors="applyColors",e.ApplyNewSelection="applyNewSelection",e.AreConfidenceBandsValid="areConfidenceBandsValid",e.AreDataSourceFiltersVisible="areDataSourceFiltersVisible",e.AreExtractFiltersEnabled="areExtractFiltersEnabled",e.AreNullsIncluded="areNullsIncluded",e.AreTotalsUsed="areTotalsUsed",e.AtTheLevelFieldIsInvalid="atTheLevelFieldIsInvalid",e.AutoURL="autoUrl",e.AutoUpdate="autoUpdate",e.BackingSheetIsDashboard="isBackingSheetDashboard",e.BeginDataSourcePresModelUpdate="beginDataSourcePresModelUpdate",e.AggregateDrillUp="boolAggregateDrillUp",e.BoxplotMarkExclusion="boxplotMarkExclusion",e.BreakPageOnPane="breakPageOnPane",e.BrushLegends="brushLegends",e.CachePresModels="cachePresModels",e.CanAddConnections="canAddConnections",e.SortPillCanBeDragged="sortPillCanBeDragged",e.CanAddTable="canAddTable",e.CanAddToDrillPath="canAddToDrillPath",e.CanAnalyzeData="canAnalyzeData",e.CanBeAddedToSchemaViewer="canBeAddedToSchemaViewer",e.CanBeRenamed="canBeRenamed",e.CanChangeDataType="canChangeDataType",e.CanChangeSemanticRole="canChangeSemanticRole",e.CanDerive="canDerive",e.CanDrop="canDrop",e.CanEdit="canEdit",e.CanEditLegendColor="canEditLegendColor",e.CanEnableCenter="canEnableCenter",e.CanShowAdvancedSettings="canShowAdvancedSettings",e.CanEnableFilterStateButton="canEnableFilterStateButton",e.CanFloat="canFloat",e.CanHaveTitle="canHaveTitle",e.CanIgnoreUpdate="canIgnoreUpdate",e.CanLogTransformExplanatoryAxis="canLogTransformExplanatoryAxis",e.CanNavigateBack="canNavigateBack",e.CanNavigateForward="canNavigateForward",e.CanScrollX="canScrollX",e.CanScrollY="canScrollY",e.CanSetDomain="canSetDomain",e.CanSetMapUnit="canSetMapUnit",e.CanShowApplyButton="canShowApplyButton",e.CanShowFilterStateButton="canShowFilterStateButton",e.CanShowMoreFewerButton="canShowMoreFewerButton",e.CanShowSyncClientOptions="canShowSyncClientOptions",e.CanSort="canSort",e.CanSortOrdinally="canSortOrdinal",e.CanToggleAutomaticDrill="canToggleAutomaticDrill",e.CanToggleGeographicSearch="canToggleGeographicSearch",e.CanToggleMapScale="canToggleMapScale",e.CanUseFullColorRange="canUseFullColorRange",e.CanUseMultipleHierarchies="canUseMultipleHierarchies",e.CenterHorizontally="centerHorizontally",e.CenterVertically="centerVertically",e.ChangeAllFields="changeAllFields",e.Changed="changed",e.ClearBrushing="clearBrushing",e.ClearSort="clearSort",e.ClearView="clearView",e.Collapsed="collapsed",e.ConsolidateInCommit="consolidateInCommit",e.ClusterEnableScaledCheckbox="clusterEnableScaledCheckbox",e.CommitEdits="commitEdits",e.CommitPillFinished="commitPillFinished",e.CompressArrays="compressArrays",e.ComputeCompoundedRate="computeCompoundedRate",e.ConfidenceIntervalAllowed="confidenceIntervalAllowed",e.ConfigIsDesktopStandard="configIsDesktopStandard",e.ConfigIsInteractor="configIsInteractor",e.ConfigIsPublic="configIsPublic",e.ConfigIsReader="configIsReader",e.ContainsQuant="containsQuant",e.ContainsValidDatasources="containsValidDatasources",e.ControllerMissing="controllerMissing",e.CreateExtractForPublish="createExtractForPublish",e.CreateGroupFromFilter="createGroupFromFilter",e.CrossTab="crossTab",e.CullLabels="cullLabels",e.CurrentCustViewIdFlag="isCurrentCustViewIdValid",e.DashboardEnableSnap="dashboardEnableSnap",e.DashboardShowGrid="dashboardShowGrid",e.DataGridSortOrder="datagridSortOrder",e.DeleteExtract="deleteExtract",e.DeleteOnlySpecifiedSelection="deleteOnlySpecifiedSelection",e.DeleteOrphans="deleteOrphans",e.DimensionIsEffectivelyEmpty="dimensionIsEffectivelyEmpty",e.DisabledDataConnectionClassNames="disabledDataConnectionClassNames",e.DisablePresModelHandler="disablePresModelHandler",e.DisplayDate="displayDate",e.DisplayTime="displayTime",e.DoDropUIAction="doDropUiAction",e.DoMerge="doMerge",e.DoPreDropUIAction="doPreDropUiAction",e.DoQuery="doQuery",e.DragHorz="dragHorz",e.DrillDown="drillDown",e.DropToXAxis="dropToXAxis",e.DropToYAxis="dropToYAxis",e.DropUnnamedFields="dropUnnamedFields",e.EditExisting="editExisting",e.EditingConnection="editingConnection",e.EmbedCredentials="embedCredentials",e.EmbedOAuthCredential="embedOauthCredentials",e.EmptyHighlightFogAll="emptyHighlightFogAll",e.EnableAlphabeticSort="enableAlphabeticSort",e.EnableAnchor="enableAnchor",e.EnableAutomaticDrill="enableAutomaticDrill",e.EnableConfidenceBands="enableConfidenceBands",e.EnableDataOrderSort="enableDataOrderSort",e.EnableFieldSort="enableFieldSort",e.EnableInstantAnalytics="enableInstantAnalytics",e.EnableLines="enableLines",e.EnableManualSort="enableManualSort",e.EnableMarks="enableMarks",e.EnableMultipleSelection="enableMultipleSelection",e.EnablePrefetching="enablePrefetching",e.EnableTableCalcDensification="enableTableCalcDensification",e.EnableTooltips="enableTooltips",e.EndDataSourcePresModelUpdate="endDataSourcePresModelUpdate",e.EstimateNulls="estimateNulls",e.Exclude="exclude",e.ExcludeColor="excludeColor",e.ExcludeCubeDenorm="excludeCubeDenorm",e.ExcludeInterceptEnabled="excludeInterceptEnabled",e.ExcludeLocalFunctions="excludeLocalFunctions",e.ExportDashboardImageFromSheet="exportImageSheetAsDashboard",e.ExtSvcConfigIsAuthEnabled="extSvcConfigIsAuthEnabled",e.ExtractFullRefresh="extractFullRefresh",e.ExtractNeedsRefresh="extractNeedsRefresh",e.ExtractPending="extractPending",e.ExtractSelected="extractSelected",e.FederatableOnly="federatableOnly",e.FieldSortOrder="fieldSortOrder",e.FieldSupportsContains="fieldSupportsContains",e.FieldSupportsEndsWith="fieldSupportsEndsWith",e.FieldSupportsStartsWith="fieldSupportsStartsWith",e.FillAbove="fillAbove",e.FillBelow="fillBelow",e.FillWithZeroes="fillZeroes",e.FilterIsNamed="filterIsNamed",e.Focus="focus",e.ForInternalUse="internalUse",e.ForceBrowserRendering="forceBrowserRendering",e.ForceCache="forceCache",e.ForceColorFromApp="forceColorFromApp",e.ForceConnectionAttempt="forceConnectionAttempt",e.ForceConsolidateInCommit="forceConsolidateInCommit",e.ForceExtractRefresh="extractForceRefresh",e.ForceInterceptZero="forceInterceptZero",e.ForceOldConnectExperience="forceOldConnectExperience",e.ForceRelativeDate="forceRelativeDate",e.ForceToggleHighlightStateOn="forceHighlightOn",e.ForceUserToChoose="forceUserToChoose",e.ForceWholeDate="forceWholeDate",e.ForecastSelected="forecastSelected",e.ForecastUseAutoAgg="forecastUseAutoSummarize",e.ForJoin="forJoin",e.FormatDataValueLocally="formatDataValueLocally",e.FormatIfColumn="formatIfColumn",e.FormatIfParameter="formatIfParameter",e.GeographicSearchIsDataLoaded="geographicSearchDataLoaded",e.GeographicSearchLoadDataAsync="geographicSearchLoadDataAsync",e.GroupByAll="groupByAll",e.HasAlias="hasAlias",e.HasAllMember="hasAllMember",e.HasApply="hasApply",e.HasBackgroundImage="hasBackgroundImage",e.HasBeenDismissed="hasBeenDismissed",e.HasCaption="hasCaption",e.HasCondition="hasCondition",e.HasConnectPermissions="hasConnectPermissions",e.HasDashboard="hasDashboard",e.HasDownloadPermissions="hasDownloadPermissions",e.HasDrill="hasDrill",e.HasExclude="hasExclude",e.HasFill="hasFill",e.HasLabels="hasLabels",e.HasLimit="hasLimit",e.HasLine="hasLine",e.HasModifiedAxes="hasModifiedAxes",e.HasNonRootCalculations="hasNonRootCalculations",e.HasOnlyOneHierarchy="hasOnlyOneHierarchy",e.HasPattern="hasPattern",e.HasPublishGuidanceResults="hasPublishGuidanceResults",e.HasSelection="hasSelection",e.HasServerCredentials="hasServerCredentials",e.HasSpace="hasSpace",e.HasStoredProcedure="hasStoredProcedure",e.HasStringCalculatedMeasures="hasStringCalculatedMeasures",e.HasTableCalcData="hasTableCalcData",e.HasTitle="hasTitle",e.HasUserSpecificContent="hasUserSpecificContent",e.HasUnjoinedTable="hasUnjoinedTable",e.HasVarArgs="hasVarArgs",e.HasVisitedWDCPage="hasVisitedWdcPage",e.IgnoreAliases="ignoreAliases",e.IgnoreDomain="ignoreDomain",e.IgnoreSelection="ignoreSelection",e.IncludeAllColumns="includeAllColumns",e.IncludeContext="includeContext",e.IncludeDashboardPresModels="includeDashboardPresModels",e.IncludeItemSet="includeItemSet",e.IncludeLocalFiles="includeLocalFiles",e.IncludeOtherSelected="includeOtherSelected",e.IncludeNulls="includeNulls",e.IncludeParent="includeParent",e.IncludeSelections="includeSelections",e.IncludeSiblings="includeSiblings",e.IncludeStories="includeStories",e.IncludeSubfolders="includeSubfolders",e.IncludeVolatileProps="includeVolatileProps",e.IncludesTag="includesTag",e.InsertAfter="insertAfter",e.InsertAtEnd="insertAtEnd",e.InstantAnalyticsAllowed="instantAnalyticsAllowed",e.IntegerCoordinates="intCoords",e.InvalidatedLayout="invalidatedLayout",e.IsActive="isActive",e.IsAddToFilter="isAddToFilterButtonChecked",e.IsAllButtonVisible="isAllButtonVisible",e.IsAllowedInCalcs="isAllowedInCalcs",e.IsAppMapSource="isAppMapSource",e.IsArchive="isArchive",e.IsAttributeHierarchy="isAttributeHierarchy",e.IsAuthoringMode="isAuthoringMode",e.IsAuto="isAuto",e.IsAutoClear="isAutoClear",e.IsAutoColumn="isAutoColumn",e.IsAutoHidden="isAutoHidden",e.IsAutoSelect="isAutoSelect",e.IsBold="isBold",e.IsBorderVisible="isBorderVisible",e.IsBoxplot="isBoxplot",e.IsCapable="isCapable",e.IsCaptured="isCaptured",e.IsCentered="isCentered",e.IsChecked="isChecked",e.IsColorDiverging="isColorDiverging",e.IsColorStepped="isColorStepped",e.IsCombinedField="isCombinedField",e.IsConnected="isConnected",e.IsContextMenuAllowed="isContextMenuAllowed",e.IsContinuous="isContinuous",e.IsCopy="isCopy",e.IsCustomCalculation="isCustomCalculation",e.IsCustomPalette="isCustomPalette",e.IsCustomSQL="isCustomSql",e.IsCustomValueEnabled="isCustomValueEnabled",e.IsDataAlertConditionMet="isDataAlertConditionMet",e.IsDataAlertDialogVisible="isDataAlertDialogVisible",e.IsDataBin="isDataBin",e.IsDataGridVisible="isDataGridVisible",e.IsDatabase="isDatabase",e.IsDatabaseFilterInclusive="isDbFilterInclusive",e.IsDataSourceFilter="isDatasourceFilter",e.IsDateTimeAnchor="isDateTimeAnchor",e.IsDateTimeField="isDateTimeField",e.IsDraggable="isDraggable",e.IsMDXCalculation="isMdxCalculation",e.IsMetadata="isMetadata",e.IsWebDataTabViewSupported="isWebDataTabViewSupported",e.IsPublishedDatasourceReplacement="isPublishedDatasourceReplacement",e.IsDeadDrop="isDeadDrop",e.IsDefault="isDefault",e.IsDeleteCalcConfirm="isDeleteCalcConfirmed",e.IsDimension="isDimension",e.IsDisabled="isDisabled",e.IsDivider="isDivider",e.IsDropdownEnabled="isDropdownEnabled",e.IsEditing="isEditing",e.IsEmbedded="isEmbedded",e.IsEmpty="isEmpty",e.IsExtensionCloseEvent="isExtensionCloseEvent",e.IsExtensionDialog="isExtensionDialog",e.IsAddInEnabled="isAddInEnabled",e.IsInDrillPath="isInDrillPath",e.AddInJSDebuggingEnabled="addInJsDebugginEnabled",e.AddInPauseBeforeLoading="addInPauseBeforeLoading",e.IsDSHierarchical="isDsHierarchical",e.IsEditorOpen="isEditorOpen",e.IsEndPtMoveable="isEndpointMovable",e.IsExclude="isExcludeButtonChecked",e.IsExistingConnection="isExistingConnection",e.IsExistingObject="isExistingObject",e.IsExtract="isExtract",e.IsExtractOnlyConnection="isExtractOnlyConnection",e.IsExtractSelectionVisible="isExtractSelectionVisible",e.IsFederatable="isFederatable",e.IsField="isField",e.IsFieldParameter="isFieldParameter",e.IsFilterActionField="isFilterActionField",e.IsFilterPresent="isFilterPresent",e.IsFirstClassConnector="isFirstClassConnector",e.IsFloating="isFloating",e.IsFolded="isFolded",e.IsForceDirty="isForceDirty",e.IsForceManual="isForceManual",e.IsForInput="isForInput",e.IsForecastEnabled="isForecastEnabled",e.IsFullScan="isFullScan",e.IsFullStyling="isFullStyling",e.IsGenerated="isGenerated",e.IsGlobalNames="isGlobalNames",e.IsGrayed="isGrayed",e.IsGrayscale="isGrayscale",e.IsGroup="isGroup",e.IsHideableField="isHideableField",e.IsHierarchicalDataSource="isHierarchicalDatasource",e.IsHierarchy="isHierarchy",e.IsHierarchySingleSelect="isHierarchySingleSelect",e.IsHighlightAllowed="isHighlightAllowed",e.IsHighlightEnabled="isHighlightEnabled",e.IsHighlightField="isHighlightField",e.IsHorizontal="isHorizontal",e.IsImageEnabled="isImageEnabled",e.IsInDefault="isInDefault",e.IsInPrimaryDataSource="isInPrimaryDataSource",e.IsInner="isInner",e.IsInstance="isInstance",e.IsInvalid="isInvalid",e.IsInvalidCalcOnDG="isInvalidDgCalc",e.IsItalics="isItalics",e.IsJoinAreaVisible="isJoinAreaVisible",e.IsLabels="isLabels",e.IsLayered="isLayered",e.IsLeft="isLeft",e.IsLegacy="isLegacy",e.IsLevel="isLevel",e.IsLevelOrLevelIdentity="isLevelOrLevelIdentity",e.IsLicensed="isLicensed",e.IsLink="isLink",e.IsLinked="isLinked",e.IsMap="isMap",e.IsMeasure="isMeasure",e.IsMerge="isMerge",e.IsMessageSourceRemote="isMessageSourceRemote",e.IsMaxOpen="isMaxOpen",e.IsMinOpen="isMinOpen",e.IsMissingFromExtract="isMissingFromExtract",e.IsMobile="isMobile",e.IsModified="isModified",e.IsNew="isNew",e.IsNewCloudFileDataSource="isNewCloudFileDataSource",e.IsNewZone="isNewZone",e.IsNone="isNone",e.IsOfflineMode="isOfflineMode",e.IsPreAqlBin="isPreAqlBin",e.IsOMeasuresAndRelational="isOmeasuresAndRelational",e.IsOpaque="isOpaque",e.IsOrphaned="isOrphaned",e.IsOverlay="isOverlay",e.IsOverride="isOverride",e.IsPageLoading="isPageLoading",e.IsParameterSelected="isParameterSelected",e.IsParameterSelectedOnFrom="isParameterSelectedOnFrom",e.IsParameterSelectedOnTo="isParameterSelectedOnTo",e.IsPatternBased="isPatternBased",e.IsPinned="isPinned",e.IsPresentationMode="isPresentationModeDoc",e.IsPublishAllowed="isPublishAllowed",e.IsMustDowngradeToPublish="isDowngradeToPublishRequired",e.IsPublished="isPublished",e.IsQuantitative="isQuantitative",e.IsQuickTableCalc="isQuickTableCalc",e.IsRadioOn="isRadioOn",e.IsReconnect="isReconnect",e.IsRecursive="isRecursive",e.IsReferenced="isReferenced",e.IsRemovalAllowed="isRowRemovalAllowed",e.IsRenderCapable="isRenderCapable",e.IsRequired="isRequired",e.IsReversed="isReversed",e.IsRightDrag="isRightDrag",e.IsRowLabels="isRowLabels",e.IsPercentage="isPercentage",e.IsSalesforceInConnection="isSalesforceInConnection",e.IsScaled="isScaled",e.IsSecondaryField="isSecondaryField",e.IsSelected="isSelected",e.IsSelectedItem="isSelectedItem",e.IsSelectionDisabled="isSelectionDisabled",e.IsShiftDrag="isShiftDrag",e.IsSingleLabel="isSingleLabel",e.IsSingleSelect="isSingleSelect",e.IsSingleSelectMode="isSingleSelectMode",e.IsSingleSelection="isSingleSelection",e.IsSorted="isSorted",e.IsSortPill="isSortPill",e.IsSpecial="isSpecial",e.IsSplashScreen="isSplashScreen",e.IsStoryEmpty="isStoryEmpty",e.IsStrikeThrough="isStrikeThrough",e.IsTableCalc="isTableCalc",e.IsTableCleaningSubtable="isTableCleaningSubtable",e.IsTableFilterInclusive="isTableFilterInclusive",e.IsTableRanked="isTableRanked",e.IsTemporary="isTemporary",e.IsTimeIntelligence="isTimeIntelligence",e.IsTitleVisible="isTitleVisible",e.IsTopLevel="isTopLevel",e.IsTwoValued="isTwoValued",e.IsTypeInFinished="isTypeinFinished",e.IsTypeInPill="isTypeInPill",e.IsURLActionField="isUrlActionField",e.IsUnderlined="isUnderlined",e.IsUnion="isUnion",e.IsUnionReplacement="isUnionReplacement",e.IsUnnamedCalc="isUnnamed",e.IsUserDefinedAttribute="isUserDefinedAttribute",e.IsUserEditable="isUserEditable",e.IsUserPrompted="isUserPrompted",e.IsUserResponded="isUserResponded",e.IsValid="isValid",e.IsValidDateRange="isValidDateRange",e.IsValidWDCPage="isValidWdcPage",e.IsVaryingAttributeDimension="isVaryingAttributeDimension",e.IsVertical="isVertical",e.IsViewModified="isViewModified",e.IsVisuallyCategorical="isVisuallyCat",e.IsVizInTooltip="isVizInTooltip",e.IsWeb="isWeb",e.IsWhite="isWhite",e.IsWorldNew="isWorldNew",e.IsXAxis="isXAxis",e.KeepAspectRatio="keepAspectRatio",e.KeepFieldFilters="keepFieldFilters",e.LabelLineEndFirst="labelLineEndFirst",e.LabelLineEndLast="labelLineEndLast",e.LabelMarkMax="labelMarkMax",e.LabelMarkMin="labelMarkMin",e.LockAspectRatio="lockAspectRatio",e.LoopPlayback="loopPlayback",e.LossyImages="lossyImages",e.MakeGlobal="isMakeGlobal",e.ManualSortOnly="manualSortOnly",e.MapBoxDefaultStyleSelected="mapboxDefaultStyleSelected",e.MapBoxURLParseSuccessful="mapboxUrlParseSuccessful",e.MapClientRequestsMapTiles="clientRequestsMapTiles",e.MapHasValidLayer="mapHasValidLayer",e.MapShowAttribution="showAttribution",e.MarkLabelsVisibilityChanged="markLabelsVisibilityChanged",e.MembersLoaded="membersLoaded",e.MinimizeNames="useMinNames",e.ModelsTime="modelsTime",e.MoveRefereceLineUp="moveReferenceLineUp",e.MultiDataSources="multiDataSources",e.NavArrowsVisible="navArrowsVisible",e.OEMHasSplashScreen="oemHasSplashScreen",e.OneWayBrushing="oneWayBrushing",e.OnlyAggregations="onlyAggregations",e.OnlyShowDateBins="onlyShowDateBins",e.OverrideAllowed="overrideAllowed",e.OverrideStackDumper="overrideStackDumper",e.PageAutoColorLines="autoColorLines",e.PageAutoColorMarks="autoColorMarks",e.PageHistoryFade="historyFade",e.PercentageBands="percentageBands",e.PercentilesAllowed="percentilesAllowed",e.PublishWithRemoteQueryAgent="publishWithRemoteQueryAgent",e.PreviousSheet="previousSheet",e.PromptDeleteSheetsWithVizInTooltip="promptDeleteSheetsWithVizInTooltip",e.QuantilesAllowed="quantilesAllowed",e.RadialDistanceHitTest="radialDistanceHitTest",e.RefLineSelected="refLineSelected",e.RemovedSheets="removedSheets",e.RenderImagesAsUrls="imagesAsUrls",e.RenderOnTop="renderOnTop",e.RepeatHeadersLegends="repeatHeadersLegends",e.ReplaceActiveConfig="replaceActiveConfig",e.ReplaceDatasourceAfterPublish="replaceDatasourceAfterPublish",e.ReplaceDatasourceFailed="replaceDatasourceFailed",e.ReplaceTde="replaceTde",e.RequireSelection="requireSelection",e.RequiresDBVariables="requiresDbVariables",e.RequiresFieldList="requiresFieldList",e.RestartEveryFieldIsInvalid="restartEveryFieldIsInvalid",e.RightJustify="rightJustify",e.SaveEnabled="saveEnabled",e.SavePasswordAllowed="savePasswordAllowed",e.ScopeIsolation="scopeIsolation",e.SelectionRequired="selectionRequired",e.SendNotifications="sendNotifications",e.SetActive="setActive",e.SetDefaultSort="setDefault",e.SheetIsDashboard="isDashboard",e.SheetIsStoryboard="isStory",e.ShouldAlwaysDisplayAlias="shouldAlwaysDisplayAlias",e.ShouldAutoCapture="shouldAutoCapture",e.ShouldAutoRevert="shouldAutoRevert",e.ShouldChangeUIMode="shouldChangeUiMode",e.ShouldDisplay="shouldDisplay",e.ShouldDrill="shouldDrill",e.ShouldForceConnectionAttempt="shouldForceConnectionAttempt",e.ShouldRefreshDS="shouldRefreshDs",e.ShouldScaleMarksInAxisUnits="shouldScaleMarksInAxisUnits",e.ShouldSeedCredentials="shouldSeedCredentials",e.ShouldShowDataSourceConnectionError="shouldShowDataSourceConnectionError",e.ShouldShowDistance="shouldShowDistance",e.ShouldShowHiddenField="shouldShowHiddenField",e.ShouldShowMapScale="shouldShowMapScale",e.ShouldURLEscape="shouldUrlEscape",e.ShouldUpdateDomainInfo="shouldUpdateDomInfo",e.ShowAddToFilter="showAddToFilterButton",e.ShowAliases="showAliases",e.ShowAllPages="showAllPages",e.ShowApply="showApplyButton",e.ShowApplyAndCancelButtons="showApplyAndCancelButtons",e.ShowAuthenticationOptions="showAuthenticationOptions",e.ShowAuthenticationSetting="showAuthenticationSetting",e.ShowAuto="showAuto",e.ShowBold="showBoldOption",e.ShowButtons="showButtons",e.ShowCaption="showCaption",e.ShowColorLegend="showColorLegend",e.ShowDataGridInlineRename="showDataGridInlineRename",e.ShowDetailMessages="showDetailMessages",e.ShowDate="showDate",e.ShowDragLabel="showDragLabel",e.ShowDropMeasures="showDropMeasures",e.ShowEmbedAll="showEmbedAll",e.ShowEntireImage="showEntireImage",e.ShowExclude="showExcludeButton",e.ShowFloatingZoomToolbar="showFloatingZoomToolbar",e.ShowFormatter="showFormatter",e.ShowFullSchedules="showFullSchedules",e.ShowGeographicSearch="showGeographicSearch",e.ShowHiddenFields="showHiddenFields",e.ShowHistoryControls="showHistoryControls",e.ShowIncludeLocalFiles="showIncludeLocalFiles",e.ShowIncludeOtherOption="showIncludeOtherOption",e.ShowIncludeSelections="showIncludeSelections",e.ShowIncrSchedules="showIncrSchedules",e.ShowInnerMostLevel="showInnermostLevel",e.ShowItalics="showItalicsOption",e.ShowLegend="showLegend",e.ShowLockedPermissionsIcon="showLockedPermissionsIcon",e.ShowManageDatasources="showManageDatasources",e.ShowMapLegend="showMapLegend",e.ShowMapScale="showMapScale",e.ShowMappedFilterCols="showMappedFilterColumns",e.ShowName="showName",e.ShowNone="showNone",e.ShowPagePlayback="showPagePlayback",e.ShowPageReadout="showPageReadout",e.ShowPageSlider="showPageSlider",e.ShowParent="showParent",e.ShowPercentages="showPercentages",e.ShowPredictionIntervals="showPredictionIntervals",e.ShowPublishedDatasources="showPublishedDatasources",e.ShowRelDatePicker="showRelDatePicker",e.ShowReplaceDatasource="showReplaceDatasource",e.ShowSeparator="showSeparator",e.ShowShapeLegend="showShapeLegend",e.ShowSizeLegend="showSizeLegend",e.ShowShelf="showShelf",e.ShowStructure="showStructure",e.ShowSyncClientOptions="showSyncClientOptions",e.ShowTabsAllowed="showTabsAllowed",e.ShowTime="showTime",e.ShowTitle="showTitle",e.ShowTransSlider="showTransparencySlider",e.ShowUnderline="showUnderlineOption",e.ShowUserThumbnailOptions="showUserThumbnailOptions",e.ShowView="showView",e.ShowViews="showViews",e.ShowingPageLoadError="showingPageLoadError",e.SupressAliases="suspressAliases",e.SupressThousandsSeparator="supressThousandsSeparator",e.SingleSelectOnly="singleSelectOnly",e.SkipConnectAction="skipConnectAction",e.SkipIfActive="skipIfActive",e.SkipRefresh="skipRefresh",e.SkipValidation="skipValidation",e.Skipped="skipped",e.SortFieldIsInvalid="sortFieldIsInvalid",e.SortModeIsAuto="sortModeIsAuto",e.SplitOnEdgeSnap="splitOnEdgeSnap",e.StandardDeviationAllowed="standardDeviationAllowed",e.State="state",e.StoredProcDisabled="storedProcDisabled",e.StoredProcsDropable="storedProcsDropable",e.StoryIsEmpty="storyIsEmpty",e.StoryPointIsEmpty="storyPointIsEmpty",e.SuccessfulSave="successfulSave",e.SupportXAxis="supportXAxis",e.SupportYAxis="supportYAxis",e.SupportsCenterAlignment="supportsCenterAlignment",e.SupportsDBFilters="supportsDatabaseFilters",e.SupportsMultipleValues="supportsMultipleValues",e.SupportsRightAlignment="supportsRightAlignment",e.SupportsTableFilters="supportsTableFilters",e.Symmetric="symmetric",e.SyncAutomaticDrill="syncAutomaticDrill",e.TabsAllowed="tabsAllowed",e.TextDropdownState="toggleState",e.TitleInline="titleInline",e.ToggleHighlightStateChanged="toggleHighlight",e.Transformed80Format="oldFormat",e.TrendLineSelected="trendLineSelected",e.TruncDate="truncDate",e.TupleSelected="tupleSelected",e.UIAutomationDidPageLoad="uiAutomationDidPageLoad",e.UIAutomationIsChecked="uiAutomationIsChecked",e.UIAutomationIsEnabled="uiAutomationIsEnabled",e.UIAutomationIsEventProcessed="uiAutomationIsEventProcessed",e.UIAutomationIsFocused="uiAutomationIsFocused",e.UIAutomationIsFound="uiAutomationIsFound",e.UIAutomationIsReadonly="uiAutomationIsReadonly",e.UIAutomationIsSelected="uiAutomationIsSelected",e.UpdateAllPanes="updateAllPanes",e.UpdateDSCaptionOnly="updateDsCaptionOnly",e.UpdateModelFromParams="updateModelFromParams",e.UpdateShelves="updateShelves",e.UpdatesUseContext="updatesUseContext",e.UpgradeDocumentVersion="upgradeDocumentVersion",e.UseAliases="useAliases",e.UseBlankForNull="useBlankForNull",e.UseCalculationEditor="useCalculationEditor",e.UseCenterValue="useCenterValue",e.UseColor="useColor",e.UseCustomMarkSize="useCustomMarkSize",e.UseDarkIcons="useDarkIcons",e.UseDataStoreMinfiedNames="useDatastoreMinNames",e.UseInitialDomainType="useInitialDomainType",e.UseEndValue="useEndValue",e.UseForOverlayHitTest="useForOverlayHitTest",e.UseFullColorRange="useFullColorRange",e.UseFullDomain="useFullDomain",e.UseInlineImages="useInlineImages",e.UseMeasures="useMeasures",e.UseNewQuickFilters="useNewQuickFilters",e.UseNotificationReturn="useNotificationReturn",e.UseParameters="useParameters",e.UserSetLayout="userSetLayout",e.UseSelector="useSelector",e.UseSignificantDigits="useSignificantDigits",e.UseSpecialStrings="useSpecialStrings",e.UseStartValue="useStartValue",e.UseTabs="useTabs",e.UseTabletAsDefaultPreview="useTabletAsDefaultPreview",e.UseTargetPt="useTargetPoint",e.UseUSLocale="useUsLocale",e.UseYAxis="useYAxis",e.Valid="valid",e.VizDataV82="vizData82",e.WasCanceled="wasCanceled",e.WMSConnectionSuccessful="wmsConnectionSuccessful",e.WMSShouldUseTiles="wmsShouldUseTiles",e.WantDomain="wantDomain",e.WorkbookModified="workbookModified",e.ZoomIn="zoomIn",e.ShowMarkLabels="showMarkLabels",e.HasDuplicates="hasDuplicates",e.HasUserDefinedIncrement="hasUserDefinedIncrement",e.HasUserDefinedMax="hasUserDefinedMax",e.HasUserDefinedMin="hasUserDefinedMin",e.IsDuplicate="isDuplicate",e.IsEditingValue="isEditingValue",e.ShouldRestrictDataType="restrictDataType",e.HasUserSelectedSourceField="hasUserSelectedForRefreshableParameter",e.EnableIncludeZero="enableIncludeZero",e.EnableSyncDualAxes="enableSynchronizeDualAxes",e.EnableShowTimes="enableShowTimes",e.EnableTickMarksTab="enableTickMarksTab",e.IsTemporal="isTemporal",e.ShouldIncludeZero="shouldIncludeZero",e.ShouldReverseAxis="shouldReverseAxis",e.ShouldShowTimes="shouldShowTimes",e.UseAutomaticAxisSubtitle="useAutomaticSubtitle",e.UseAutomaticAxisTitle="useAutomaticTitle",e.AllSelected="allSelected",e.AutoCommit="autoCommit",e.CacheOnly="cacheOnly",e.IncludeData="includeData",e.IsPatternExclusive="isPatternExclusive",e.IsSearchable="isSearchable",e.IsSelectionExclusive="isSelectionExclusive",e.ResetNewFilter="resetNewFilter",e.UseAllWhenManualEmpty="useAllWhenManualEmpty",e.UseAllWhenPatternEmpty="useAllWhenPatternEmpty",e.GroupByDrillDown="groupByDrillDown",e.GroupByTable="groupByTable",e.IncludeGroups="includeGroups",e.IncludePendingState="includePendingState",e.IncludeFieldMenus="includeFieldMenus",e.IncludeFormattedValues="includeFormattedValues",e.IncludeColumnInstances="includeColumnInstances",e.IncludeAdHocCalcs="includeAdhocCalcs",e.IncludeHiddenInvalidFields="includeHiddenInvalidFields",e.IncludeNonExtractedColumns="includeNonExtractedColumns",e.IncludeCalculatedFieldFormulas="includeCalculatedFieldFormulas",e.SetDataPreviewCustomFieldOrder="setDataPreviewCustomFieldOrder",e.CustomSplitAllowSplitFromRight="customSplitAllowSplitFromRight",e.IsChanged="isChanged",e.ShowFontColorPicker="showFontColorPicker",e.ShowFontFamilyPicker="showFontFamilyPicker",e.ShowFontSizePicker="showFontSizePicker",e.ShowFontStyleButtons="showFontStyleButtons",e.ShowLineForAll="showLineForAll",e.ShowLineForColumn="showLineForColumn",e.ShowLineForRow="showLineForRow",e.ShowLinePatternPicker="showLinePatternPicker",e.ShowLineTransparency="showLineTransparency",e.ShowLineWidthPicker="showLineWidthPicker",e.CanBeAuto="canBeAuto",e.CanBeNone="canBeNone",e.CanMatchMarkColor="canMatchMarkColor",e.HasOpacity="hasOpacity",e.IncludeAllHidden="includeAllHidden",e.IncludeCurrent="includeCurrent",e.IsIncluded="isIncluded",e.IsRelative="isRelative",e.IsSecondaryAllowed="isSecondaryAllowed",e.NullIfIncomplete="nullIfIncomplete",e.IsCalcAssistanceEnabled="isCalcAssistanceEnabled",e.UseSecondaryCalc="useSecondaryCalc",e.CanLoad="canLoad",e.DescriptionOnly="descriptionOnly",e.AreAliasesSupported="areAliasesSupported",e.AreRefColumnsSupported="areRefColumnsSupported",e.IsAggregated="isAggregated",e.IsExportSupported="isExportSupported",e.IsMeasureNames="isMeasureNames",e.IsSummarySupported="isSummarySupported",e.IsTopNSupported="isTopNSupported",e.IsUnderlyingSupported="isUnderlyingSupported",e.OnlyExportSummary="onlyExportSummary",e.ShowAllFields="showAllFields",e.UseTablePtrs="useTablePtrs",e.OnlyFetchSummary="onlyFetchSummary",e.IsDeviceLayoutCustomized="isDeviceLayoutCustomized",e.IsDeviceSizeCustomized="isDeviceSizeCustomized",e.IsDeviceSupportedByMobileApp="isDeviceSupportedByMobileApp",e.IsPortrait="isPortrait",e.IsPortraitByDefault="isPortraitByDefault",
e.IsUserCustomFormat="isUserCustomFormat",e.ShouldDisplayRebuildExtractMessage="shouldDisplayRebuildExtractMessage",e.SupportsCustomStartOfWeek="supportsCustomStartOfWeek",e.NeedsConnectPrompt="needsConnectPrompt",e.NeedsCloseDataSourceErrorPrompt="needsCloseDsErrorPrompt",e.ClearCurrentSelection="clearCurrentSelection",e.HasContains="hasContains",e.HasEndsWith="hasEndsWith",e.HasReplaceSelection="hasReplaceSelection",e.HasStartsWith="hasStartsWith",e.IsLeafSelectionOnly="isLeafSelectionOnly",e.ReplaceSelection="replaceSelection",e.IsColorPaletteCustomized="isColorPaletteCustomized",e.ReversePaletteOrder="reversePaletteOrder",e.TriedToConnect="triedToConnect",e.ScaleMarksInAxisUnits="scaleMarksInAxisUnits",e.ShowMarkSizingOptions="showMarkSizingOptions",e.UseSizeFieldCaption="useSizeFieldCaption",e.IsLicensedAndRegistered="isLicensedAndRegistered",e.SetNewDatasourceActive="setNewDatasourceActive",e.AllowCustomLabel="allowCustomLabel",e.IsMostRecentModeValid="isMostRecentModeValid",e.MustShowLabels="mustShowLabels",e.ShowRunningOrderLabels="showRunningOrderLabels",e.IsDroppedFile="isDroppedFile",e.IsInitialized="isInitialized",e.IncludeDashboard="includeDashboard",e.ChildrenCanResize="childrenCanResize",e.BoolMap="boolMap",e.CheckedMenuItems="checkedMenuItems",e.IncludedSheetValues="includedSheetValues",e.SortOrderVector="sortOrderVector",e.ActionName="actionName",e.ActionSourceText="actionSourceText",e.ActionTypeAsString="actionTypeAsString",e.ActiveTab="active_tab",e.AddInFeatureName="addInFeatureName",e.AddInId="addInId",e.AddInstanceId="addInInstanceId",e.AddInName="addInName",e.AddInLocale="addInLocale",e.AddInLanguage="addInLanguage",e.ExtensionVersion="extensionVersion",e.ExtensionManifestPath="extensionManifestPath",e.APIVersion="apiVersion",e.Alias="alias",e.AnchorDate="anchorDate",e.AnnotationRes="annotationRes",e.ReadId="readId",e.AnnotationText="annotationText",e.ArchiveDirectory="archiveDirectory",e.ArchiveFullPath="archiveFullPath",e.AtTheLevelInvalidFieldCaption="atTheLevelInvalidFieldCaption",e.AutoCompleteSubstring="acSubstring",e.AutosaveFileId="autosaveFileId",e.AutosaveTimerInterval="autosaveTimerInterval",e.BaseColumnCaption="baseColumnCaption",e.ButtonObjectClickAction="buttonObjectClickAction",e.ButtonObjectImagePath="buttonObjectImagePath",e.ContentSecurityPolicy="contentSecurityPolicy",e.ClearButtonText="clearButtonText",e.ColorPaletteId="colorPaletteId",e.ColorPaletteName="colorPaletteName",e.ColorSwatch="colorSwatch",e.CommandName="commandName",e.ConfidenceLevelValue="confidenceLevelValue",e.CountDistinctStr="countDistinctStr",e.CrossTabFilepath="crossTabFilepath",e.CSSMargin="cssMargin",e.CSSWhitespace="cssWhitespace",e.DBPassword="dbPassword",e.DBUsername="dbUsername",e.DataAlertConditionText="dataAlertConditionText",e.DataAlertMeasureText="dataAlertMeasureText",e.DataAlertSpecSerializedText="dataAlertSpecSerializedText",e.DataAlertDefaultSubject="dataAlertDefaultSubject",e.DataAlertThresholdText="dataAlertThresholdText",e.DataGridSortColumnName="datagridSortColumnName",e.DataServerConnectionError="dataServerConnectionError",e.DatabaseFilter="databaseFilter",e.DatabaseFilterPrompt="databaseFilterPrompt",e.DatasourceRanking="datasourceRanking",e.DatasourceUrl="datasourceUrl",e.DatasourceUsername="datasourceUsername",e.DataSourceCreationError="dataSourceCreationError",e.DateFormat="dateFormat",e.DatePart="datePart",e.DatePartAbbrev="datePartAbbrev",e.DefaultHierarchyName="defaultHierarchyName",e.DefaultMenuItemKey="defaultMenuItemKey",e.Delimiter="delimiter",e.DeviceName="deviceName",e.DeviceType="deviceType",e.DisplayPath="displayPath",e.DistributionValueString="distributionValueString",e.DrillPathName="drillPathName",e.EmbeddedTitle="embeddedTitle",e.EnterValueText="enterValueText",e.EscapeString="escapeString",e.ExtensionDialogPayload="extensionDialogPayload",e.ExtensionDialogUrl="extensionDialogUrl",e.ExtSvcConfigHost="extSvcConfigHost",e.ExtSvcConfigPassword="extSvcConfigPassword",e.ExtSvcConfigPort="extSvcConfigPort",e.ExtSvcConfigConnectTimeout="extSvcConnectTimeout",e.ExtSvcConfigPrevHost="extSvcConfigPrevHost",e.ExtSvcConfigUsername="extSvcConfigUsername",e.ExtractUpdateTime="extractUpdateTime",e.FieldFolderName="fieldFolderName",e.FieldNameString="fieldName",e.FilterSearchDomain="filterSearchDomain",e.FilterSpec="filterSpec",e.FirstValue="firstValue",e.FolderName="folderName",e.FontName="fontName",e.FormatString="formatString",e.FormattedDisplayString="formattedDisplayString",e.FormattedIncrementValue="formattedIncrement",e.FormattedMaxValue="formattedMax",e.FormattedMinValue="formattedMin",e.FormattedValue="formattedValue",e.FormattedCenterValue="formattedCenter",e.FormattedEndValue="formattedEnd",e.FormattedStartValue="formattedStart",e.PairedFormattedValue="pairedFormattedValue",e.FrameAttributes="frameAttr",e.GUID="guid",e.GeographicSearchCandidateDisplayName="geographicSearchCandidateDisplayName",e.GeographicSearchCandidateParentName="geographicSearchCandidateParentName",e.GeographicSearchCandidateType="geographicSearchCandidateType",e.GeographicSearchLocale="geographicSearchLocale",e.GeographicSearchQueryString="geographicSearchSearchString",e.GeographicSearchUILocale="geographicSearchUilocale",e.IconRes="iconRes",e.ImageHash="imageHash",e.ImageName="imageName",e.ImageRes="imageRes",e.IncludesSiblingsPrompt="includesSiblingsPrompt",e.IncludesSubfoldersPrompt="includesSubfoldersPrompt",e.IncrementalScheduleIDs="incrementalScheduleIds",e.InvariantKeyword="invariantKeyword",e.JoinOperator="joinOperator",e.JoinExpression="joinExpression",e.Key="keyId",e.Label="label",e.PairedLabel="pairedLabel",e.LayoutID="layoutId",e.LeftJoinExpression="leftJoinExpression",e.LimitCountExpression="limitCountExpression",e.LinkTarget="linkTarget",e.Locale="locale",e.LocalizedKeyword="localizedKeyword",e.MapBoxGLStyleId="mapboxGlStyleId",e.MapBoxStyleUrl="mapboxStyleUrl",e.MapBoxUsername="mapboxUsername",e.MapScaleReadoutString="mapScaleReadoutString",e.MapScaleTooltipString="mapScaleTooltipString",e.MapSourceName="mapSourceName",e.MaxLabel="maxLabel",e.MinLabel="minLabel",e.ModelDescriptionParagraph="modelDescriptionParagraph",e.NameTemplate="nameTemplate",e.NewDrillPath="newDrillPath",e.NewFieldFolderName="newFieldFolderName",e.NewTableAlias="newTableAlias",e.NlpBackend="nlpBackend",e.NonFormattedValue="unformattedValue",e.OAuthUserName="oauthUsername",e.ObjectName="objectName",e.ObjectOverrideMessage="objectOverrideMessage",e.OldTableAlias="oldTableAlias",e.OperatingSystem="operatingSystem",e.OriginalFilePath="originalFilePath",e.OriginalFileVersion="originalFileVersion",e.PaneDescriptorKey="paneDescrKey",e.ParentName="parentName",e.ParentTable="parentTable",e.PatternFilterString="patternFilterString",e.PendingCalcName="pendingCalcName",e.PercentilesString="percentilesString",e.ProjectId="projectId",e.ProjectName="projectName",e.PropertyName="propertyName",e.ProposedName="proposedName",e.QuickFilterTitleCaption="quickFilterTitleCaption",e.RangeDiffStr="diffValue",e.RangeMaxStr="maxValue",e.RangeMinStr="minValue",e.RecoveredFilePath="recoveredFilePath",e.ReferenceLineSpecificationId="referenceLineId",e.ReplaceFieldPrompt="replaceFieldPrompt",e.RightJoinExpression="rightJoinExpression",e.RootPath="rootPath",e.RuntimeFinalDatastore="runtimeFinalDatastore",e.RuntimeInitialDatastore="runtimeInitialDatastore",e.RuntimeVTL="runtimeVtl",e.SampleDataString="sampleData",e.ScheduleIDs="scheduleIds",e.SchemaFieldIconResource="fieldIconRes",e.ScreenName="screenName",e.ScriptCommand="command",e.SecondValue="secondValue",e.SelectedValue="selectedValue",e.ShapeName="shapeName",e.SheetId="sheetId",e.ShowDataTable="showDataTable",e.SimpleCommand="simpleCommand",e.SortModeCaption="sortModeCaption",e.SourceName="sourceName",e.SourceText="sourceText",e.SpecialValueText="specialValueText",e.StaticImage="staticImage",e.StaticAssetsPath="staticAssetsPath",e.StoryPointBase="storyPointBase",e.StoryPointCaption="storyPointCaption",e.Storyboard="storyboard",e.StyledLabel="styledLabel",e.SummaryCaption="summaryCaption",e.SummaryField="summaryField",e.TableauVersion="tableauVersion",e.TableFilter="tableFilter",e.TableFilterPrompt="tableFilterPrompt",e.TagsLabel="tagsLabel",e.Target="target",e.ThumbnailGroup="thumbnailGroup",e.ThumbnailUser="thumbnailUser",e.TimeFormat="timeFormat",e.TrendLineErrorString="trendLineErrorString",e.TrendLineModelFormula="trendLineModelFormula",e.URLString="urlString",e.URLTest="urlTest",e.UserIdentifier="userIdentifier",e.ValidationMessage="validationMessage",e.ValueStr="valueString",e.VerifiedNonFormattedValue="verifiedUnformattedValue",e.WorkbookFullPath="workbookFullPath",e.WindowTitle="windowTitle",e.ZoneName="zoneName",e.ZoneParam="zoneParam",e.DataAlertErrorText="dataAlertErrorText",e.ExtractTempDirectory="extractTempDir",e.DSSubClass="dsSubClass",e.DbgCommandLine="debugCommandLine",e.DbgLogPath="debugLogPath",e.DbgOSVersion="debugOsVersion",e.DbgUserName="debugUsername",e.ErrorMsg="errorMessage",e.ErrorStackTrace="errorStackTrace",e.ErrorStr="errorString",e.EventMessage="eventMessage",e.EventTimestamp="eventTimestamp",e.ExtractDeltaPath="extractDeltaPath",e.ExtractPath="extractPath",e.ExtractSuggestedPath="suggestedExtractPath",e.ExtractTaskSummary="extractTaskSummary",e.FactorsString="factorsStr",e.FormattedFamilyName="formattedFamilyName",e.FunctionSignature="funcSig",e.FunctionTooltip="funcTooltip",e.HelpContents="helpContents",e.MapAttributionText="mapAttributionText",e.MapAttributionTextSize="mapAttributionTextSize",e.MapAttributionUrl="mapAttributionUrl",e.MapBoxErrorMessage="mapboxErrorMessage",e.MapBoxOldStyleName="mapboxOldStyleName",e.MapBoxSelectedStyle="mapboxSelectedStyle",e.MapBoxStyleName="mapboxStyleName",e.MapLayerRequest="mapLayerRequest",e.MapServerKey="mapServerKey",e.MapTileServer="mapTileServer",e.MapTileUrl="mapTileUrl",e.PercentagesString="percentagesStr",e.PublishErrorMessage="publishErrorMessage",e.TdePath="tdePath",e.UIAutomationComponentName="uiAutomationComponentName",e.UIAutomationEndTime="uiAutomationEndTime",e.UIAutomationName="uiAutomationName",e.UIAutomationStartTime="uiAutomationStartTime",e.UIAutomationValue="uiAutomationValue",e.WMSConnectionName="wmsConnectionName",e.WMSOldConnectionName="wmsOldConnectionName",e.WMSServerUrl="wmsServerUrl",e.AboutBuildVersion="aboutBuildVersion",e.ActionFields="actionFields",e.AddVariableLabel="addVariableLabel",e.AddVariableTooltip="addVariableTooltip",e.AllowedDataSourcesByName="allowedDataSourcesByName",e.AppAboutVersion="appAboutVersion",e.AppBuildBranchName="appBuildBranchName",e.AppBuildVersion="appBuildVersion",e.AppExternalVersion="appExternalVersion",e.AppName="appName",e.AppProductVersion="appProductVersion",e.OriginalVersion="originalVersion",e.AtTheLevelSpecialCaption="atTheLevelSpecialCaption",e.AutoCompleteCalc="acCalc",e.CSVPath="csvPath",e.CommandNamespace="commandNamespace",e.Condition="condition",e.ConditionSummary="conditionSummary",e.ConfirmationMsg="confirmationMsg",e.DashboardTypeText="dashboardType",e.DataserverPublicAddress="dataserverPublicAddress",e.DatasourceFileName="datasourceFileName",e.DecimalMark="decimalMark",e.DeleteVariableTooltip="deleteVariableTooltip",e.DialogTitle="dialogTitle",e.DisplayValue="displayValue",e.TooltipValue="tooltipValue",e.DstPath="dstPath",e.EditWidgetHeader="editWidgetHeader",e.EditWidgetInstruction="editWidgetInstruction",e.EndSelectionCaption="endSelectionCaption",e.ErrorConfirmationQuestion="errorConfirmationQuestion",e.ErrorDialogTitle="errorDialogTitle",e.ErrorHelpLink="errorHelpLink",e.ErrorShortMessage="errorShortMessage",e.FilterSearchQuery="filterSearchQuery",e.FromLabel="fromLabel",e.FunctionHelp="functionHelp",e.Instructions="instructions",e.IssueHelperLinks="issueHelperLinks",e.LargeUnitDisplay="largeUnitDisplay",e.Limit="limit",e.ListViewNameLabel="listViewNameLabel",e.ListViewValueLabel="listViewValueLabel",e.MapScaleReadoutUnit="mapScaleReadoutUnit",e.MeasureDimension="measuresDimension",e.MimeType="mimeType",e.NotificationMsg="notificationMsg",e.OperationName="operationName",e.PageTitle="pageTitle",e.PatternSummary="patternSummary",e.QueryDetails="queryDetails",e.ReferenceLineId="refLineId",e.ReferenceLinePairedId="refLinePairedId",e.ReplaceText="replaceText",e.RequiredVariableMessage="requiredVariableMessage",e.RestartEverySpecialCaption="restartEverySpecialCaption",e.Root="root",e.SelectionSummary="selectionSummary",e.SessionAttributeKey="sessionAttributeKey",e.SessionAttributeValue="sessionAttributeValue",e.SheetAttributeKey="baseSheetAttributeKey",e.SheetAttributeValue="baseSheetAttributeValue",e.SmallUnitDisplay="smallUnitDisplay",e.SourceCaption="sourceCaption",e.SrcPath="srcPath",e.StartSelectionCaption="startSelectionCaption",e.Subtitle="subtitle",e.TableauServerSiteName="tableauServerSiteName",e.TargetCaption="targetCaption",e.ThumbnailPath="thumbnailPath",e.ToLabel="toLabel",e.URLAddress="urlAddress",e.UrlRoot="urlRoot",e.ValuesTableHeader="valuesTableHeader",e.ValuesTableHeader2="valuesTableHeader2",e.VariableDescription="variableDescription",e.VariableDisplayName="variableDisplayName",e.VariableGUID="variableGuid",e.VerboseName="verboseName",e.ViewId="viewId",e.Warning1="warning1",e.Warning2="warning2",e.RefreshToken="refresh_token",e.TokenType="token_type",e.XSRFToken="xsrf_token",e.AxisSubtitle="axisSubtitle",e.AxisTitle="axisTitle",e.TickMarkOriginDataValue="tickMarkOriginDataValue",e.TickMarkOriginDataValueNoTime="tickMarkOriginDataValueNoTime",e.TickMarkSpacingDataValue="tickMarkSpacingDataValue",e.ExtractActionLocalized="extractActionLocalized",e.ExtractSource="extractSource",e.FileContents="fileContents",e.SaveImagePath="saveImagePath",e.WidgetUID="widgetUniqueId",e.DatePropertiesDisplayText="datePropertiesDisplayText",e.DatePropertiesHelperText="datePropertiesHelperText",e.EventName="eventName",e.ExceptionType="exceptionType",e.SearchPlaceholder="searchPlaceholder",e.TargetVersion="targetVersion",e.DataValueDisplayString="dataValueDisplayString",e.DomainString="domainString",e.RawDataValueString="rawDataValueString",e.RichTextDialogTitle="richTextDialogTitle",e.RichTextContent="richTextContent",e.MarkSizeAsString="markSizeAsString",e.UnitsLabel="unitsLabel",e.EmailAddress="emailAddress",e.FirstName="firstName",e.LastName="lastName",e.SummaryCardAvg="summaryCardAvg",e.SummaryCardCaption="summaryCardCaption",e.SummaryCardCount="summaryCardCount",e.SummaryCardKurtosis="summaryCardKurtosis",e.SummaryCardMax="summaryCardMax",e.SummaryCardMedian="summaryCardMedian",e.SummaryCardMin="summaryCardMin",e.SummaryCardQuart1="summaryCardQuart1",e.SummaryCardQuart3="summaryCardQuart3",e.SummaryCardSkewness="summaryCardSkewness",e.SummaryCardStdev="summaryCardStdev",e.SummaryCardSum="summaryCardSum",e.ValueClassAttr="valueClassAttr",e.TrendLineDialogTitle="trendLineDialogTitle",e.LinearFitTypeLabel="linearFitTypeLabel",e.LogFitTypeLabel="logFitTypeLabel",e.ExpFitTypeLabel="expFitTypeLabel",e.PowerFitTypeLabel="powerFitTypeLabel",e.PolynomialFitTypeLabel="polynomialFitTypeLabel",e.ExcludeColorLabel="excludeColorLabel",e.EnableConfidenceBandsLabel="enableConfidenceBandsLabel",e.ForceInterceptZeroLabel="forceInterceptZero label",e.EnableInstantAnalyticsLabel="enableInstantAnalyticsLabel",e.EnableTooltipsLabel="enableTooltipLabel",e.AuthenticationSummary="authenticationSummary",e.BtnCancelText="btnCancelText",e.BtnOkText="btnOkText",e.ButtonText="buttonText",e.CalculationCaption="calculationCaption",e.CalculationDependencies="calculationDependencies",e.CalculationFormula="calculationFormula",e.CheckPublishMessage="checkPublishSummary",e.ClusterModelText="clusterModelText",e.ClusterSummaryScaledText="clusterSummaryScaledText",e.ClusterSummaryText="clusterSummaryText",e.ColumnCaption="columnCaption",e.CurrentDatePeriodLabel="currentDatePeriodLabel",e.CurrentToDateLabel="currentToDateLabel",e.DatasourceCaption="datasourceCaption",e.DateRangeLabel="dateRangeLabel",e.DefaultCaption="defaultCaption",e.DisplayString="displayText",e.DragDescription="dragDescription",e.ExceptionMessage="exceptionMessage",e.Explanation="explanation",e.FieldCaption="fieldCaption",e.SourceFieldCaption="sourceFieldCaption",e.FieldSummary="fieldSummary",e.FieldSummaryLabel="fieldSummaryLabel",e.FilterDescription="filterDescription",e.FilterName="filterName",e.ForecastModelText="forecastModelText",e.ForecastSummaryPctText="forecastSummaryPctText",e.ForecastSummaryText="forecastSummaryText",e.HasActiveExtractText="hasActiveExtractText",e.HtmlColor="htmlColor",e.IncludeLocalFilesCheckedWarning="includeLocalFilesCheckedWarning",e.IncludeLocalFilesWarning="includeLocalFilesWarning",e.InvalidFieldCaption="invalidFieldCaption",e.LastDatePeriodLabel="lastDatePeriodLabel",e.LastNDatePeriodsLabel="lastNDatePeriodsLabel",e.LimitSummary="summary",e.LoadedExistingObjectWarning="loadedExistingObjectWarning",e.ManageDatasourcesSummary="manageDatasourcesSummary",e.ModalDialog="modalDialog",e.NewDatasourceCaption="newDatasourceCaption",e.NextDatePeriodLabel="nextDatePeriodLabel",e.NextNDatePeriodsLabel="nextNDatePeriodsLabel",e.PermissionsButtonLabel="permissionsButtonLabel",e.PermissionsEditorRoleId="permissionsEditorRoleId",e.PermissionsLabel="permissionsLabel",e.PerspectiveCaption="perspectiveCaption",e.PublishButtonLabel="publishButtonLabel",e.PublishChoiceLabel="publishChoiceLabel",e.PublishObjectViewsSummary="publishObjectViewsSummary",e.QualifiedFieldCaption="qualifiedFieldCaption",e.RelationshipTooltipText="relationshipTooltipText",e.ResetObjectAttributesWarning="resetObjectAttributesWarning",e.RowCountCaption="rowCountCaption",e.ServerCaption="serverCaption",e.SizeModeName="sizeModeName",e.SummaryText="summaryText",e.SyncClientUseExtractLabel="syncClientUseExtractLabel",e.Text="text",e.NLGText="nlgText",e.ArkLangText="arklang_text",e.TextDropdownControlLabel="controlLabel",e.ThumbnailUserName="thumbnailUserName",e.TitleString="titleString",e.TooltipText="tooltipText",e.UpdatedCalcCaption="updatedCalculationCaption",e.UpdatedCalcFormula="updatedCalculationFormula",e.UserCaption="userCaption",e.WarningTooltipText="warningTooltipText",e.DatasourceFile="datasourceFile",e.File="file",e.FileNameBase="filenameBase",e.NewFile="newFile",e.OriginalFile="originalFile",e.OutputFile="outputFile",e.SampleFileName="sampleFilename",e.WorkbookFile="workbookFile",e.ManifestFile="manifestFile",e.ImageKey="imageKey",e.OverlayImageKey="overlayImageKey",e.TempFileKey="tempfileKey",e.CapturedSheet="capturedSheet",e.CurrentSheet="currentSheet",e.Dashboard="dashboard",e.EnsureSheet="ensureSheetName",e.NewSheet="newSheet",e.Sheet="sheet",e.SheetName="sheetName",e.SourceDashboard="sourceDashboard",e.SourceSheet="sourceSheet",e.TargetSheet="targetSheet",e.WorkbookName="workbookName",e.Worksheet="worksheet",e.BaseViewThumbLink="baseViewThumbLink",e.BlogLink="blogLink",e.CacheUrl="cacheUrl",e.DownloadLink="downloadLink",e.RepositoryUrl="repositoryUrl",e.ShareLink="shareLink",e.URL="url",e.ClusterModelHtml="clusterModelHtml",e.ClusterSummaryHtml="clusterSummaryHtml",e.ClusterSummaryScaledHtml="clusterSummaryScaledHtml",e.FieldDescription="fieldDescription",e.ForecastModelHtml="forecastModelHtml",e.ForecastSummaryHtml="forecastSummaryHtml",e.ForecastSummaryPctHtml="forecastSummaryPctHtml",e.Html="html",e.HtmlSelection="htmlSelection",e.HtmlTooltip="htmlTooltip",e.HtmlTooltipModified="htmlTooltipModified",e.TitleHtml="titleHtml",e.CacheUrlInfoJson="cacheUrlInfoJson",e.FilterSearchJson="filterSearchJson",e.FilterSearchWithIndexJson="filterSearchWithIndexJson",e.FilterShowChildrenJson="filterShowChildrenJson",e.FiltersJson="filtersJson",e.FrameJson="frameJson",e.GeometryJson="geometryJson",e.GetFilterItemsJson="getFilterItemsJson",e.KeepOnlyResponseJson="keepOnlyResponseJson",e.MenuCommandsJson="menuCommandsJson",e.ModifiedSheetsJson="modifiedSheetsJson",e.ParameterCtrlJson="parameterCtrlJson",e.ViewJson="viewJson",e.CustomizedViewXML="customizedViewXml",e.DatasourceDeltaXML="datasourceDeltaXml",e.DatasourceXML="datasourceXml",e.KeychainXML="keychainXml",e.PermissionsModelXML="permissionsModelXml",e.SharedViewsXML="sharedViewsXml",e.TargetURL="targetUrl",e.Anchor="anchor",e.CenterValue="centerValue",e.ComputedBinSize="computedBinSize",e.ConstantValue="constantValue",e.PairedConstantValue="pairedConstantValue",e.CountDistinct="countDistinct",e.DataMax="dataMax",e.DataMin="dataMin",e.DataValueString="dataValueStr",e.EndValue="endValue",e.RangeMax="rangeMax",e.RangeMin="rangeMin",e.RangeStepSize="rangeStepSize",e.StartValue="startValue",e.TargetValue="targetValue",e.ValueInc="valueInc",e.ValueMax="valueMax",e.ValueMin="valueMin",e.QuantilesValue="quantilesValue",e.UserInputBinSize="userBinSize",e.AddedDataSources="addedDataSourceNames",e.AddressingCaptions="addressingCaptions",e.AggregationCaptions="aggregationCaptions",e.AtTheLevelCaptions="atTheLevelCaptions",e.AuthenticationSettingLabels="authenticationSettingLabels",e.AutosaveFileIdsVector="autosaveFileIdsVector",e.ChangedTuples="changedTuples",e.CharsetsAvailable="charsetsAvailable",e.CharsetDisplayNames="charsetDisplayNames",e.ColorFactors="colorFactors",e.ColumnFullNames="columnFullNames",e.ConnectionNames="connectionNames",e.ConnectionCaptions="connectionCaptions",e.ConnectionBigQueryLegacySQLCheckBox="connectionBigqueryLegacySqlCheckbox",e.CustomFieldOrder="customFieldOrder",e.DataSourceClasses="dataSourceClasses",e.DataSourceNames="dataSourceNames",e.DataSourceNames2="dataSourceNames2",e.DataSourcesWithEmptyRelation="dataSourcesWithEmptyRelation",e.DataSourceCreationErrors="dataSourceCreationErrors",e.DateFormats="dateFormats",e.DayNames="dayNames",e.DrillPathVector="drillpathVector",e.ErrorDetails="errorDetails",e.ExceptionMessageParams="exceptionMessageParams",e.ExcludedSheets="excludeSheets",e.FieldDisplayNames="fieldDisplayNames",e.FieldFolderVector="fieldFolderVector",e.FileIds="fileIds",e.FilePaths="filePaths",e.FileNames="fileNames",e.FilterAdd="filterAdd",e.FilterAliases="filterValues",e.FilterRemove="filterRemove",e.FixedCaptions="fixedCaptions",e.FontFamilies="fontFamilies",e.FormatStrings="formatStrings",e.FormattedValues="formattedValues",e.FoundTuples="foundTuples",e.FullSchedulesLabels="fullSchedulesLabels",e.ImageResourceList="imageResources",e.IncludeList="includeList",e.IncrSchedulesLabels="incrSchedulesLabels",e.InvalidDates="invalidDates",e.InvalidValues="invalidValues",e.ItemValues="itemValues",e.JoinEditableProps="joinEditableProps",e.JoinFieldCaptions="joinFieldCaptions",e.LocaleOptions="localeOptions",e.LocaleDisplayNames="localeDisplayNames",e.MapBoxStyleMaps="mapboxStyleMaps",e.MapConnectionErrorDetails="mapConnectionErrorDetails",e.SheetNames="sheetNames",e.MapSourceNames="mapSourceNames",e.MarkGeometries="markGeometries",e.MenuItems="menuItems",e.Modes="modes",e.MonthNames="monthNames",e.NumberFormats="numberFormats",e.NonRefreshableExtracts="nonRefreshableExtracts",e.ObjectTextIDs="objectTextIds",e.OldExtracts="oldExtracts",e.OrderingTypeCaptions="orderingTypeCaptions",e.PageNames="pageNames",e.PaneDescriptorKeys="paneDescriptorKeys",e.ParamCaptions="paramCaptions",e.PrecannedDataValues="precannedDataValues",e.PublishChoiceLabels="publishChoiceLabels",e.RankTypeCaptions="rankTypeCaptions",e.RecentTags="recentTags",e.RelativeCaptions="relativeCaptions",e.RemovedDataSources="removedDataSourceNames",e.RepresentativeTuple="representativeTuple",e.RestartEveryCaptions="restartEveryCaptions",e.SchemaMemberGlobalNames="schemaMemberGlobalNames",e.SelectValuesList="selectValues",e.SelectionValueList="selectionValueList",e.SortAggCaptions="sortAggCaptions",e.SortDirectionCaptions="sortDirectionCaptions",e.SortFieldCaptions="sortFieldCaptions",e.SortFieldNameVector="sortFieldnameVector",e.SupportedJoinOperators="supportedJoinOperators",e.TableCalcTypeCaptions="tableCalcTypeCaptions",e.Tags="tags",e.TermVec="termVector",e.UIAutomationList="uiAutomationList",e.ReferenceLineValidCustomLabelTags="validReferenceLineCustomLabelTags",e.LocalizedKeywords="localizedKeywords",e.AvailableCalendars="availableCalendars",e.SheetsToBeDeletedOrHidden="sheetsToBeDeletedOrHidden",e.FileList="fileList",e.AddSheets="addSheets",e.NamesOfSubsheets="namesOfSubsheets",e.RemoveSheets="removeSheets",e.ScrollOffsetSheets="scrollOffsetSheets",e.Sheets="sheets",e.SourceWorksheets="sourceWorksheets",e.TargetExcludes="targetExclude",e.TargetWorksheets="targetWorksheets",e.TileURLs="tileUrls",e.Details="details",e.FieldCaptions="fieldCaptions",e.HighlightCaptions="highlightCaptions",e.LevelCaptions="levelCaptions",e.LevelLeafValues="levelLeafValues",e.SubstitutionVariables="substitutionVariables",e.SubstitutionVariableValues="substitutionVariableValues",e.HtmlTooltips="htmlTooltips",e.InvalidFields="invalidFields",e.NamesOfColumns="namesOfColumns",e.NamesOfFields="namesOfFields",e.ReferencedDatasources="referencedDataSourceList",e.CSSAttrs="cssAttrs",e.DataSourceMap="dataSourceMap",e.EventParameters="eventParameters",e.ExceptionAttrs="exceptionAttrs",e.InvalidSheetMessage="invalidSheetMessages",e.MapBoxDefaultStyle="mapboxDefaultStyles",e.PaneFormattings="paneFormattings",e.SourceNameWithCaption="sourceNameWithCaption",e.ConnectionColorMap="connectionColorMap",e.TargetNameWithCaption="targetNameWithCaption",e.ViewIds="viewIds",e.AddInSettings="addInSettings",e.DatasourceIcons="datasourceIcons",e.FormattedText="formattedText",e.IconTooltip="iconTooltip",e.Title="title",e.Tooltip="tooltip",e.ZoneText="zoneText",e.AlignmentFlags="alignmentFlags",e.AlphaLevel="alphaLevel",e.AnovaDF="anovaDf",e.AtTheLevelIndex="atTheLevelIndex",e.AutomaticDrillIdxInVector="automaticDrillIdxVector",e.AutoSize="automaticSize",e.BaseCoord="baseCoord",e.CalcEditorCursorPosPostDrop="calcEditorCursorPosPostDrop",e.CalcEditorDropPos="calcEditorDropPos",e.CalcEditorTextSelectionEndPos="calcEditorTextSelectionEndPos",e.CalcEditorTextSelectionStartPos="calcEditorTextSelectionStartPos",e.CategoricalBinId="categoricalBinId",e.CategoricalFindControllerId="categoricalFindControllerId",e.ClauseToModifyIndex="clauseToModifyIndex",e.ClientRenderPixelLimit="clientRenderPixelLimit",e.ColCount="colCount",e.ColWidth="colWidth",e.ColumnLevels="columnLevels",e.ColumnNumber="columnNumber",e.ColumnWidth="columnWidth",e.ContentHeight="contentH",e.ContentWidth="contentW",e.ContentX="contentX",e.ContentY="contentY",e.Coordinate="coord",e.CurDateAgg="curDateAgg",e.CurrentCustViewId="currentCustomViewId",e.CustomSplitCharacterCountSeparator="customSplitCharacterCountSeparator",e.CustomSplitDesiredSplitCount="customSplitDesiredSplitCount",e.DashboardGridSize="dashboardGridSize",e.DataIndex="dataIndex",e.DecimalPlaces="decimalPlaces",e.DeltaTime="deltaTime",e.DestPix="destPix",e.DeviceIndex="deviceIndex",e.Duration="duration",e.EndPtX="endX",e.EndPtY="endY",e.ErrorLen="lengthOfCalcOfError",e.ErrorPos="startPositionForError",e.ExceptionErrorMessageId="exceptionErrorMessageId",e.ExtensionDialogH="extensionDialogHeight",e.ExtensionDialogW="extensionDialogWidth",e.ExtentsH="extentsHeight",e.ExtentsW="extentsWidth",e.ExtentsX="extentsX",e.ExtentsY="extentsY",e.FieldIndex="fieldIndex",e.FieldNameId="fieldNameId",e.FirstDayOfWeek="firstDayOfWeek",e.FirstLinkedLevel="firstLinkedLevel",e.FirstValueIndex="firstValueIndex",e.FixedSizePresetIndex="fixedSizePresetIndex",e.FocusItemIndex="focusItemIndex",e.FontSize="fontSize",e.ForecastIntRangeEnd="forecastIntRangeEnd",e.ForecastIntRangeStart="forecastIntRangeStart",e.FunctionHelpIndex="functionHelpIndex",e.GeographicSearchMaxResults="geographicSearchMaxResults",e.Height="h",e.HierarchyLevel="hierarchyLevel",e.HierarchyLevelLoaded="hierarchyLevelLoaded",e.HierarchyLevelMinimum="hierarchyLevelMinimum",e.HierarchyLoadLimit="hierarchyLoadLimit",e.HierarchySelectControllerId="hierarchySelectControllerId",e.HorzTextCell="horzTextCell",e.ImageIndex="imageIndex",e.ImageSizeLimit="imageSizeLimit",e.TransparentLineMarksLimit="transparentLineMarksLimit",e.Indent="indent",e.Index="idx",e.IndexFrom="indexFrom",e.IndexOffset="indexOffset",e.IndexRelativeDateField="indiexRelativeDateField",e.IndexSelectedItem="indexSelectedItem",e.IndexTo="indexTo",e.InlineConnectionRenameRow="inlineConnectionRenameRow",e.InsertPos="insertPos",e.IsHasDataSupported="isHasDataSupported",e.LeftMargin="leftMargin";e.LeftRightBorderWidth="leftRightBorderWidth";e.LevelNumber="levelNumber",e.LowerBound="lowerBound",e.MapRequestPixels="mapRequestPixels",e.MapScaleFontSizePixels="mapScaleFontSizePixels",e.MapScaleReadoutNumber="mapScaleReadoutNumber",e.MapScaleWidth="mapScaleWidth",e.MapTileSize="mapTileSize",e.Margin="margin",e.MarginBottom="marginBottom",e.MarginLeft="marginLeft",e.MarginRight="marginRight",e.MarginTop="marginTop",e.MaxCell="maxCell",e.MaxItemSpan="maxItemSpan",e.MaxPolynomialDegree="maxDegree",e.MaxPosition="maxPosition",e.MaxSize="maxSize",e.MinCell="minCell",e.MinPolynomialDegree="minDegree",e.MinPosition="minPosition",e.MinSize="minSize",e.ModelDF="modelDf",e.NewIndex="newIndex",e.NumDataSourcesUsingServer="numDataSourcesUsingServer",e.NumFilteredObs="filteredObservations",e.NumModeledObs="modeledObservations",e.NumNotClustered="numNotClustered",e.NumNumericFields="numNumericFields",e.NumOutliers="numOutliers",e.NumRows="numRows",e.NumSelected="numSelected",e.OffsetX="offsetX",e.OffsetY="offsetY",e.Padding="padding",e.PaddingBottom="paddingBottom",e.PaddingLeft="paddingLeft",e.PaddingRight="paddingRight",e.PaddingTop="paddingTop",e.PageLoadPercentage="pageLoadPercentage",e.PaletteIndex="paletteIndex",e.PaneSpecificationId="paneSpec",e.ParameterCtrlIncrementsPerTick="parameterControlIncrementMultiplier",e.PolynomialDegree="degree",e.Port="datasourcePort",e.Position="position",e.ParentProjectId="parentProjectId",e.Radius="radius",e.ReadoutOffset="readoutOffset",e.ReferenceIndex="referenceIndex",e.RegionHeight="regionHeight",e.RegionWidth="regionWidth",e.RemovedDatasourceCount="removedDatasourceCount",e.RemovedSheetCount="removedSheetCount",e.ResidualDF="residualDf",e.ResizeColumn="resizeColumn",e.RestartEveryIndex="restartEveryIndex",e.RightMargin="rightMargin",e.RowCount="rowCount",e.RowHeight="rowHeight",e.RowInnerLevels="rowInnerLevels",e.RowLevels="rowLevels",e.RowNumber="rowNumber",e.RowWidth="rowWidth",e.RuntimeLocalStoreHandle="runtimeFinalDatastoreLocal",e.SecondLinkedLevel="secondLinkedLevel",e.SecondValueIndex="secondValueIndex",e.SecondsAgo="secondsAgo",e.SelectionEnd="selectionEnd",e.SelectionStart="selectionStart",e.ShapePaletteID="shapePaletteId",e.SheetIndex="sheetIndex",e.ShelfPositionIndex="shelfPosIndex",e.Size="size",e.SizeDifference="sizeDelta",e.SnapDistance="snapDistance",e.SnapLocation="snapLocation",e.SolveOrder="solveOrder",e.SpaceBetweenPoints="spaceBetweenPoints",e.StepSize="stepSize",e.Steps="steps",e.StoryPointIndex="currentStorypointIndex",e.StyleLen="tokenLengthForStyle",e.StylePos="tokenPositionForStyle",e.SwatchAreaWidth="swatchWidth",e.TargetBinId="targetBinId",e.TargetPtX="targetX",e.TargetPtY="targetY",e.TileFactor="tileFactor",e.TitleHeight="titleHeight",e.TitleWidth="titleWidth",e.TopBottomBorderWidth="topBottomBorderWidth",e.UIAutomationLineSize="uiAutomationLineSize",e.UIAutomationPageSize="uiAutomationPageSize",e.UID="uid",e.UpperBound="upperBound",e.VertTextCell="vertTextCell",e.Width="w",e.X="x",e.Y="y",e.ZOrder="zOrder",e.ZoneIconIndex="zoneIconIndex",e.AliasIndices="aliasIndices",e.AnovaDFVec="anovaDfVector",e.ColumnIndices="columnIndices",e.DrillFieldIndices="drillFieldIndices",e.FilterMaxIndices="filterMaxIndices",e.FilterMinIndices="filterMinIndices",e.FilterValuesIndices="filterValueIndices",e.FormatStringIndices="formatstrIndices",e.FormattedValIndices="formatValIdxs",e.PaletteIndices="palettesIndices",e.PaneIndices="paneIndices",e.Points="points",e.QuickFilterSettings="quickFilterSettings",e.SelectedIndices="selectedIndices",e.ShelfPositionIndices="shelfPosIndices",e.TileBox="tileBox",e.TrailOverride="trailOverride",e.UIDs="uids",e.ValueIndices="valueIndices",e.XCellOffsets="xCellOffsets",e.XPixelOffsets="xPixelOffsets",e.YCellOffsets="yCellOffsets",
e.YPixelOffsets="yPixelOffsets",e.IntMap="intMap",e.SelectedAuthSettingIndices="selectedAuthSettingIndices",e.ActiveStoryPointID="activeStoryPointId",e.ActiveZoneID="activeZoneId",e.ActualSize="actualSize",e.AddInDebugPort="addInDebugPort",e.AggregationIndex="aggregationIndex",e.AnnotationID="annotationId",e.AssignedAliasCount="assignedAliasCount",e.CapabilityId="capabilityId",e.CaretIndex="caretIndex",e.CellID="cellId",e.ColumnIndex="columnIndex",e.CommandID="id",e.CommandIndex="index",e.ControllerId="controllerId",e.Count="count",e.URowCount="uRowCount",e.UColumnCount="uColumnCount",e.CurrentPage="currentPage",e.DatePeriodsCount="datePeriodsCount",e.Decimals="decimals",e.DefaultHeight="defaultHeight",e.DefaultItem="defaultItem",e.DefaultWidth="defaultWidth",e.Depth="depth",e.DetailID="detailId",e.DrillLevel="drillLevel",e.DuplicateIndex="duplicateIndex",e.EndIndex="endIndex",e.FieldIconIdx="fieldIconIdx",e.FilterLevel="filterLevel",e.FilterTileSize="filterTileSize",e.FiscalYearStart="fiscalYearStart",e.FitPagesAcross="pageFitHorizontal",e.FitPagesDown="pageFitVertical",e.FixedIndex="fixedIndex",e.FlipboardZoneID="flipboardZoneId",e.ForecastAutoRangeSize="forecastAutoRangeSize",e.ForecastEndOfRange="forecastEndOfRange",e.ForecastIgnoreLast="forecastIgnoreLast",e.ForecastNextRangeSize="forecastNextRangeSize",e.GroupFlags="groupFlag",e.HierarchyLevels="hierarchyLevels",e.HierarchyMemberId="hierarchyMemberId",e.HitTestFlags="hitTestFlags",e.ImageHeight="imageHeight",e.ImageWidth="imageWidth",e.ItemIndex="itemIndex",e.ItemIndex1="itemIndex1",e.LineHeight="lineHeight",e.MapIntermediateLevels="mapIntermediateLevels",e.MapWorldRepeats="mapWorldRepeats",e.MaxAlpha="maxAlpha",e.MaxHeight="maxHeight",e.MaxNumberWebListItems="maxNumberWebListItems",e.MaxPrevOrNextValues="maxPrevOrNextValues",e.MaxRows="maxRows",e.MaxTransparency="colorMaxTransparencyValue",e.MaxWidth="maxWidth",e.MinColumns="minColumns",e.MinHeight="minHeight",e.MinPrevOrNextValues="minPrevOrNextValues",e.MinTransparency="colorMinTransparencyValue",e.MinWidth="minWidth",e.NestedCalcsIndex="nestedCalcsIndex",e.NextValues="nextValues",e.NodeLevel="nodeLevel",e.NumHighlighted="numHighlighted",e.NumberOfNextValues="numberOfNextValues",e.NumberOfPrevValues="numberOfPrevValues",e.ObjectID="objectId",e.OrderingTypeIndex="orderingTypeIndex",e.PageCount="pageCount",e.PageFadeEnd="fadeEnd",e.PageFadeStart="fadeStart",e.PageIndex="pageIndex",e.PageNumber="pageNumber",e.PageScalePercent="pageScalePercent",e.PageTrailLength="historyLength",e.PaletteFlagsVal="paletteFlagsVal",e.PaneIndex="paneIndex",e.ParamCtrlDisplayFlags="paramDisplayFlags",e.ParentZoneID="parentZoneId",e.PercentileParam="percentileParam",e.PrevValues="prevValues",e.PublishResultStringId="publishResultStringId",e.QRGBColor="qrgbColor",e.RangeDefaultN="rangeDefaultN",e.RangeN="rangeN",e.RankTypeIndex="rankTypeIndex",e.RenderComplexity="renderComplexityLimit",e.RowIndex="rowIndex",e.SelectedAuthSettingIndex="selectedAuthSettingIndex",e.SelectedFullScheduleIndex="selectedFullScheduleIndex",e.SelectedIncrScheduleIndex="selectedIncrScheduleIndex",e.SelectedPublishChoiceIndex="selectedPublishChoiceIndex",e.SelectedMemberCount="selectedMemberCount",e.ShapeID="shapeId",e.SheetUseCount="useCount",e.ShelfItemID="shelfItemId",e.SigFigs="sigFigs",e.SortAggIndex="sortAggIndvValues",e.SortColumnIndex="sortColumnIndex",e.SortDirectionIndex="sortDirectionIndex",e.SortFieldIndex="sortFieldIndex",e.StartIndex="startIndex",e.StartOfWeek="startOfWeek",e.StoreId="storeId",e.StoryPointID="storyPointId",e.TableCalcTypeIndex="tableCalcTypeIndex",e.TableCalcTypesUsed="tableCalcTypesUsed",e.TemplateIndex="templateIndex",e.TileCount="tileCount",e.TimeoutSeconds="timeoutSeconds",e.TopN="topN",e.TotalNumberOfItemsInSet="totalNumberOfItemsInSet",e.TotalMemberCount="totalMemberCount",e.Transparency="colorTransparencyValue",e.TupleID="tupleId",e.UIndex="uindex",e.UndoPosition="undoPosition",e.UnsignedWidth="uw",e.UnsignedWidthBottom="uwb",e.UnsignedWidthLeft="uwl",e.UnsignedWidthRight="uwr",e.UnsignedWidthTop="uwt",e.ValueIndex="valueIndex",e.ValueInt="valueInt",e.WorldOffset="worldOffset",e.XDuplicateIndex="xDuplicateIndex",e.XIndex="xIndex",e.YDuplicateIndex="yDuplicateIndex",e.YIndex="yIndex",e.ZoneID="zoneId",e.ZoneZOrder="zoneZOrder",e.ComponentID="componentId",e.NonThreadPoolUseCount="nonThreadPoolUseCount",e.AddressingIndices="addressingIndices",e.AddressingInvalidIndices="addressingInvalidIndices",e.ChildZoneIds="childZoneIds",e.ColorList="colorList",e.DuplicateIndices="duplicateIndices",e.FilterAddIndices="filterAddIndices",e.FilterIndices="filterIndices",e.FilterLevelAdd="filterLevelAdd",e.FilterLevelRemove="filterLevelRemove",e.FilterLevels="filterLevels",e.FilterRemoveIndices="filterRemoveIndices",e.FixedValues="fixedValues",e.HierarchyMemberIdList="hierarchyMemberIdList",e.InvalidIndices="invalidIndices",e.ItemIndices="itemIndices",e.LineTupleIDs="lineTupleIds",e.ObjectIDs="objectIds",e.PageIndices="pageIndices",e.QRGB="qrgbList",e.QRGBColors="qrgbColors",e.RefLineID="reflineId",e.ShapeIDs="shapeIds",e.ShelfSelection="shelfSelection",e.StoryPointIDs="storyPointIds",e.TupleIDs="tupleIds",e.Widths="widths",e.UintMap="uintMap",e.Alpha="alpha",e.Angle="angle",e.BreakPointValue="breakPointValue",e.DevicePixelRatio="devicePixelRatio",e.Distance="distance",e.FloatX="floatX",e.FloatY="floatY",e.FogDesaturation="fogDesaturation",e.MarkScale="markScale",e.MarkSizeInPixelUnits="markSizeInPixelUnits",e.PointSize="pointSize",e.StrokeWidth="strokeWidth",e.TextRegionOrientation="orientation",e.TransformAngle="transformAngle",e.ZoomLevel="zoomLevel",e.OldZoomLevel="oldZoomLevel",e.NewZoomLevel="newZoomLevel",e.AspectRatio="aspectRatio",e.BottomPrintMargin="bottomPrintMargin",e.EarthRadius="earthRadius",e.FloatHeight="floatHeight",e.FloatLeft="floatLeft",e.FloatRadius="floatRadius",e.FloatTop="floatTop",e.FloatWidth="floatWidth",e.LeftPrintMargin="leftPrintMargin",e.MapCenterLatitude="mapCenterLatitude",e.MapCenterLongitude="mapCenterLongitude",e.MapDisplayScale="mapDisplayScale",e.MapMaxStretch="mapMaxStretch",e.MapMaxZoom="mapMaxZoom",e.MapMinShrink="mapMinShrink",e.MapMinZoom="mapMinZoom",e.MapRequestZoom="mapRequestZoom",e.MapWashout="mapWashout",e.MaxLatitude="maxLatitude",e.MaxLongitude="maxLongitude",e.MinLatitude="minLatitude",e.MinLongitude="minLongitude",e.RightPrintMargin="rightPrintMargin",e.TopPrintMargin="topPrintMargin",e.UIAutomationMaximum="uiAutomationMaximum",e.UIAutomationMinimum="uiAutomationMinimum",e.UIAutomationOffset="uiAutomationOffset",e.UnitDivisor="unitDivisor",e.UnitTransition="unitTransition",e.AutomaticDrillIdx="automaticDrillIdx",e.DestinationBox="destBox",e.LowerEnd="lowerEnd",e.OppositeAxis="oppositeAxis",e.PointsF="pointsF",e.SourceBox="sourceBox",e.TransformOffset="transformOffset",e.TransformScale="transformScale",e.UpperEnd="upperEnd",e.FloatMap="floatMap",e.BGSS="betweenGroupSumOfSquares",e.ConfidenceLevel="confidenceLevel",e.ConfidencePercentage="confidencePercentage",e.DoubleLeft="doubleLeft",e.DoubleTop="doubleTop",e.DoubleValue="doubleValue",e.DoubleX="doubleX",e.DoubleY="doubleY",e.FStatistic="fStatistic",e.FilterRangeMax="filterRangeMax",e.FilterRangeMin="filterRangeMin",e.GeographicSearchCandidateScore="geographicSearchCandidateScore",e.HeightD="height",e.InflectionFraction="inflectionFraction",e.InflectionValue="inflectionValue",e.MSE="meanSquaredError",e.MSM="meanSquaredModel",e.MapScaleMarginOfError="mapScaleMarginOfError",e.MarkSize="markSize",e.MaxMarkSize="maxMarkSize",e.MinMarkSize="minMarkSize",e.NotchPosition="notchPosition",e.NotchValue="notchValue",e.PValue="pValue",e.PercentDimensions="percentDimensions",e.PercentGroups="percentGroups",e.PercentMeasures="percentMeasures",e.PercentParameters="percentParameters",e.RSquared="rSquared",e.SSE="sumSquaredError",e.SSM="sumSquaredModel",e.StandardError="standardError",e.TSS="totalSumOfSquares",e.WGSS="withinGroupSumOfSquares",e.WidthD="width",e.ZoomFactor="zoomFactor",e.CoefficientPValueVec="coefficientPValueVector",e.CoefficientStdErrVec="coefficientStdErrorVector",e.CoefficientTValueVec="coefficientTValueVector",e.CoefficientVec="coefficientVector",e.FStatisticVec="trendLineFStatisticVector",e.Factors="factors",e.MSEVec="meanSquaredErrorVector",e.Means="means",e.PValueVec="pValueVector",e.Percentages="percentages",e.Percentiles="percentiles",e.SSEVec="sumSquaredErrorVector",e.StDevs="stdev",e.UnscaledMeans="unscaledMeans",e.DeltaTimeMs="deltaTimeMs",e.ExtractHistoryRowCount="extractRowCount",e.ExtractHistoryRowsRemoved="extractRowsRemoved",e.ExtractsSize="extractsSize",e.OldExtractSize="oldExtractSize",e.RowsInserted="rowsInserted",e.SampleSize="sampleSize",e.SampleSpace="sampleSpace",e.ThreadPoolUseCount="threadPoolUseCount",e.ActionId="actionId",e.AxisColumn="axisColumn",e.BaseColumnName="baseColumnName",e.BreakPointFieldName="breakPointFieldName",e.PairedFieldName="pairedFn",e.FieldNameAllowEmpty="fieldNameAllowEmpty",e.FieldNameDisAgg="fnDisagg",e.FieldNameLocal="fieldNameLocal",e.FieldNamePrev="fnPrev",e.FieldNameSource="fnSource",e.FieldNameTarget="fnTarget",e.FieldNameX="fnX",e.FieldNameY="fnY",e.FieldToSort="fieldToSort",e.GlobalFieldName="globalFieldName",e.HierarchyName="hierarchyName",e.InvalidAggFieldName="invalidAggFieldName",e.InvalidFieldName="invalidFieldName",e.LimitParameterName="limitParameterName",e.LocalBaseColumnName="localBaseColumnName",e.MeasureName="measureName",e.NestedCalcField="nestedCalcFn",e.ParameterName="parameterName",e.ReferenceParam="referenceParam",e.ReplacementFieldName="replacementFieldName",e.RHSTableAlias="rhsTableAlias",e.SortMeasureName="sortMeasureName",e.UniqueName="uniqueName",e.ValueColumn="valueColumn",e.PairedValueColumn="pairedValueColumn",e.SourceFieldName="refreshableParameterFieldName",e.ActionIds="actionIds",e.AddressingValues="addressingValues",e.AllColumns="allColumns",e.AtTheLevelValues="atTheLevelValues",e.AutomaticDrillFieldName="automaticDrillFieldName",e.BlendingFieldCandidates="blendingFieldCandidates",e.Columns="columns",e.CurrentBlendingFields="currentBlendingFields",e.DimensionsToSort="dimensionsToSort",e.DrillFieldVector="drillFieldVector",e.EncodingFieldVector="encodingFieldVector",e.FieldVector="fieldVector",e.FilterFields="filterFields",e.LODFieldVector="lodFieldVector",e.LegendColumns="legendColumns",e.LegendNames="legendNames",e.LevelNames="levelNames",e.NodeColumns="nodeColumns",e.PageFields="pageFields",e.ParamValues="paramValues",e.RefLineFields="reflineFields",e.ReferencedColumns="referencedColumns",e.RelatedFieldNames="relatedFieldNames",e.RemoveActionResults="removeActionResults",e.ResponseVector="responseVector",e.RestartEveryValues="restartEveryValues",e.ResultFields="resultFields",e.SortFieldValues="sortFieldValues",e.UniqueFieldVector="uniqueFieldVector",e.XFields="xFields",e.YFields="yFields",e.ConnectionFullName="connectionFullName",e.ConnectionFullNames="connectionFullNames",e.AnchorValue="anchorValue",e.BoundDataValue="boundDataValue",e.DataValue="dataValue",e.DataValueIncrement="dataValueIncrement",e.DataValueLowerX="dataValueLowerX",e.DataValueLowerY="dataValueLowerY",e.DataValueUpperX="dataValueUpperX",e.DataValueUpperY="dataValueUpperY",e.DefaultDataValue="defaultDataValue",e.EffectiveStartDate="effectiveStartDate",e.EffectiveEndDate="effectiveEndDate",e.MaxDataValue="maxDataValue",e.MinDataValue="minDataValue",e.ValidatedDataValue="validatedDataValue",e.BinSize="binSize",e.LimitCount="limitCount",e.DataValueList="dataValueList",e.FieldDisplayItem="fieldDisplayItem",e.FieldDisplayList="fieldDisplayList",e.FieldCaptionPair="fieldCaptionPair",e.FieldCaptionPairs="fieldCaptionPairs",e.ParameterCaptionPairs="parameterCaptionPairs",e.VaryingAttributeDimensions="varyingAttributeDimensions",e.FieldCaptionPairState="fieldCaptionPairState",e.FieldCaptionPairStates="fieldCaptionPairStates",e.DatasourceCaptionPair="datasourceCaptionPair",e.DatasourceCaptionPairs="datasourceCaptionPairs",e.SheetNameInfoPair="sheetNameInfoPair",e.SheetNameInfoPairs="sheetNameInfoPairs",e.BGActiveColor="bgActiveColor",e.BGColor="bgColor",e.BGRestColor="bgRestColor",e.BorderColor="borderColor",e.BorderColorBottom="borderColorBottom",e.BorderColorLeft="borderColorLeft",e.BorderColorRight="borderColorRight",e.BorderColorTop="borderColorTop",e.ButtonObjectBackgroundColor="buttonObjectBackgroundColor",e.Color="color",e.Color1="color1",e.Color2="color2",e.DefaultColor="defaultColor",e.DistanceFontColor="distanceFontColor",e.FillColor="fillColor",e.FogColor="fogColor",e.HeaderColor="headerColor",e.HighlightBGColor="highlightBgColor",e.HighlightTextColor="highlightTextColor",e.HoverColor="hoverColor",e.HyperlinkColor="hyperlinkColor",e.MapAttributionFill="mapAttributionFill",e.MapAttributionTextColor="mapAttributionTextColor",e.MapPaneBackgroundFill="mapPaneBackgroundFill",e.MapScaleBorderColor="mapScaleBorderColor",e.MapScaleColor="mapScaleColor",e.MapWaitTileFill="mapWaitTileFill",e.MarkColor="markColor",e.NavArrowDisabledColor="navArrowDisabledColor",e.NavArrowHoverColor="navArrowHoverColor",e.NavArrowIdleColor="navArrowIdleColor",e.NavArrowPressedColor="navArrowPressedColor",e.PaneColor="paneColor",e.PressColor="pressColor",e.ResizeBorderColor="resizeBorderColor",e.SelectBGColor="selectBgColor",e.SelectionTextColor="selectionTextColor",e.SwatchBackgroundColor="swatchBgColor",e.SwatchBorderColor="swatchBorderColor",e.TabColor="tabColor",e.Colors="colors",e.ColorMap="colorMap",e.Pixmap="pixmap",e.Image="image",e.OverlayImage="overlayImage",e.IconImage="iconImage",e.ImageList="imageList",e.ImageMap="imageMap",e.UUID="uuid",e.DashboardObjectHandle="dashboardObjectHandle",e.DashboardObjectNewStateHandle="dashboardObjectNewStateHandle",e.DashboardObjectCurrentStateHandle="dashboardObjectCurrentStateHandle",e.DashboardObjectBatchID="dashboardObjectBatchId",e.Nanoseconds="nanoseconds",e.Microseconds="microseconds",e.Milliseconds="milliseconds",e.TimeoutS="timeoutS",e.Minutes="minutes",e.Hours="hours",e.CardType="cardType",e.DocParameterID="type",e.ArgumentParam="argumentParam",e.ArgumentParams="argumentParams",e.ActionType="actionType",e.AnnotateEnum="annotateEnum",e.JoinType="joinType",e.SupportedJoinTypes="supportedJoinTypes",e.Rounding="roundingEnum",e.BodyType="bodyType",e.LineEnd="lineEndEnum",e.LineEndSize="lineEndSizeEnum",e.BrushSpecialFields="specialFields",e.CellSizeChange="cellSizeChange",e.CellType="cellType",e.ConnectionAttemptResult="connectionAttemptResult",e.ConnectionErrorStage="connectionErrorStage",e.ConnectionErrorType="connectionErrorType",e.DataServerConnectionResult="dsConnectionResult",e.DropWhen="dropWhen",e.DropType="dropType",e.EncodingType="encodingType",e.DropdownEncodingType="dropdownEncodingType",e.EncodingTypes="encodingTypes",e.FieldOrderType="fieldOrderType",e.FilterIconType="filterIconType",e.FilterIconTypes="filterIconTypes",e.FloatingToolbarVis="toolbarVisibility",e.FolderRole="folderRole",e.LegendType="legendType",e.ForecastModelType="forecastModelType",e.ForecastTrendType="forecastTrendType",e.ForecastSeasonType="forecastSeasonType",e.ForecastRangeType="forecastRangeType",e.ForecastStatus="forecastStatus",e.SheetForecastStatus="sheetForecastStatus",e.PDForecastStatusList="paneDescriptorForecastStatusList",e.ForecastColumnType="forecastColumnType",e.DataScaling="dataScaling",e.GetFilterItemsJsonResponse="getFilterItemsJsonResponse",e.FilterSearchJsonResponse="filterSearchJsonResponse",e.FilterSearchWithIndexJsonResponse="filterSearchWithIndexJsonResponse",e.FilterShowChildrenJsonResponse="filterShowChildrenJsonResponse",e.HAlignment="horizontalLabelAlignment",e.JoinValidationError="joinValidationError",e.NameConflictResolution="nameConflictResolution",e.LabelDir="labelDirection",e.LabelAlign="labelAlignment",e.LabelWrap="labelWrap",e.WrapMode="wrapMode",e.MarkEnum="markEnum",e.PercentMode="percentageMode",e.ReferenceOptionsSet="referenceOptionsSet",e.ReferenceOptionsSets="referenceOptionsSets",e.RankType="rankType",e.RankTypeValues="rankTypeValues",e.SpecialValuesMode="specialValuesMode",e.VAlignment="verticalLabelAlignment",e.ColorMode="colorMode",e.MarkLabelsMode="markLabelsMode",e.MarkLabelsScope="markLabelsScope",e.MarkLabelsVisibility="markLabelsVisibility",e.PrimitiveType="primitiveType",e.ActualPrimitiveType="actualPrimitiveType",e.PrimitiveTypes="primitiveTypes",e.ShapeType="shapeType",e.SortIndicatorType="sortIndicatorType",e.ShelfSortIndicatorState="shelfSortIndicatorState",e.SortType="sortBy",e.SortEnd="sortEnd",e.StackingMode="stackingMode",e.StyleTheme="styleTheme",e.TrendLineFitType="fitType",e.UpdateScope="updateScope",e.ParameterCtrlDisplayMode="paramDisplayMode",e.ParameterCtrlDisplayFlag="paramDisplayFlag",e.Included="included",e.CommandsType="commandsType",e.ParameterDomainType="parameterDomainType",e.FilterDomainType="filterDomainType",e.FilterDomains="filterDomains",e.FilterDomainTypeCaption="filterDomainTypeCaption",e.FilterDomainTypeCaptions="filterDomainTypeCaptions",e.CategoricalFilterType="categoricalFilterType",e.QuantitativeFilterType="quantitativeFilterType",e.FilterPatternType="filterPatternType",e.FilterConditionType="filterConditionType",e.FiltersPresetType="filtersPresetType",e.FiltersRangeType="filtersRangeType",e.DateRangeType="dateRangeType",e.PageFlag="pageFlag",e.MarksToTrail="marksToTrail",e.TrailType="trailType",e.ChangePageDirection="changeTo",e.AnimationControl="animationControl",e.LinePattern="linePattern",e.LineCap="lineCap",e.LineJoin="lineJoin",e.LineAlignment="lineAlignment",e.FillMode="fillMode",e.CursorShape="cursorShape",e.ShowMeCommandType="showMeCommandType",e.ShelfIconType="shelfIconType",e.ShelfIconTypes="shelfIconTypes",e.ItemDrawStyle="itemDrawStyle",e.ScaleMode="pageScaleMode",e.PageOrientationOption="pageOrientationOption",e.PageSizeOption="pageSizeOption",e.SortRegionType="sortRegion",e.LegendItemLayout="legendLayout",e.LegendItemOrder="legendOrder",e.VizImageRegion="r",e.LegacyMenuName="legacyMenuName",e.LegacyMenuState="legacyMenuState",e.LegacyMenuStateList="legacyMenuStates",e.DimensionType="dimensionType",e.LayoutType="layoutType",e.ShelfType="shelfType",e.LastSelectionShelf="lastShelf",e.SchemaViewerDataSourceType="schemaDatasourceType",e.SchemaItemType="schemaItemType",e.HSMSelectionMode="hsmSelectionMode",e.HSMDefaultMemberType="hsmDefaultMemberType",e.HSMNotificationType="hsmNotificationType",e.HSMSelectionRequestType="hsmSelectionRequestType",e.HSMMemberSelectRequestType="hsmMemberSelectRequestType",e.PivotStrategy="pivotStrategy",e.AliasType="aliasType",e.DSODimensionSortOrder="dsoDimensionSortOrder",e.DSOMeasureSortOrder="dsoMeasureSortOrder",e.DSOSortOrder="dsoSortOrder",e.VTAggType="vtAggregation",e.FieldTypeIconSet="fieldIconSet",e.VisualPart="visualPart",e.DefaultMapToolEnum="defaultMapToolEnum",e.DefaultMapUnitEnum="defaultMapUnitEnum",e.SceneModelDetail="sceneModelDetailEnum",e.SceneModelHitType="sceneModelHitType",e.HitTestStyle="hitTestStyle",e.MarkState="markState",e.SheetType="sheetType",e.DragSource="dragSource",e.DropTarget="dropTarget",e.ShelfDropAction="shelfDropAction",e.ShelfDropContext="shelfDropContext",e.FilterSelectionTracking="filterSelectionTracking",e.FilterUpdateType="filterUpdateType",e.FilterUpdateQualifierType="filterUpdateQualifierType",e.ParameterError="parameterError",e.SelectionType="selectionType",e.SelectionUpdateType="selectionUpdateType",e.SelectOptions="selectOptions",e.WhitespaceSelectionBehavior="whitespaceSelectionBehavior",e.AxisOrientation="axisOrientation",e.DecimalMode="decimalMode",e.ActivationMethod="activation",e.SourceType="sourceType",e.OnClear="onClear",e.MergeOrSplit="mergeOrSplit",e.FilterMode="filterMode",e.FilterType="filterType",e.DashboardObjectType="dashboardObjectType",e.ZoneType="zoneType",e.ZoneLayoutType="zoneLayoutType",e.QuickTableCalcType="quickTableCalcType",e.TableCalcCommandType="tableCalcCommandType",e.TableCalcAddressType="tableCalcAddressType",e.MarkLayoutPrimitive="markLayoutPrimitive",e.MarkLayoutVizType="markLayoutVizType",e.MarkAlignment="markAlignment",e.ModifyZoneZOrderType="modifyZoneZOrderType",e.TextRegionHAlign="halign",e.TextRegionVAlign="valign",e.PathElement="pathElement",e.PathElements="pathElements",e.RenderMode="renderMode",e.FontStyle="fontStyle",e.FontWeight="fontWeight",e.TextDecoration="textDecoration",e.BorderStyle="borderStyle",e.BorderStyleTop="borderStyleTop",e.BorderStyleRight="borderStyleRight",e.BorderStyleBottom="borderStyleBottom",e.BorderStyleLeft="borderStyleLeft",e.FloatingToolbarVisibility="floatingToolbarVisibility",e.GeoSearchVisibility="geographicSearchVisibility",e.MapScaleVisibility="mapScaleVisibility",e.VizNavigationSetting="vizNavigationSetting",e.AutoDrillVisibility="autoDrillVisibility",e.ClientUIMetricType="clientUiMetricType",e.SheetScrollDirection="sheetScrollDirection",e.SizeMode="sizeMode",e.PerspectiveAggregate="perspectiveAggregation",e.StyleAttribute="styleAttribute",e.StyleAttributes="styleAttributes",e.StyleElement="styleElement",e.StyleDataClass="styleClass",e.StyleFieldScope="styleScope",e.FormatControlType="formatType",e.LineInterpolationMode="lineInterpolationMode",e.MarkersMode="markersMode",e.AppConfigEnum="appConfigEnum",e.ColorPaletteType="colorPaletteType",e.ExtractType="extractType",e.ActivityDisposition="activityDisposition",e.ActivityResult="activityResult",e.TooltipMode="tooltipMode",e.RuntimeOutput="runtimeOutput",e.AnalyticsObjectType="analyticsObjectType",e.UIAutomationStatus="uiAutomationStatus",e.TableViewDataType="tableViewerDataType",e.UnitsFormat="unitsFormat",e.FilterLimitType="filterLimitType",e.AnimationScenarioType="animationScenarioType",e.DistributionSelectedType="distributionSelectedType",e.DistributionType="distributionType",e.TranslatedDistributionType="translatedDistributionType",e.TranslatedDistributionTypes="translatedDistributionTypes",e.RefLineFormulaGroup="reflineFormulaGroup",e.ReferenceLineScopeType="referenceLineScopeType",e.StDevType="stdevType",e.ShowBounds="showBounds",e.BoxplotWhiskerType="boxplotWhiskerType",e.ReferenceLineLabelType="referenceLineLabelType",e.PairedReferenceLineLabelType="pairedReferenceLineLabelType",e.ConfidenceIntervalSelectedState="confidenceIntervalSelectedState",e.ConfidenceIntervalState="confidenceIntervalState",e.TranslatedLabelType="translatedLabelType",e.ReferenceLineValidLabelTypes="validReferenceLineLabelTypes",e.ReferenceLineFormulaType="referenceLineFormulaType",e.PairedReferenceLineFormulaType="pairedReferenceLineFormulaType",e.TranslatedFormulaType="translatedFormulaType",e.ReferenceLineValidFormulaTypes="validReferenceLineFormulaTypes",e.ReferenceLineValidPairedFormulaTypes="validReferenceLinePairedFormulaTypes",e.TranslatedConfidenceIntervalState="translatedConfidenceIntervalState",e.TranslatedConfidenceIntervalStates="translatedConfidenceIntervalStates",e.TranslatedStDevType="translatedStdevType",e.TranslatedStDevTypes="translatedStdevTypes",e.ReferenceLineLODCalcType="referenceLineLodCalcType",e.ValueDomainType="valueDomainType",e.ValueDomainTypes="valueDomainTypes",e.OperationType="operationType",e.OperationTypes="operationTypes",e.ConnectionTypeCategory="connectionTypeCategory",e.ConnectionTypeGroup="connectionTypeGroup",e.CommandRedirectType="commandRedirectType",e.CustomSplitMode="customSplitMode",e.CustomSplitSeparatorType="customSplitSeparatorType",e.LevelSelectionState="levelSelectionState",e.LevelSelectionStates="levelSelectionStates",e.SourceDestIcon="sourceDestIcon",e.LegendLayout="pageLegendLayout",e.ImagesEditResultCode="imagesEditResultCode",e.CalculationContext="calculationContext",e.WorkgroupPublishErrorType="workgroupPublishErrorType",e.IsParameter="isParameter",e.AddressingState="addressingState",e.AllPagesState="allPagesState",e.AtTheLevelState="atTheLevelState",e.ComputeCompoundedRateState="computeCompoundedRateState",e.CustomNullIfIncompleteState="customNullIfIncompleteState",e.NestedCalcsState="nestedCalcsState",e.RankTypeState="rankTypeState",e.ReferenceOptionsState="referenceOptionsState",e.RestartEveryState="restartEveryState",e.SortAggState="sortAggState",e.SortState="sortState",e.TableCalcTypeState="tableCalcTypeState",e.TableCalcAssistanceWidgetState="tableCalcAssistanceWidgetState",e.CalcNestingLevel="calcNestingLevel",e.DataProviderType="dataProviderType",e.HeuristicCommandReinterpretation="heuristicCommandReinterpretation",e.ExtractRefreshStatus="extractRefreshStatus",e.RichTextEditorWidgetKey="richTextEditorWidgetKey",e.RichTextWidgetKeys="richTextWidgetKeys",e.TypeOfFormatItem="typeOfFormatItem",e.TypeOfFormatContainer="typeOfFormatContainer",e.TypeOfFormatControl="typeOfFormatControl",e.FormatWidgetKey="formatWidgetKey",e.ColorSwatchType="formatColorSwatchType",e.PickerType="pickerType",e.ExtractHistoryRefreshType="extractHistoryRefreshTypeEnum",e.AxisFoldState="axisFoldState",e.TickMarkSpacingUnits="tickSpacingUnits",e.TickMarkState="tickMarkState",e.AxisRangeType="axisRangeType",e.ScaleType="scaleType",e.DashboardDeviceLayout="dashboardDeviceLayout",e.ActivateDeviceLayout="activateDeviceLayout",e.DashboardDeviceLayouts="dashboardDeviceLayouts",e.DeviceSource="deviceSource",e.DashboardSizingDimension="dashboardSizingDimension",e.GridOverlayMode="gridOverlayMode",e.DashboardSizingMode="dashboardSizingMode",e.FlipboardNavType="flipboardNavType",e.FieldPickerDialogUseCase="fieldPickerDialogUseCase",e.StartOfWeekEnum="startOfWeekEnum",e.StartOfFiscalYear="startOfFiscalYear",e.TotalsInclusionValue="totalsInclusionValue",e.FormatCode="formatCode",e.FindType="findType",e.PerspectiveType="perspectiveType",e.GeometryType="geometryType",e.PaneLabelComposition="paneLabelComposition",e.WarningType="warningType",e.UIMode="uiMode",e.MenuItemId="menuItemId",e.CommandReturn="commandReturn",e.LegacyPresModel="legacyPresModel",e.PresentationModel="presModelHolder",e.CommandParameters="commandToRunParams",e.Event="eventContainer",e.LineStyle="lineStyle",e.StrokeStyle="strokeStyle",e.Schema="schema",e.StartTuple="startTuple",e.EndTuple="endTuple",e.Tuple="tuple",e.Tuples="tuples",e.CustomDomainTuples="customDomainTuples",e.UpdatedTuples="updatedTuples",e.Table="table",e.AliasedValue="valueAlias",e.FirstAliasedValue="firstAlisedValue",e.MaximumRange="maximumRangeValue",e.MinimumRange="minimumRangeValue",e.SecondAliasedValue="secondAlisedValue",e.AliasedSelectionList="aliasedSelectionList",e.AliasedValues="valuesAliases",e.VerboseAliasedRangeMax="verboseAliasedRangeMax",e.VerboseAliasedValue="verboseAliasedValue",e.MultiBucket="xValues",e.PageName="pageName",e.Selector="selector",e.PaneId="paneId",e.PaneIds="paneIds",e.ImageRegionInfo="vizRegionRect",e.ImageRegionInfoList="vizRegionRectList",e.VisualID="visualId",e.VisualIDPM="visualIdPresModel",e.InvalidSheets="invalidSheets",e.VisualIDPMs="visualIds",e.SheetPathPM="sheetPath",e.CapturedSheetPM="capturedSheetPm",e.CurrentSheetPM="currentSheetPm",e.DashboardPM="dashboardPm",e.NewSheetPM="newSheetPm",e.SheetNamePM="sheetNamePm",e.SheetPM="sheetPm",e.SourceDashboardPM="sourceDashboardPm",e.SourceSheetPM="sourceSheetPm",e.TargetSheetPM="targetSheetPm",e.WorksheetPM="worksheetPm",e.ModifiedSheets="modifiedSheets",e.DataColumn="dataColumn",e.DataColumns="dataColumns",e.Addresses="addresses",e.EncodingColumns="encodingColumns",e.TextRunColumns="textRunColumns",e.TextStyleColumns="textStyleColumns",e.NamedDataColumn="namedDataColumn",e.NamedDataColumns="namedDataColumns",e.DataTable="dataTable",e.ActionSpecification="actionSpec",e.Column="columnContext",e.SetFunction="setFunction",e.SetFunctions="setFunctions",e.VisualProfileShowMe="vpsm",e.DataSourcePtr="datasourcePtr",e.WorkgroupConnection="workgroupConnection",e.Authenticator="authenticator",e.UpgradeAttr="upgradeAttr",e.ExtractAttr="extractAttr",e.RefreshAttr="refreshAttr",e.ContextSpecificationData="contextSpecificationData",e.SchemaViewerSelector="schemaViewerSelector",e.LegendItems="legendItems",e.LegendItem="legendItem",e.SourceItem="sourceItem",e.DestItem="destItem",e.IQuickSortState="quickSortState",e.AppBuildDate="appBuildDate",e.ForecastDateRangeEnd="forecastDateRangeEnd",e.ForecastDateRangeStart="forecastDateRangeStart",e.LastModified="lastModified",e.SearchDomainPtr="searchDomainPtr",e.ResultsDomainPtr="resultsDomainPtr",e.Actions="actions",e.SRCommands="selectionRelaxationCommands",e.Commands="commands",e.DataTypeCommands="datatypeCommands",e.MultiSelectCommands="multiselectCommands",e.NonVizCommands="nonVizCommands",e.QuickFilterCommands="quickFilterCommands",e.ShowMeCommands="showMeCommands",e.SortIndicatorMenu="sortIndicatorMenu",e.StandardCommands="standardCommands",e.VizCommands="vizCommands",e.ZoneChromeCommands="zoneChromeCommands",e.CommandItem="commandItem",e.CommandItems="commandItems",e.Command="simpleCommandModel",e.AddCommand="addSimpleCommandModel",e.RemoveCommand="removeSimpleCommandModel",e.AcceptCommand="acceptSimpleCommandModel",e.DeclineCommand="declineSimpleCommandModel",e.DropCommand="dropCommandModel",e.EditCaptionCommand="editCaptionCommandModel",e.FontCommand="fontCommandModel",e.LineStyleCommand="lineStyleCommandModel",e.FormatCommand="formatCommandModel",e.DestructorCommand="destructorCommand",e.ClearFormatCommand="clearFormatCommandModel",e.RichTextCommand="richTextCommandModel",e.SortIndicatorCommand="sortIndicatorCommand",e.ReleaseStoreCommand="releaseStoreCommand",e.ConfirmationCommand="confirmationCommand",e.CommandList="commandList",e.ParameterCtrl="parameterControl",e.ParameterCtrls="parameterControls",e.PageModel="pageModel",e.PageTrailOptions="pageTrailOptions",e.Field="field",e.FieldList="fieldList",e.DimensionsFieldList="dimensionsFieldList",e.MeasuresFieldList="measuresFieldList",e.SetsFieldList="setsFieldList",e.ParametersFieldList="parametersFieldList",e.FieldColumn="column",e.FieldColumnList="columnList",e.StructuredMeasure="structuredMeasure",e.StructuredMeasureList="structuredMeasureList",e.Level="level",e.Parameter="parameter",e.BaseDimension="baseDimension",e.Dimension="dimension",e.AttributeDimensionList="attributeDimensionList",e.AttributeDimension="attributeDimension",e.AttributeAttributeDimensionList="attributeAttributeDimensionList",e.StandardDimension="standardDimension",e.RelationalTable="relationalTable",e.DrillPath="drillPath",e.FieldFolder="fieldFolder",e.FieldFolderNew="fieldFolderNew",e.Group="group",e.UserDefinedAttributeList="userDefinedAttributeList",e.Hierarchy="hierarchy",e.HierarchyList="hierarchyList",e.HierarchyMemberSelectedState="hierarchyMemberSelectedState",e.HierarchySelectionChanges="hierarchySelectionChanges",e.DisplayFolder="displayFolder",e.DisplayFolderList="displayFolderList",e.DataSourceLayout="dataSourceLayout",e.BaseDataSource="baseDataSource",e.BaseDataSources="baseDataSources",e.DataSource="dataSource",e.DataSources="dataSources",e.SchemaViewerDataSource="schemaViewerDataSource",e.SchemaViewerParameterDataSource="schemaViewerParameterDataSource",e.SchemaViewerDataSources="schemaViewerDataSources",e.BaseDataSchema="baseDataSchema",e.DataSchema="dataSchema",e.SchemaViewerDataSchema="schemaViewerDataSchema",e.SchemaViewerMenuType="schemaViewerMenuType",e.SheetListItem="sheetListItem",e.SheetListItems="sheetListItems",e.SheetList="sheetList",e.SizeModeOption="sizeModeOption",e.SizeModeOptions="sizeModeOptions",e.DashboardSizeControl="dashboardSizeControl",e.DeviceLayoutInfoItem="deviceLayoutInfoItem",e.DeviceLayoutInfoItems="deviceLayoutInfoItems",e.DeviceLayoutInfoList="deviceLayoutInfoList",e.SpecializedDeviceLayoutItem="specializedDeviceLayoutItem",e.SpecializedDeviceLayoutItems="specializedDeviceLayoutItems",e.SpecializedDeviceLayoutList="specializedDeviceLayoutList",e.SizeItem="sizeItem",e.SizeItems="sizeItems",e.DeviceSizesList="deviceSizesList",e.PresetSizesList="presetSizesList",e.SizeItemList="sizeItemList",e.SubstitutionKeyword="substitutionKeyword",e.SubstitutionKeywords="substitutionKeywords",e.SubstitutionKeywordSubList="substitutionKeywordsSublist",e.SubstitutionKeywordSubLists="substitutionKeywordSublists",e.SubstitutionKeywordList="substitutionKeywordsList",
e.DeviceZoneListItem="deviceZoneListItem",e.DeviceZoneListItems="deviceZoneListItems",e.DeviceZoneList="deviceZoneList",e.ZoneSnapLineListItem="snapLineListItem",e.OuterHorizontalSnapLines="outerHorizontalSnapLines",e.OuterVerticalSnapLines="outerVerticalSnapLines",e.InnerHorizontalSnapLines="innerHorizontalSnapLines",e.InnerVerticalSnapLines="innerVerticalSnapLines",e.ZoneSnapLineList="snapLineList",e.DashboardZoneHierarchy="dashboardZoneHierarchy",e.DeviceZoneVisibilityListItem="deviceZoneVisibilityListItem",e.DeviceZoneVisibilityListItems="deviceZoneVisibilityListItems",e.DeviceZoneVisibilityList="deviceZoneVisibilityList",e.WorksheetDataSchema="worksheetDataSchema",e.WorksheetDataSchemaMap="worksheetDataSchemaMap",e.Shelf="shelf",e.ShelfDetail="shelfDetail",e.ShelfList="shelfList",e.ShelfItem="shelfItem",e.ShelfItems="shelfItems",e.Shelves="shelves",e.FieldEncoding="fieldEncoding",e.FieldEncodings="fieldEncodings",e.UberTip="uberTip",e.AnalyticsObjectDragInfo="analyticsObjectDragInfo",e.TrendLine="trendLine",e.TrendLineDialog="trendLineDialog",e.TrendLineDescribePresModel="trendLineDescribePresModel",e.TrendLineAOVModelPresModel="trendLineAovModelPresModel",e.TrendLineAOVModelsPresModel="trendModelDescriptionVector",e.TrendLineLineCoefficientPresModel="trendLineLineCoefficient",e.TrendLineLineCoefficientsPresModel="trendLineLineCoefficientsPresModel",e.TrendLineLinesPresModel="trendLineLinesPresModel",e.TrendLineAOVPresModel="trendLineAnovaPresModel",e.ReferenceLine="referenceLine",e.ReferenceLines="referenceLines",e.PercentileEditDataValue="percentileEditDataValue",e.LimitEditDataValue="limitEditDataValue",e.ConfidenceLevelCombo="confidenceLevelCombo",e.DistributionQuantilesCombo="distributionQuantilesLevelCombo",e.PercentilesCombo="distributionPercentilesLevelCombo",e.NumericBinSizeCombo="numericBinSizeCombo",e.FieldPickerField="fieldPickerField",e.FieldPickerFields="fieldPickerFields",e.FieldPickerCombo="fieldPickerCombo",e.PairedFieldPickerCombo="pairedFieldPickerCombo",e.ReferenceLineEditorPresModel="referenceLineEditor",e.CloseDataSourceErrorDialogPresModel="closeDsErrorDialog",e.EditReferenceLine="editReferenceLine",e.EditReferenceBand="editReferenceBand",e.EditDistribution="editDistribution",e.DistributionPercentages="distributionPercentages",e.DistributionPercentiles="distributionPercentiles",e.DistributionQuantiles="distributionQuantiles",e.DistributionStandardDeviation="distributionStddev",e.SortIndicators="sortIndicators",e.SortIndicatorRegion="sortIndicatorRegion",e.SortIndicatorRegions="sortIndicatorRegions",e.SortIndicatorItem="sortIndicatorItem",e.SortIndicatorItems="sortIndicatorItems",e.BuilderConfig="builderConfig",e.SheetLayoutInfo="sheetLayoutInfo",e.AreaRect="areaRect",e.Border="borderRect",e.BoundsRect="boundsRect",e.ButtonRect="buttonRect",e.DragRect="dragRect",e.FocusRect="focusRect",e.ImageTileRect="tileRect",e.ItemRect="itemRect",e.LabelRect="labelRect",e.MarkRect="markRect",e.MarkTooltipRect="markTooltipRect",e.MenuButtonRect="menuButtonRect",e.OutRegionRect="outRegionRect",e.PaneRect="paneRect",e.PixelExtents="pixelExtents",e.RectMaxLabel="rectMaxLabel",e.RectMinLabel="rectMinLabel",e.RectRamp="rectRamp",e.RectTitle="rectTitle",e.RegionRect="regionRect",e.SelectionRect="selectionRect",e.UnusedRect="unusedRect",e.ZoneEdgeRect="zoneEdge",e.ZoneEdgeRectPix="zoneEdgePix",e.ZoneEdgeRectPp="zoneEdgePp",e.UIAutomationLinkRect="linkRect",e.Borders="borderRects",e.UIAutomationLinkRects="linkRects",e.DomainExtents="domainExtents",e.MapDomainExtents="mapDomainExtents",e.MapLatLongRect="mapLatLongRect",e.Center="center",e.CenterMarkLineBegin="centerMarkLineBegin",e.CenterMarkLineEnd="centerMarkLineEnd",e.DropLocation="dropLocation",e.EndPt="endPoint",e.GrabLocation="grabLocation",e.GridOrigin="gridOrigin",e.LassoSelectionPoint="lassoSelectionPoint",e.MenuLocation="menuLocation",e.MoveOffset="moveOffset",e.OverlayAnchor="overlayAnchor",e.PanAmount="panAmount",e.PanLocation="panLocation",e.PaneResolverLocation="paneResolverLocation",e.PixelExtentsOffset="extentsOffset",e.Point1="pt1",e.Point2="pt2",e.Point3="pt3",e.RegionPoint="regionPoint",e.ScrollOffset="scrollOffset",e.SelectAtPoint="selectAtPoint",e.SelectOffset="selectOffset",e.TargetPt="targetPoint",e.TextOrigin="textOrigin",e.TooltipAnchorPoint="tooltipAnchorPoint",e.TooltipOffset="tooltipOffset",e.VizLocation="vizLocation",e.ZoomAnchorPoint="zoomAnchorPoint",e.MenuAnchorPoint="menuAnchorPoint",e.OverlayAnchors="overlayAnchors",e.LassoSelection="lassoSelection",e.ScrollOffsetPoints="scrollOffsetPoints",e.RadialSelection="radialSelection",e.DomainOrigin="domainOrigin",e.FloatCenter="floatCenter",e.FloatPoint="floatPoint",e.ClientAvailableSpace="clientAvailableSpace",e.DashboardPortSize="dashboardPort",e.LegendSize="legendSize",e.StoryPortSize="storyPort",e.SwatchAreaSize="areaSize",e.SwatchImageSize="imageSize",e.ViewportSize="viewportSize",e.WorksheetPortSize="worksheetPort",e.ResizeEntity="resizeEntity",e.RowResizers="rowResizers",e.ColResizers="colResizers",e.ResizeInfoPresModel="resizeInfo",e.ServerSheet="serverSheet",e.ServerSheets="serverSheets",e.SheetInfo="sheetInfo",e.SheetsInfo="sheetsInfo",e.ServerWorkbook="serverWorkbook",e.PDFExportOptionsPresModel="pdfExport",e.ExportFileResultPresModel="pdfResult",e.PDFSheet="pdfSheet",e.SheetOptions="sheetOptions",e.ExportLayoutOptions="exportLayoutOptions",e.DataAlertConditionOperationType="dataAlertConditionOp",e.DataAlertDialogPresModel="dataAlertDialogPresModel",e.DataAlertMeasure="dataAlertMeasure",e.DataAlertMeasures="dataAlertMeasures",e.DataAlertConstantCondition="dataAlertConstantCondition",e.DataAlertDialogMode="dataAlertDialogMode",e.LightweightMapOptions="lightweightMapOptions",e.DataHighlighter="dataHighlighter",e.DataHighlighterItemSet="dataHighlighterItemSet",e.DataHighlighterItem="dataHighlighterItem",e.DataHighlighterItems="dataHighlighterItems",e.CategoricalLegendLayout="catLegendLayout",e.CategoricalLegend="categoricalLegend",e.CategoricalLegends="categoricalLegends",e.CategoricalColorLegend="colorLegend",e.ColorLegendItem="colorLegendItem",e.ColorLegendItems="colorLegendItems",e.CategoricalShapeLegend="categoricalShapeLegend",e.ShapeLegendItem="shapeLegendItem",e.ShapeLegendItems="shapeLegendItems",e.CategoricalHighlightLegend="categoricalHighlightLegend",e.HighlightLegendItem="highlightLegendItem",e.HighlightLegendItems="highlightLegendItems",e.CategoricalSizeLegend="categoricalSizeLegend",e.SizeLegendItem="sizeLegendItem",e.SizeLegendItems="sizeLegendItems",e.CategoricalMapLegend="categoricalMapLegend",e.QuantitativeColorLegend="quantitativeColorLegend",e.QuantitativeColorLegends="quantitativeColorLegends",e.QuantitativeLegendLayout="quantitativeLegendLayout",e.ServerRenderedLegend="serverRenderedLegend",e.CategoricalFilter="categoricalFilter",e.CategoricalFilterRelational="categoricalFilterRelational",e.CategoricalFilterMemberDomainPage="categoricalFilterMemberDomainPage",e.CategoricalFilterCacheInfo="categoricalFilterCacheInfo",e.CategoricalFilterPatternDisplay="categoricalFilterPatternDisplay",e.CategoricalFilterPatternUpdate="categoricalFilterPatternUpdate",e.CategoricalFilterConditionDisplay="categoricalFilterConditionDisplay",e.CategoricalFilterConditionUpdate="categoricalFilterConditionUpdate",e.CategoricalFilterLimitDisplay="categoricalFilterLimitDisplay",e.CategoricalFilterLimitUpdate="categoricalFilterLimitUpdate",e.CategoricalFilterNew="categoricalFilterNew",e.CategoricalFilterHierarchy="categoricalFilterHirerarchy",e.CategoricalFilterUpdate="categoricalFilterUpdate",e.CategoricalFilterRelationalState="categoricalRelationalState",e.CategoricalFilterRelationalUpdatedState="categoricalRelationalUpdatedState",e.CategoricalFilterRelationalDomainInfo="categoricalFilterRelationalDomainInfo",e.CategoricalFilterRelationalDisplay="categoricalFilterRelationalDisplay",e.ExpressionToken="expressionToken",e.ExpressionTokens="expressionTokens",e.FormulaValidation="formulaValidation",e.CaptionedFilterValue="captionedFilterValue",e.CaptionedRangeMin="captionedRangeMin",e.CaptionedRangeMax="captionedRangeMax",e.CaptionedAnchorDate="captionedAnchorDate",e.CaptionedFilterValueList="captionedFilterValueList",e.CategoricalFilterInfo="categoricalFilterInfo",e.QuantitativeFilterInfo="quantitativeFilterInfo",e.RelativeDateFilterInfo="relativeDateFilterInfo",e.RelativeDateFilterLabels="relativeDateFilterLables",e.FilterSelectMeasure="filterSelectMeasure",e.FilterListItem="filterListItem",e.FilterListItems="filterItems",e.FilterFieldInfo="filterFieldInfo",e.FilterInfo="filterInfo",e.FiltersInfo="filtersInfo",e.CategoricalDomain="categoricalDomain",e.QuantitativeDomain="quantitativeDomain",e.QuantitativeFilter="quantitativeFilter",e.QuantitativeFilterRange="quantitativeFilterRange",e.QuantitativeFilterDomain="quantitativeFilterDomain",e.DateTimePeriod="dateTimePeriod",e.DateTimePeriods="dateTimePeriods",e.RelativeDateFilter="relativeDateFilter",e.ValidationResults="validationResults",e.DomainMember="domainMember",e.DomainMembers="domainMembers",e.QuickFilterDisplay="quickFilterDisplay",e.QuickFilter="quickFilter",e.QuantitativeQuickFilter="quantitativeQuickFilter",e.RelativeDateQuickFilter="relativeDateQuickFilter",e.CategoricalQuickFilter="categoricalQuickFilter",e.HierarchicalQuickFilter="hierarchicalQuickFilter",e.DomainTable="domainTable",e.DomainTables="domainTables",e.DomainTuples="domainTuples",e.SearchTuples="searchTuples",e.SelectedTuples="selectedTuples",e.PendingTuples="pendingTuples",e.Domain="domain",e.DateOption="dateOption",e.DateOptions="dateOptions",e.FilterRangeAdd="filterRangeAdd",e.FilterRangeRemove="filterRangeRemove",e.FilterOptions="filterOptions",e.Layer="layer",e.Layers="layers",e.MarksCardPresModel="marksCardPresModel",e.UIItem="uiItem",e.EncodingUIItem="encodingUiItem",e.EncodingUIItems="encodingUiItems",e.PrimTypeUIItem="primitiveTypeUiItem",e.PrimTypeUIItems="primitiveTypeUiItems",e.LineInterpolationModeUIItem="lineInterpolationModeUiItem",e.LineInterpolationModeUIItemSet="lineInterpolationModeUiItemSet",e.MarksCardDropdownItem="marksCardDropdownItem",e.TooltipDropdownItem="tooltipDropdownItem",e.TextDropdownItem="textDropdownItem",e.ColorDropdownItem="colorDropdownItem",e.SizeSliderPresModel="sizeSliderPresModel",e.InflectionPoint="inflectionPoint",e.InflectionPoints="inflectionPoints",e.Notch="notch",e.Notches="notches",e.MarkSizeOptionsPresModel="markSizeOptionsPresModel",e.ModifyMarksInSet="addOrRemoveMarks",e.MarkLabelsSpecification="markLabelsSpecification",e.ColorPalette="colorPalette",e.SelectedColorPalette="selectedColorPalette",e.ColorPalettes="colorPalettes",e.ColorPaletteGroup="colorPaletteGroup",e.CatColorPaletteGroups="catColorPaletteGroups",e.QColorPaletteGroups="qColorPaletteGroups",e.ColorPaletteCollection="colorPaletteCollection",e.QuantitativeColor="quantitativeColor",e.CategoricalColor="categoricalColor",e.ItemColorPair="itemColorPair",e.ItemColorPairs="itemColorPairs",e.VQLCommandResponse="vqlCmdResponse",e.LayoutStatus="layoutStatus",e.VizState="vizState",e.VizStateList="vizStateList",e.CommandResult="cmdResult",e.CommandResultList="cmdResultList",e.URLAction="urlAction",e.URLActionList="urlActionList",e.LegacyMenu="legacyMenu",e.LegacyMenus="legacyMenus",e.ConnectionAttemptInfo="connectionAttemptInfo",e.DataSourceConnectionAttemptInfo="dataSourceConnectionAttemptInfo",e.DataSourceConnectionAttemptInfos="dataSourceConnectionAttemptInfos",e.CommandValidationPresModel="commandValidationPresModel",e.WarningMessage="warningMessagePresModel",e.ApplicationPresModel="applicationPresModel",e.ToolbarPresModel="toolbarPresModel",e.WorkbookPresModel="workbookPresModel",e.ServerFonts="serverFonts",e.PublishDataSourceMetadataPresModel="publishDataSourceMetadataPresModel",e.DashboardPresModel="dashboardPresModel",e.DashboardSizePresModel="dashboardSizePresModel",e.DashboardSizeWithValidationPresModel="dashboardSizeWithValidationPresModel",e.DashboardInfoPresModel="dashboardInfoPresModel",e.VisualPresModel="visual",e.VisualPresModels="visuals",e.DropLinesPresModel="dropLinesPresModel",e.DropFieldPresModel="dropFieldPresModel",e.DropFieldResultPresModel="dropFieldResultPresModel",e.CurrentAxisRange="currentAxisRange",e.CurrentAxisRangeNoTime="currentAxisRangeNoTime",e.DefaultAxisRange="defaultAxisRange",e.NewAxisRange="newAxisRange",e.AxisOptions="axis",e.AxisMajorTicks="axisMajorTicks",e.AxisMinorTicks="axisMinorTicks",e.EditAxisDialog="editAxisDialog",e.MarkLabels="markLabels",e.Scene="scene",e.MapServer="mapServer",e.VisualList="visualList",e.DrawFirst="drawFirst",e.DrawLast="drawLast",e.DrawPane="drawPane",e.UserPaneInfo="userPaneInfo",e.AnalyticsPane="analyticsPane",e.AnalyticsObjectItem="analyticsObjectItem",e.AnalyticsObjectItems="analyticsObjectItems",e.AnalyticsObjectGroup="analyticsObjectGroup",e.AnalyticsObjectGroups="analyticsObjectGroups",e.DropZoneItem="dropZoneItem",e.DropZoneItems="dropZoneItems",e.DropTargetInfo="dropTargetInfo",e.Pane="pane",e.Panes="panes",e.RadialSelectionDistanceInfo="radialSelectionDistanceInfo",e.MapScaleInfo="mapScaleInfo",e.RenderNode="renderNode",e.RenderNodes="renderNodes",e.PredictionBand="predictionBand",e.PredictionWhisker="predictionWhisker",e.DrawGroup="drawGroup",e.ClipReset="clipReset",e.DrawItem="drawItem",e.TransformPop="transformPop",e.TransformPush="transformPush",e.DrawItems="drawItems",e.ClipRect="clipRect",e.DrawEllipse="drawEllipse",e.DrawFillEllipse="drawFillEllipse",e.DrawFillPolygon="drawFillPolygon",e.DrawFillRect="drawFillRect",e.DrawPolygon="drawPolygon",e.DrawPolyline="drawPolyline",e.DrawRect="drawRect",e.DrawFillPath="drawFillPath",e.DrawPath="drawPath",e.DrawText="drawText",e.DrawImage="drawImage",e.ImageTileInfo="tileInfo",e.ImageTileInfos="tileInfos",e.DrawImageTiles="drawImageTiles",e.DrawPen="drawPen",e.DrawSolidBrush="drawSolidBrush",e.DrawTextProperties="drawTextProps",e.DrawGradientBrush="drawGradientBrush",e.DrawTransform="transform",e.DrawAntialias="drawAntialias",e.ImageDictionary="imageDictionary",e.ColorDictionary="colorDictionary",e.MarkShape="markShape",e.MarkShapeList="markShapeList",e.PaneDescriptor="paneDescriptor",e.PDMarks="pdMarks",e.PDMarksMap="pdMarksMap",e.LabelTextTable="labelTextTable",e.TextTableHelper="textTableHelper",e.GeometryTable="geometryTable",e.PaneMarks="paneMarks",e.PaneMarksList="paneMarksList",e.BrushingSelection="brushing",e.Selection="selection",e.BrushingSelectionList="brushingSelectionList",e.SelectionList="selectionList",e.ShelfSelectionModel="shelfSelectionModel",e.ShelfSelectionModels="shelfSelectionModels",e.ShelfSelectionsModel="shelfSelectionsModel",e.DimValSelectionModel="dimensionValueSelectionModel",e.DimValSelectionModels="dimensionValueSelectionModels",e.HierValSelectionModel="hierarchicalValueSelectionModel",e.HierValSelectionModels="hierarchicalValueSelectionModels",e.QuantRangeSelectionModel="quantativeRangeSelectionModel",e.QuantRangeSelectionModels="quantativeRangeSelectionModels",e.QuantValueSelectionModel="quantativeValueSelectionModel",e.QuantValueSelectionModels="quantativeValueSelectionModels",e.LegendSelectionInfo="legendSelectionInfo",e.NodeReference="nodeReference",e.PageReference="pageReference",e.OrientedNodeReference="orientedNodeReference",e.OrientedNodeReferences="orientedNodeReferences",e.SelectionData="selectionData",e.HighlightedData="highlightedData",e.Node="node",e.Nodes="nodes",e.SelectedNodes="selectedNodes",e.UserAction="userAction",e.UserActions="userActions",e.LinkSpec="linkSpec",e.ActionSpecificationModel="actionSpecification",e.LinkSpecification="linkSpecification",e.ScriptDescription="scriptDescription",e.ActionSource="actionSource",e.FieldExprItem="fieldExpressionItem",e.FieldExprVector="fieldExpressionVector",e.ActionComboItem="actionComboItem",e.ActionComboVector="actionComboVector",e.ActionSourceCombo="actionSourceCombo",e.ActionDestCombo="actionDestCombo",e.ActionFieldList="actionFieldList",e.EditBrushAction="editBrushAction",e.UpdateActionSource="updateActionSource",e.UpdateBrushAction="updateBrushAction",e.ActionWarnings="actionWarnings",e.EditHyperlinkAction="editHyperlinkAction",e.UpdateHyperlinkAction="updateHyperlinkAction",e.EditSheetLinkAction="editSheetlinkAction",e.UpdateSheetLinkAction="updateSheetlinkAction",e.ActionItem="actionItem",e.ActionItemList="actionItemList",e.DataSegment="dataSegment",e.DataSegments="dataSegments",e.DataDictionary="dataDictionary",e.VizData="vizData",e.VizColumn="vizColumn",e.VizColumns="vizColumns",e.VizDataColumn="vizDataColumn",e.VizDataColumns="vizDataColumns",e.VizPaneColumn="vizPaneColumn",e.VizPaneColumns="vizPaneColumns",e.PaneColumns="paneColumns",e.PaneColumnsList="paneColumnsList",e.PaneColumnsData="paneColumnsData",e.FilterContext="filterContext",e.UberTipPaneData="ubertipPaneData",e.UberTipPaneDatas="ubertipPaneDatas",e.UberTipData="ubertipData",e.RefLineTip="refLineTip",e.RefLineTips="refLineTips",e.NumericBin="numericBin",e.NumericBinDialog="numericBinDialog",e.DomainRange="domainRange",e.BinSizeInfo="binSizeInfo",e.DetailedErrorDialog="detailedErrorDialog",e.DragSourcePosition="shelfDragSourcePosition",e.DropTargetPosition="shelfDropTargetPosition",e.ShelfDropPosition="shelfDropPosition",e.ShelfDropPositions="shelfDropPositions",e.ShelfDropModel="shelfDropModel",e.ShelfDropModels="shelfDropModels",e.Drag="drag",e.SceneElement="sceneElement",e.SceneElements="sceneElements",e.QuickFilterType="quickFilterType",e.CatMode="categoricalMode",e.CatCtrl="categoricalControl",e.QuantMode="quantitativeMode",e.QuantCtrl="quantitativeControl",e.ZoneCommon="zoneCommon",e.ZoneCommonListItems="zoneCommonListItems",e.Zone="zone",e.Zones="zones",e.ImageZone="imageZone",e.WebZone="webZone",e.AddInZone="addInZone",e.ButtonZonePresModel="buttonZone",e.ButtonConfigDialog="buttonConfigDialog",e.WorksheetFlipboardZonePresModel="worksheetFlipboardZone",e.ZoneEdgeMoveType="zoneEdgeMoveType",e.ZoneSide="zoneSide",e.SnapPoint="snapPoint",e.SnapPoints="snapPoints",e.TargetPreviewPair="targetPreviewPair",e.TargetPreviewPairs="targetPreviewPairs",e.ContainerGuide="containerGuide",e.ContainerGuides="containerGuides",e.ZoneBorder="zoneBorder",e.ZoneBorders="zoneBorders",e.DashboardDragDrop="zoneDragDrop",e.DragZoneResize="zoneResize",e.DashboardText="dashboardText",e.DashboardTitle="dashboardTitle",e.QuickFilterTitle="quickFilterTitle",e.VisualCaption="visualCaption",e.VisualTitle="visualTitle",e.ZoneTitleRegion="zoneTitle",e.ForecastOptions="forecastOptions",e.ForecastDescription="forecastDescription",e.WorkgroupPublishObject="publishDataSource",e.PublishPermissionsSummary="publishPermissionsSummary",e.CheckNameResults="checkNameResults",e.ValidatePublishViewsResult="validatePublishViewsResult",e.PublishAuthenticationSettings="publishAuthenticationSettings",e.ManageDatasources="manageDatasources",e.CredentialsAuthSettings="credentialsAuthSettings",e.ConnectionCredentialsAuthSettings="connectionCredentialsAuthSettings",e.ConnectionCredentialsAuthSettingsList="connectionCredentialsAuthSettingsList",e.PublishDatasourceFromWorkbookInfo="publishDatasourceFromWorkbookInfo",e.PublishDatasourcesFromWorkbookInfo="publishDatasourcesFromWorkbookInfo",e.PublishSheet="publishSheet",e.PublishSheets="publishSheets",e.PublishObjectViews="publishObjectViews",e.PublishObjectPublishSheetResults="publishObjectPublishSheetResults",e.RefreshExtractSchedulingSettings="refreshExtractSchedulingSettings",e.SetRefreshExtractScheduleResult="setRefreshExtractScheduleResult",e.CheckPublishObjectNameWarningsResults="checkPublishObjectNameWarningsResults",e.PublishDatasourceOnWorkbookPublishResults="publishDatasourceOnWorkbookPublishResult",e.PublishDataSourceResult="publishDataSourceResult",e.PublishWarningMessage="publishWarningMessage",e.MustDowngradeToPublishWarningMessagePresModel="mustDowngradeToPublishWarningMessagePresModel",e.PublishSelectedAttributes="publishSelectedAttributes",e.AutosaveFile="autosaveFile",e.AutosaveFiles="autosaveFiles",e.FunctionGroup="funcGrp",e.FunctionGroups="funcGrps",e.FunctionArgType="funcArgType",e.FunctionArgTypes="funcArgTypes",e.CalculationStyle="calculationStyle",e.Calculation="calculation",e.TypeInPill="typeInPill",e.CalcErrorInfo="errorInfo",e.CalcErrorInfos="errorInfoList",e.CalcualtionValidation="calculationValidation",e.ExpressionFunction="expressionFunc",e.ExpressionFunctions="expressionFuncList",e.ExpressionFunctionsPM="expressionFuncPm",e.StyleToken="styleToken",e.StyleTokens="styleTokenList",e.CalcEditorTextSelection="calcEditorTextSelection",e.AutoCompleteItemType="autocompleteType",e.AutoCompleteItem="autocompleteItem",e.AutoCompleteItems="autocompleteItemList",e.CalculationAutoCompleteContextMenu="calculationAutocompleteContextMenu",e.CalcApplyResult="calculationApplyResult",e.RampBorderStyledBox="rampBorderStyledBox",e.StyledBox="styledBox",e.GlobalStyledBox="globalStyledBox",e.StyleContext="styleContext",e.CurrentTextStyle="currentTextStyle",e.LabelTextStyle="labelTextStyle",e.OriginalTextStyle="originalTextStyle",e.SelectedTextStyleModel="selectedTextStyleModel",e.SwatchTextStyleModel="swatchTextStyle",e.TextStyleModel="textStyle",e.TitleStyleModel="titleStyleModel",e.PropertyBag="propBagWrapper",e.PresModelMap="presModelMap",e.PresentationLayerNotifications="presentationLayerNotifications",e.SecondaryInfo="secondaryInfo",e.ClientDashboardUIMetric="clientDashboardUiMetric",e.ClientDashboardUIMetrics="clientDashboardUiMetrics",e.ClientDashboardUIMetricContainer="clientDashboardUiMetricContainer",e.ExtSvcConfig="extSvcConfig",e.StoryboardSheetItem="storyboardSheetItem",e.StoryboardSheetItems="storyboardSheetItems",e.StoryboardSheetList="storyboardSheetList",e.FitToStoryBoardOptionItem="fitToStoryboardOptionItem",e.FitToStoryBoardOptionItems="fitToStoryboardOptionItems",e.FitToStoryBoardOptionList="fitToStoryboardOptionList",e.StoryPointNavItem="storypointNavItem",e.StoryPointNavItems="storypointNavItems",e.FlipboardNav="flipboardNav",e.ScrollBarStyle="scrollBarStyle",e.DashboardZoneLayoutPane="dashboardZoneLayoutPane",e.SelectedStoryPointStyle="selectedStoryPointStyle",e.UnselectedStoryPointStyle="unselectedStoryPointStyle",e.FlipboardNavStyle="flipboardNavStyle",e.StoryPoint="storyPoint",e.StoryPoints="storyPoints",e.Flipboard="flipboard",e.StoryPair="storyPair",e.StoryPairs="storyPairs",e.StoryboardPM="storyboardPm",e.HiDpiIconDictionary="hiDpiIconDictionary",e.IconDictionary="iconDictionary",e.IconResourceDictionary="iconResDictionary",e.DataPreviewWindowMessage="dataPreviewWindowMessage",e.DataSourceData="dataSrcData",e.DataSourceSort="dataSrcSort",e.ColumnInfo="columnInfo",e.ColumnInfos="columnInfos",e.DataFormatter="dataFormatter",e.JoinDescription="joinDescription",e.JoinDescriptions="joinDescriptions",e.FileTableInfo="fileTableInfo",e.FieldMapping="fieldMapping",e.FieldMappingData="fieldMappingData",e.FieldMappingDataVector="fieldMappingDataVector",e.FrameFinder="frameFinder",e.SheetLinkFieldMapping="sheetLinkFieldMapping",e.UnionInfo="unionInfo",e.UnionTableInfo="unionTableInfo",e.UnionTableInfos="unionTableInfos",e.ConnectionPBUnionInfo="connectionPbunionInfo",e.ConnectionPBUnionInfos="connectionPbunionInfos",e.JoinClause="joinClause",e.JoinClauses="joinClauses",e.JoinValidationResult="joinValidationResult",e.JoinTableInfo="joinTableInfo",e.ParameterInfo="parameterInfo",e.JoinTableInfos="joinTableInfos",e.JoinOnCalcInfo="joinOnCalcInfo",e.ConnectionSummary="connectionSummary",e.ConnectionSummaries="connectionSummaries",e.TopLevelConnectionDescription="topLevelConnectionDescription",e.DataConnectionTableViewMessages="dataConnectionTableViewMessages",e.TextTransformScript="textTransformScript",e.CalendarDateOptions="calendarDateOptions",e.GoToWorksheetTooltipPresModel="goToWorksheetTooltipPresModel",e.TableCleaningPresModel="tableCleaningPresModel",e.PivotPresModel="pivotPresModel",e.PivotTreeItemPresModel="pivotTreeItemPresModel",e.PivotTreeItems="pivotTreeItemsPresModel",e.PivotDisplay="pivotDisplay",e.PivotTag="pivotTag",e.PivotGroups="pivotGroups",e.DataSourceDropdown="dataSourceDropdown",e.ConnectionDropdown="connectionDropdown",e.ActivityEvent="activityEvent",e.UIAutomation="uiAutomation",e.UIAutomationIndex="uiAutomationIndex",e.UIAutomationIndexList="uiAutomationIndexList",e.UIAutomationComponentInfo="uiAutomationComponentInfo",e.UIAutomationComponentInfoList="uiAutomationComponentInfoList",e.Geometry="geometry",e.MultiPoint="multiPoint",e.MultiLine="multiLine",e.MultiPolygon="multiPolygon",e.Polygon="polygon",e.PolygonList="polygonList",e.Line="line",e.LineList="lineList",e.TabbedAuthentication="tabbedAuthentication",e.TabbedAuthenticationTabInfo="tabbedAuthenticationTabInfo",e.TabbedAuthenticationTabInfos="tabbedAuthenticationTabInfos",e.GeographicSearchCandidate="geographicSearchCandidate",e.GeographicSearchCandidateList="geographicSearchCandidateList",e.GeographicSearchResults="geographicSearchResults",e.ParamInfo="paramInfo",e.ParamInfos="paramInfos",e.ParamNamespaceInfo="paramNamespaceInfo",e.ParamNamespaceInfos="paramNamespaceInfos",e.ParamRegistryInfo="paramRegistryInfo",e.DataSourceProperties="connectionProperties",e.ConnectionTypePresModel="connectionTypePresModel",e.ConnectionTypes="connectionTypes",e.ConnectionTypeGroupPresModel="connectionTypeGroupPresModel",e.SavedDataSourcePresModel="savedDatasourcePresModel",e.SavedDataSources="savedDatasources",e.SavedDataSourcesPresModel="savedDatasourcesPresModel",e.OpenPaneItemPresModel="openPaneItemPresModel",e.OpenPaneItems="openPaneItems",e.OpenPaneItemsPresModel="openPaneItemsPresModel",e.VariableValue="variableValue",e.VariableValues="variableValues",e.ServerVariableValue="serverVariableValue",e.EditableVariableValue="editableVariableValue",e.ServerVariableMetadata="serverVariableMetadata",e.PromptVariable="promptVariable",e.PromptVariables="promptVariables",e.VariablePromptDialog="variablePromptDialog",e.VariableValueOperation="variableValueOperation",e.VariableValueOperations="variableValueOperations",e.TableOptionsPresModel="tableOptionsPresModel",e.ClientInfoPresModel="clientInfoPresModel",e.TableauFileInfoPresModel="tableauFileInfoPresModel",e.DebuggingInfoPresModel="debuggingInfoPresModel",e.RunningThreadInfoPresModel="runningThreadInfoPresModel",e.AboutDialogInfoPresModel="aboutDialogInfoPresModel",e.HybridUIShowcasePresModel="hybridUiShowcasePresModel",e.MenuConfiguration="menuConfiguration",e.MenuItem="menuItem",e.MenuItemModels="menuItemModels",e.DefaultTextFormat="defaultTextFormat",e.MapBoxServerInfoPresModel="mapboxServerInfoPresModel",e.WMSServerInfoPresModel="wmsServerInfoPresModel",e.MapSourceConflictPresModel="mapSourceConflictPresModel",e.EnumeratedSetDialogPresModel="enumeratedSetDialogPresModel",e.EditAliasesDialog="editAliasesDialogPresModel",e.AliasesPresModel="aliasesPresModel",e.ClearAliasesPresModel="clearAliasesPresModel",e.NewAliasesPresModel="newAliasesPresModel",e.AliasPresModel="aliasPresModel",e.AliasItem="aliasItem",e.DuplicateAliasItem="duplicateAliasItem",e.AliasList="aliasList",e.AliasResultItem="aliasResultItem",e.AliasResultList="aliasResultList",e.AliasResults="aliasResults",e.EditSetDialogPresModel="editSetDialogPresModel",e.ConfirmationPresModel="confirmationPresModel",e.NotificationPresModel="notificationPresModel",e.RetargetDataSourceDialogPresModel="retargetDatasourceDialogPresModel",e.SharedFilterPresModel="sharedFilterPresModel",e.SharedFilterWorksheetInfo="sharedFilterWorksheetInfo",e.SharedFilterWorksheetInfoList="sharedFilterWorksheetInfoList",e.FieldPickerTreePresModel="fieldPickerTreePresModel",e.FieldPickerTreePresModelSource="fieldPickerTreePresModelSource",e.FieldPickerTreePresModelTarget="fieldPickerTreePresModelTarget",e.ErrorInfo="errorInfoPresModel",e.CustomSplitPresModel="customSplitPresModel",e.PageSetup="pageSetup",e.ServerConnectStatus="serverConnectionStatus",e.GetFilterItemsResponse="getFilterItemsResponse",e.FilterSearchResponse="filterSearchResponse",e.FilterSearchWithIndexResponse="filterSearchWithIndexResponse",e.FilterShowChildrenResponse="filterShowChildrenResponse",e.EditDataServerConnection="editDataServerConnection",e.ImagesEdit="imagesEdit",e.BackgroundImage="backgroundImage",e.BackgroundImages="backgroundImages",e.Predicate="predicate",e.Predicates="predicates",e.ImagesEditResult="imagesEditResult",e.SortDialogPresModel="sortDialogPresModel",e.CompoundTableCalc="compoundTableCalculationPresModel",e.TableCalc="tableCalculationPresModel",e.TableCalcs="tableCalculationPresModels",e.TableCalcIdentifier="tableCalcIdentifier",e.NestedTableCalcInfo="nestedTableCalcInfo",e.NestedTableCalcInfos="nestedTableCalcInfos",e.Ordering="tableCalcOrderingPresModel",e.Cumulative="cumulativeTableCalcPresModel",e.ReferenceOptions="tableCalcReferenceOptionsPresModel",e.Difference="differenceTableCalcPresModel",e.Window="windowTableCalcPresModel",e.PercentTotal="percentTotalTableCalcPresModel",e.Rank="rankTableCalcPresModel",e.Custom="customTableCalcPresModel",e.WebDataUrl="webDataUrl",e.VisitedWebDataConnectors="visitedWebDataConnectors",e.WebDataSessionUrls="webDataSessionUrls",e.WebDataUrls="webDataUrls",e.FieldPicker="fieldPicker",e.DescribeField="describeField",e.ShowDataPresModel="showDataPresModel",e.DataTablePresModel="dataTablePresModel",e.DataTablePresModels="dataTablePresModels",e.SummaryTablePresModels="summaryTablePresModels",e.RefreshAllExtractsPresModel="refeshAllExtractsPresModel",e.RefreshExtractDataSourcePresModel="refreshExtractDatasourcePresModel",e.RefreshExtractDataSourceList="refreshExtractDatasourceList",e.ExtractHistoryPresModel="extractHistoryPresModel",e.ExtractHistoryItemPresModel="extractHistoryItem",e.ExtractHistoryList="extractHistoryList",e.DataProviderPresModel="dataProviderPresModel",e.FormatItem="formatItem",e.FormatItemList="formatItemList",e.FormatContainer="formatContainer",e.FormatPane="formatPane",e.FormatSection="formatSection",e.CollapsibleSection="collapsibleSection",e.CompositeContainer="compositeContainer",e.UnitContainer="unitContainer",e.TabGroup="tabGroup",e.Tab="tab",e.FormatControl="formatControl",e.TextControl="textControl",e.NumericControl="numericControl",e.ColorControl="colorControl",e.ToggleControl="toggleControl",e.SelectorControl="enumStringStyle",e.StatsAnalyticSpec="statsAnalyticSpec",e.ClusterSpec="clusteringSpec",e.ClusterResults="clusterResults",e.ClusterUnit="cluster",e.ClusterUnits="clusterUnitPresModels",e.ClusterFieldANOVA="clusterFieldAnova",e.ClusterFieldANOVATable="clusterFieldAnovaTablePresModel",e.ClusterEdit="clusterEditPresModel",e.ClusterDescription="clusterDescription",e.ConnectToDataServerSourceResult="connectToDataServerSourceResult",e.DataServerConnectionReturnStatus="dataServerConnectionReturnStatus",e.WebQuantitativeColorDialog="quantitativeColorDialog",e.WebCategoricalColorDialog="categoricalColorDialog",e.WebSaveDatasourceDialog="saveDatasourceDialog",e.BorderStyleSpec="borderStyleSpec",e.HaloStyleSpec="haloStyleSpec",e.MarksColorUberEffects="marksColorUberEffects",e.CategoricalColorEncoding="categoricalColorEncoding",e.CategoricalShapeEncoding="categoricalShapeEncoding",e.ShapePalettePresModel="shapePalettePresModel",e.ShapePalettePresModels="shapePalettePresModels",e.DataSourceDateProperties="datasourceDateProperties",e.DatePropertiesDateFormat="datePropertiesDateFormat",e.DatePropertiesDateFormats="datePropertiesDateFormats",e.HierarchySelect="hierarchySelect",e.HierarchySelectMember="hierarchySelectMember",e.HierarchySelectMemberList="hierarchySelectMemberList",e.HierarchySetDefaultMember="hierarchySetDefaultMember",e.SemiStructSchema="semiStructSchema",e.SemiStructSchemaMember="semiStructSchemaMember",e.SemiStructSchemaMemberList="semiStructSchemaMemberList",e.ParameterEditInfo="parameterEditInfo",e.ProductParameterInfo="productParameterInfo",e.CaptionedDatasourceField="captionedDatasourceField",e.CaptionedDatasourceFields="captionedDatasourceFields",e.EditedParameterRangeDomain="editedParameterRangeDomain",e.ParameterRangeDomain="parameterRangeDomain",e.ParameterListDomain="parameterListDomain",e.ParameterListDomainMember="parameterListDomainMember",
e.ParameterListDomainMembers="parameterListDomainMembers",e.IndexedDomainMember="indexedDomainMember",e.IndexedDomainMembers="indexedDomainMembers",e.NewIndexedDomainMembers="newIndexedDomainMembers",e.ParameterListDomainDiff="parameterListDomainDiff",e.IndexRange="indexRange",e.IndexRanges="indexRanges",e.CategoricalFind="categoricalFind",e.CaptionedDataValue="captionedDataValue",e.SelectedValueCaption="selectedValueCaption",e.DataValueCaptionList="dataValueCaptionList",e.RangeDataValue="rangeDataValue",e.ParameterRangeDataValue="parameterRangeDataValue",e.DataValueRangeCaptions="dataValueRangeCaptions",e.IndependentDimension="independentDimension",e.IndependentDimensions="independentDimensions",e.AttributePerspective="attributePerspective",e.CubePerspective="cubePerspective",e.AttributePerspectives="attributePerspectives",e.CalculatedMembersForEditingPresModel="calculatedMembersForEditingPresmodel",e.CalculatedMember="calculatedMember",e.NewCalculatedMember="newCalculatedMember",e.UpdatedCalculatedMember="updatedCalculatedMember",e.CalculatedMembersList="calculatedMembersList",e.CalculatedMemberHierarchyItem="calculatedMemberHierarchyItem",e.CalculatedMemberHierarchyList="calculatedMemberHierarchyList",e.SummaryCardPresModel="summaryCard",e.MeasureSummary="measureSummary",e.MeasureSummaryList="measureSummaryList",e.AnnotationPresModel="annotation",e.AnnotationList="annotationList",e.AnnotationShapeStyle="annotationShapeStyle",e.Telemetry="telemetry",e.DataSourceTelemetry="dataSourceTelemetry",e.DataSourceTelemetryList="dataSourceTelemetryList",e.VisualSpecificationTelemetry="visualSpecificationTelemetry",e.VisualSpecificationTelemetryList="visualSpecificationTelemetryList",e.UnderlyingDataTable="underlyingDataTable",e.UnderlyingDataTables="underlyingDataTables",e.UnderlyingDataTableColumn="underlyingDataTableColumn",e.UnderlyingDataTableColumns="underlyingDataTableColumns",e.PageCacheID="pageCacheId",e.RelationalPageCacheID="relationalPageCacheId",e.SearchResultsCacheID="searchResultsCacheId",e.PageInfo="pageInfo",e.RowColPair="rowColPair",e.TopLeftRowCol="topLeftRowCol",e.BotRightRowCol="botRightRowCol",e.RowColPairs="rowColPairs",e.TableViewCacheInfo="tableViewCacheInfo",e.TableViewInfo="tableViewInfo",e.TableViewColumnInfo="tableViewColumnInfo",e.TableViewColumns="tableViewColumns",e.TableViewPageItem="tableViewPageItem",e.TableViewPageColumns="tableViewPageColumns",e.TableViewPageRow="tableViewPageRow",e.TableViewPageRows="tableViewPageRows",e.TableViewPage="tableViewPage",e.CategoricalValuePicker="categoricalValuePicker",e.AnnotationShapeBorderStyle="annotationShapeBorderStyle",e.AnotationShapeStrokeStyle="annotationShapeStrokeStyle",e.CategoricalBinEditorPresModel="categoricalBinEditor",e.CategoricalBinItem="categoricalBinItemPresModel",e.CategoricalBinItems="categoricalBinItemPresModels",e.MeasurePickerFieldInfo="measurePickerFieldInfo",e.MeasurePickerFields="measurePickerFields",e.MeasureAggregationInfo="measureAggregationInfo",e.MeasureAggregations="measureAggregations",e.TuplePair="tuplePair",e.DimensionBound="dimensionBound",e.PerspectiveBounds="perspectiveBounds",e.FilterPerspectiveInfoPresModel="filterPerspectiveInfo",e.TableRelevance="tableRelevance",e.ExtensionRegistrationPresModel="addInRegistrationPresModel",e.ExtensionRegistrationPresModelList="addInRegistrationPresModelList",e.RecentExtensionPresModel="recentExtensionPresModel",e.RecentExtensionPresModelList="recentExtensionRegistrationPresModelList",e.AfterSelectionCommandPresModel="afterSelectionCommandPresModel",e.AddInDashboardAuthoringWidget="addInDashboardAuthoringWidgetPresModel",e.AddInInstance="addInInstancePresModel",e.AddInLocator="addInLocatorPresModel",e.AddInContext="addInContext",e.AddInMode="addInMode",e.ExtensionDialogResult="extensionDialogResult",e.ExtensionPermission="extensionPermission",e.ExtensionPermissions="extensionPermissions",e.SetAxisDataValueResult="setAxisDataValueResult",e.AxisExtentStartType="axisExtentStartType",e.AxisExtentEndType="axisExtentEndType",e.AxisExtentsType="axisExtentsType",e.AddInEnvironment="addInEnvironmentPresModel",e.AddInDashboardInfo="addInDashboardInfoPresModel",e.AddInSettingsInfo="addInSettingsInfo",e.AddInBootstrapInfo="addInBootstrapInfo",e.ExtensionDebugSettings="addInDebugSettings",e.NLPInterpretResult="nlpInterpretResult",e.NLPInterpretResultArray="nlpInterpretResultArray",e.RichText="richText",e.RichTextKeywordSubList="richTextKeywordsSublist",e.RichTextKeywordSubLists="richTextKeywordSublists",e.RichTextKeywordList="richTextKeywordsList",e.RichTextBlockStyle="richTextBlockStyle",e.RichTextContentStyle="richTextContentStyle",e.RichTextEditorConfiguration="richTextEditorConfiguration",e.SortIndicatorState="sortIndicatorState",e.AnimationScenario="animationScenario"}(a=t.ParameterId||(t.ParameterId={}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(87),n=a(85),o=a(88),l=a(89),s=function(){function e(){}return e.createCommandMappingRegistry=function(e,t){var a=new o.CommandMappingRegistry;return a.addCommand(new l.CommandRegistration(r.VerbId.InitializeExtension,i.DocCommands.InitializeAddInInstance,[new l.CommandParameter(r.ParameterId.ExtensionLocator,n.ParameterId.AddInLocator),new l.CommandParameter(r.ParameterId.IsExtensionDialog,n.ParameterId.IsExtensionDialog)],new l.CommandParameter(r.ParameterId.ExtensionBootstrapInfo,n.ParameterId.AddInBootstrapInfo))),a.addCommand(new l.CommandRegistration(r.VerbId.GetUnderlyingData,i.DocCommands.GetUnderlyingData,[new l.CommandParameter(r.ParameterId.IgnoreAliases,n.ParameterId.IgnoreAliases),new l.CommandParameter(r.ParameterId.IgnoreSelection,n.ParameterId.IgnoreSelection),new l.CommandParameter(r.ParameterId.IncludeAllColumns,n.ParameterId.IncludeAllColumns),new l.CommandParameter(r.ParameterId.MaxRows,n.ParameterId.MaxRows),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)],new l.CommandParameter(r.ParameterId.UnderlyingDataTable,n.ParameterId.UnderlyingDataTable))),a.addCommand(new l.CommandRegistration(r.VerbId.GetDataSummaryData,i.DocCommands.GetSummaryData,[new l.CommandParameter(r.ParameterId.IgnoreAliases,n.ParameterId.IgnoreAliases),new l.CommandParameter(r.ParameterId.IgnoreSelection,n.ParameterId.IgnoreSelection),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)],new l.CommandParameter(r.ParameterId.UnderlyingSummaryDataTable,n.ParameterId.UnderlyingDataTable))),a.addCommand(new l.CommandRegistration(r.VerbId.GetDataSourceData,i.DocCommands.GetDataSourceData,[new l.CommandParameter(r.ParameterId.DataSourceId,n.ParameterId.Datasource),new l.CommandParameter(r.ParameterId.IgnoreAliases,n.ParameterId.IgnoreAliases),new l.CommandParameter(r.ParameterId.MaxRows,n.ParameterId.MaxRows),new l.CommandParameter(r.ParameterId.ColumnsToInclude,n.ParameterId.FieldDisplayNames)],new l.CommandParameter(r.ParameterId.DataSourceDataTable,n.ParameterId.UnderlyingDataTable))),a.addCommand(new l.CommandRegistration(r.VerbId.ApplyCategoricalFilter,i.DocCommands.CategoricalFilter,[new l.CommandParameter(r.ParameterId.FieldName,n.ParameterId.QualifiedFieldCaption),new l.CommandParameter(r.ParameterId.FilterValues,n.ParameterId.FilterAliases),new l.CommandParameter(r.ParameterId.FilterUpdateType,n.ParameterId.FilterUpdateType),new l.CommandParameter(r.ParameterId.IsExcludeMode,n.ParameterId.Exclude,(!0)),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.Worksheet),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.Dashboard)],new l.CommandParameter(r.ParameterId.FieldName,n.ParameterId.FieldCaption))),a.addCommand(new l.CommandRegistration(r.VerbId.ApplyRangeFilter,i.DocCommands.RangeFilter,[new l.CommandParameter(r.ParameterId.FieldName,n.ParameterId.QualifiedFieldCaption),new l.CommandParameter(r.ParameterId.FilterRangeMin,n.ParameterId.RangeMin,(!0)),new l.CommandParameter(r.ParameterId.FilterRangeMax,n.ParameterId.RangeMax,(!0)),new l.CommandParameter(r.ParameterId.FilterRangeNullOption,n.ParameterId.Included,(!0)),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.Worksheet),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.Dashboard)],new l.CommandParameter(r.ParameterId.FieldName,n.ParameterId.FieldCaption))),a.addCommand(new l.CommandRegistration(r.VerbId.ClearFilter,i.DocCommands.ResetFilter,[new l.CommandParameter(r.ParameterId.FieldName,n.ParameterId.QualifiedFieldCaption),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.Worksheet),new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.Dashboard)],new l.CommandParameter(r.ParameterId.FieldName,n.ParameterId.FieldCaption))),a.addCommand(new l.CommandRegistration(r.VerbId.GetSelectedMarks,i.DocCommands.GetSelectionData,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)],new l.CommandParameter(r.ParameterId.SelectedData,n.ParameterId.SelectionData))),a.addCommand(new l.CommandRegistration(r.VerbId.GetHighlightedMarks,i.DocCommands.GetHighlightedData,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)],new l.CommandParameter(r.ParameterId.HighlightedData,n.ParameterId.HighlightedData))),a.addCommand(new l.CommandRegistration(r.VerbId.SaveExtensionSettings,i.DocCommands.SaveAddInSettings,[new l.CommandParameter(r.ParameterId.ExtensionLocator,n.ParameterId.AddInLocator),new l.CommandParameter(r.ParameterId.SettingsValues,n.ParameterId.AddInSettings)],new l.CommandParameter(r.ParameterId.ExtensionSettingsInfo,n.ParameterId.AddInSettingsInfo))),a.addCommand(new l.CommandRegistration(r.VerbId.GetParametersForSheet,i.DocCommands.GetParameterModels,[],new l.CommandParameter(r.ParameterId.ParameterInfos,n.ParameterId.ParameterCtrls))),a.addCommand(new l.CommandRegistration(r.VerbId.FindParameter,i.DocCommands.FindParameterModel,[new l.CommandParameter(r.ParameterId.ParameterCaption,n.ParameterId.FieldCaption,(!0)),new l.CommandParameter(r.ParameterId.ParameterFieldName,n.ParameterId.FieldNameString,(!0))],new l.CommandParameter(r.ParameterId.ParameterInfo,n.ParameterId.ParameterCtrl,(!0)))),a.addCommand(new l.CommandRegistration(r.VerbId.ChangeParameterValue,i.DocCommands.SetParameterValue,[new l.CommandParameter(r.ParameterId.ParameterFieldName,n.ParameterId.GlobalFieldName),new l.CommandParameter(r.ParameterId.ParameterValue,n.ParameterId.ValueStr)],new l.CommandParameter(r.ParameterId.ParameterInfo,n.ParameterId.ParameterCtrl))),a.addCommand(new l.CommandRegistration(r.VerbId.ClearSelectedMarks,i.DocCommands.ClearSelectedMarks,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)])),a.addCommand(new l.CommandRegistration(r.VerbId.SelectByValue,i.DocCommands.SelectByValue,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM),new l.CommandParameter(r.ParameterId.Selection,n.ParameterId.Selection,(!0)),new l.CommandParameter(r.ParameterId.SelectionUpdateType,n.ParameterId.SelectionUpdateType),new l.CommandParameter(r.ParameterId.HierValSelectionModels,n.ParameterId.HierValSelectionModels,(!0)),new l.CommandParameter(r.ParameterId.DimValSelectionModels,n.ParameterId.DimValSelectionModels,(!0)),new l.CommandParameter(r.ParameterId.QuantRangeSelectionModels,n.ParameterId.QuantRangeSelectionModels,(!0))])),a.addCommand(new l.CommandRegistration(r.VerbId.GetDataSources,i.DocCommands.GetSchema,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)],new l.CommandParameter(r.ParameterId.DataSchema,n.ParameterId.DataSchema))),a.addCommand(new l.CommandRegistration(r.VerbId.RefreshDataSource,t?i.UICommands.RefreshDataSourceUI:i.SrvCommands.RefreshData,[new l.CommandParameter(r.ParameterId.DataSourceId,n.ParameterId.Datasource)],(void 0),t?l.CommandNamespace.TabUI:l.CommandNamespace.TabSrv)),a.addCommand(new l.CommandRegistration(r.VerbId.GetFilters,i.DocCommands.GetWorksheetFilters,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM)],new l.CommandParameter(r.ParameterId.WorksheetFilters,n.ParameterId.FiltersInfo))),a.addCommand(new l.CommandRegistration(r.VerbId.GetCategoricalDomain,i.DocCommands.GetCategoricalDomain,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM),new l.CommandParameter(r.ParameterId.FieldId,n.ParameterId.FieldName),new l.CommandParameter(r.ParameterId.DomainType,n.ParameterId.FilterDomainType)],new l.CommandParameter(r.ParameterId.CategoricalDomain,n.ParameterId.CategoricalDomain))),a.addCommand(new l.CommandRegistration(r.VerbId.GetRangeDomain,i.DocCommands.GetQuantitativeDomain,[new l.CommandParameter(r.ParameterId.VisualId,n.ParameterId.VisualIDPM),new l.CommandParameter(r.ParameterId.FieldId,n.ParameterId.FieldName),new l.CommandParameter(r.ParameterId.DomainType,n.ParameterId.FilterDomainType)],new l.CommandParameter(r.ParameterId.QuantitativeDomain,n.ParameterId.QuantitativeDomain))),a.addCommand(new l.CommandRegistration(r.VerbId.GetJoinDescription,i.DocCommands.GetJoinDescriptionPresModel,[new l.CommandParameter(r.ParameterId.DataSourceId,n.ParameterId.Datasource)],new l.CommandParameter(r.ParameterId.JoinDescription,n.ParameterId.JoinDescription))),a.addCommand(new l.CommandRegistration(r.VerbId.DisplayDialog,i.UICommands.DisplayExtensionDialog,[new l.CommandParameter(r.ParameterId.ExtensionLocator,n.ParameterId.AddInLocator),new l.CommandParameter(r.ParameterId.ExtensionDialogUrl,n.ParameterId.ExtensionDialogUrl),new l.CommandParameter(r.ParameterId.ExtensionDialogH,n.ParameterId.ExtensionDialogH),new l.CommandParameter(r.ParameterId.ExtensionDialogW,n.ParameterId.ExtensionDialogW),new l.CommandParameter(r.ParameterId.ExtensionDialogPayload,n.ParameterId.ExtensionDialogPayload,(!0))],new l.CommandParameter(r.ParameterId.ExtensionDialogResult,n.ParameterId.ExtensionDialogResult),l.CommandNamespace.TabUI)),a.addCommand(new l.CommandRegistration(r.VerbId.CloseDialog,i.UICommands.CloseExtensionDialog,[new l.CommandParameter(r.ParameterId.ExtensionLocator,n.ParameterId.AddInLocator),new l.CommandParameter(r.ParameterId.ExtensionDialogPayload,n.ParameterId.ExtensionDialogPayload,(!0))],(void 0),l.CommandNamespace.TabUI)),a.addCommand(new l.CommandRegistration(r.VerbId.GetConnectionDescriptionSummaries,i.DocCommands.GetConnectionDescriptionSummaryPresModels,[new l.CommandParameter(r.ParameterId.DataSourceId,n.ParameterId.Datasource)],new l.CommandParameter(r.ParameterId.ConnectionDescriptionSummaries,n.ParameterId.ConnectionDescriptionSummaries))),a},e}();t.CommandMappingRegistryFactory=s},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.SelectExtensionAndAddToDashboard="select-extension-and-add-to-dashboard",e.AfterExtensionSelected="after-extension-selected",e.SaveAddInSettings="save-add-in-settings",e.GetAddInInstancePresModel="get-add-in-instance-pres-model",e.GetAddInDashboardAuthoringWidgetPresModel="get-add-in-dashboard-authoring-widget-pres-model",e.InitializeAddInInstance="initialize-add-in-instance",e.SetAddInJsDebuggingEnabled="set-add-in-js-debugging-enabled",e.SetPauseBeforeLoadingAddIn="set-pause-before-loading-add-in",e.ReloadAddIn="reload-add-in",e.GetAddInZoneContextMenu="get-add-in-zone-context-menu",e.GetExtensionDebugSettingsPresModel="get-extension-debug-settings-pres-model",e.IsSelectionAnEditableParameter="is-selection-an-editable-parameter",e.GetCreateParameterState="get-create-parameter-state",e.GetParameterEditInfo="get-parameter-edit-info",e.CreateParameter="create-parameter",e.EditParameter_New="edit-parameter-new",e.AddParameterMember="add-parameter-member",e.EditParameterMember="edit-parameter-member",e.DeleteParameterMembers="delete-parameter-members",e.CopyParameterMembers="copy-parameter-members",e.MoveParameterMembers="move-parameter-members",e.EditParameterDomainType="edit-parameter-domain-type",e.EditParameterDataType="edit-parameter-data-type",e.EditParameterFormat="edit-parameter-format",e.EditParameterRange="edit-parameter-range",e.EditParameterSourceField="edit-parameter-source-field",e.EditParameterValue="edit-parameter-value",e.EditParameterValueIndex="edit-parameter-value-index",e.EditParameterDisplayInfo="edit-parameter-display-info",e.UpdateParameterFromField="update-parameter-from-field",e.ParseParameterListDomain="parse-parameter-list-domain",e.ClearParameterListDomain="clear-parameter-list-domain",e.CommitParameterEdits="commit-parameter-edits",e.FindParameterModel="find-parameter-model",e.GetShowDataPresModel="get-show-data-pres-model",e.ShowDataExportToCSV="show-data-export-to-csv",e.GetSummaryData="get-summary-data",e.GetUnderlyingData="get-underlying-data",e.GetDataSourceData="get-data-source-data",e.SelectByTupleValue="select-by-tuple-value",e.ClearSelectedMarks="clear-selected-marks",e.ApplyCategoricalFilterUpdates="apply-categorical-filter-updates",e.CategoricalFilterSearch="categorical-filter-search",e.CategoricalFilterClearRelationalCache="categorical-filter-clear-relational-cache",e.GetCategoricalFilterTuplesFromText="get-categorical-filter-tuples-from-text",e.GetCategoricalFilter="get-categorical-filter",e.GetCategoricalFilterDomainPage="get-categorical-filter-domain-page",e.ResetCategoricalFilterDeferred="reset-categorical-filter-deferred",e.RecreateCategoricalFilterController="recreate-categorical-filter-controller",e.ValidateCategoricalFilterName="validate-categorical-filter-name",e.GetFilterFieldAggregations="get-filter-field-aggregations",e.SetCategoricalFilter="set-categorical-filter",e.GetCategoricalFilterPatternSummary="get-categorical-filter-pattern-summary",e.GetCategoricalFilterConditionSummary="get-categorical-filter-condition-summary",e.LoadCategoricalFilterConditionFieldValueRange="load-categorical-filter-condition-field-value-range",e.ValidateCategoricalFilterConditionFormula="validate-categorical-filter-condition-formula",e.GetCategoricalFilterLimitSummary="get-categorical-filter-limit-summary",e.ValidateCategoricalFilterLimitCount="validate-categorical-filter-limit-count",e.ValidateCategoricalFilterLimitFormula="validate-categorical-filter-limit-formula",e.ValidateCategoricalFilterLimit="validate-categorical-filter-limit",e.CategoricalFilterSetRangeTypeDeferred="categorical-filter-set-range-type-deferred",e.CategoricalFilterSetSelectionExclusiveDeferred="categorical-filter-set-selection-exclusive-deferred",e.CategoricalFilterSetUseAllWhenManualIsEmptyDeferred="categorical-filter-set-use-all-when-manual-is-empty-deferred",e.CategoricalFilterSetPresetTypeDeferred="categorical-filter-set-preset-type-deferred",e.CategoricalFilterSelectRelationalMembersDeferred="categorical-filter-select-relational-members-deferred",e.CategoricalFilterDeselectRelationalMembersDeferred="categorical-filter-deselect-relational-members-deferred",e.CategoricalFilterSelectAllRelationalMembersDeferred="categorical-filter-select-all-relational-members-deferred",e.CategoricalFilterDeselectAllRelationalMembersDeferred="categorical-filter-deselect-all-relational-members-deferred",e.CategoricalFilterSetDomainTypeDeferred="categorical-filter-set-domain-type-deferred",e.GetQuantitativeFilter="get-quantitative-filter",e.GetRelativeDateFilterLabels="get-relative-date-filter-labels",e.LoadQuantitativeFilterDomain="load-quantitative-filter-domain",e.LoadQuantitativeFilterRange="load-quantitative-filter-range",e.ApplyQuantitativeFilterRange="apply-quantitative-filter-range",e.ApplyRelativeDateFilter="apply-relative-date-filter",e.FilterApplyToTotalTableCalcs="filter-apply-to-total-table-calcs",e.GetWorksheetFilters="get-worksheet-filters",e.GetCategoricalDomain="get-categorical-domain",e.GetQuantitativeDomain="get-quantitative-domain",e.CreateGroupFilter="create-group-filter",e.CreateDatasourceFilterStore="create-datasource-filter-store",e.CreateExtractFilterStore="create-extract-filter-store",e.CreateQuantitativeFilterStore="create-quantitative-filter-store",e.CommitDatasourceFilterStore="commit-datasource-filter-store",e.GetDatasourceFilterFieldPickerModel="get-datasource-filter-field-picker-model",e.GetDatasourceFilterFieldInfo="get-datasource-filter-field-info",e.GetDataSourceFilter="get-data-source-filter",e.GetDataSourceFilters="get-data-source-filters",e.RemoveFilterFromStore="remove-filter-from-store",e.ReleaseFilterStore="release-filter-store",e.GetDataSourceDatePropertiesAreEnabled="get-datasource-date-properties-are-enabled",e.GetDataSourceDateProperties="get-datasource-date-properties",e.EditDataSourceDateProperties="edit-datasource-date-properties",e.ApplyDataSourceDelta="apply-datasource-delta",e.GetDataSourceDelta="get-datasource-delta",e.GetWebSaveDatasourceDialog="get-web-save-datasource-dialog",e.WebRenameDatasourceDialog="web-rename-datasource-dialog",e.WebEditDataSource="web-edit-data-source",e.ToggleINDJoinSemantics="toggle-ind-join-semantics",e.ToggleINDJoinSemanticsWrapper="toggle-indjoin-semantics-wrapper",e.ToggleReferentialIntegrity="toggle-referential-integrity",e.GetConnectionDescriptionSummaryPresModels="get-connection-description-summary-pres-models",e.ReplaceDataSource="replace-data-source",e.GetHighlightedData="get-highlighted-data",e.GetSelectionData="get-selection",e.Select="select",e.SelectAll="select-all",e.SelectByValue="select-by-value",e.SelectNoneIncludingMaster="select-none-including-master",e.AddManualItemsToFilter="add-manual-items-to-filter",e.CategoricalFilter="categorical-filter",e.CategoricalFilterByIndex="categorical-filter-by-index",e.ChangeSharedFilter="change-shared-filter",e.ClearContextFilters="clear-context-filters",e.ClearExistingFilter="clear-existing-filter",e.DefaultFilter="default-filter",e.FilterGeo="filter-geo",e.FilterNeg="filter-neg",e.FilterNulls="filter-nulls",e.FilterTargets="filter-targets",e.GetSharedFilterPresModel="get-shared-filter-pres-model",e.HierarchicalFilter="hierarchical-filter",e.KeepOnlyOrExclude="keep-only-or-exclude",e.RangeFilter="range-filter",e.RelDateFilter="relative-date-filter",e.ResetFilter="reset-filter",e.ShowGeoAtDefault="show-geo-at-default",e.ShowSVAtDefault="show-sv-at-default",e.ToggleLockQuickFilters="toggle-lock-quick-filters",e.AddDataConnection="add-data-connection",e.AddDrillPath="add-drill-path",e.AddCredentialsFromKeychain="add-credentials-from-keychain",e.AddCredentialsFromKeychainFile="add-credentials-from-keychain-file",e.AddFieldFolder="add-field-folder",e.AddSubtotals="add-subtotals",e.AddToDrillPath="add-to-drill-path",e.AddToFieldFolder="add-to-field-folder",e.AggregateMeasuresFlag="aggregate-measures",e.ApplyCalculation="apply-calculation",e.ApplyPageSetupOptions="apply-page-setup-options",e.ApplyTableOptions="apply-table-options",e.ApplyTypeInPill="apply-type-in-pill",e.Assert="assert",e.AttemptConnectDataSourcesOnSheet="attempt-connect-datasources-on-sheet",e.AttemptConnectWorkbook="attempt-connect-workbook",e.AttemptDataSourcesConnection="attempt-datasources-connection",e.AutoUpdates="auto-update",e.Brush="highlight",e.BrushSpecial="highlight-special",e.BuildDataSchemaDataSourceContextMenu="build-data-schema-data-source-context-menu",e.BuildDataSchemaContextMenu="build-data-schema-context-menu",e.BuildDataSchemaFieldContextMenu="build-data-schema-field-context-menu",e.BuildDataSchemaDrillPathContextMenu="build-data-schema-drill-path-context-menu",e.BuildFileTableInfoPresModel="build-file-table-info-pres-model",e.BuildSheetTabContextMenu="build-sheet-tab-context-menu",e.CancelDataSourcePresModel="cancel-datasource-pres-model",e.CatBinMergeSplitLabel="categorical-bin-merge-split",e.CategoricalQuickFilterEdit="categorical-quick-filter-edit",e.CategoricalQuickFilterExcludeValues="categorical-quick-filter-exclude-values",e.CategoricalQuickFilterIncludeAllWhenEmpty="categorical-quick-filter-include-all-when-empty",e.CategoricalQuickFilterMode="categorical-quick-filter-mode",e.CategoricalQuickFilterPattern="categorical-quick-filter-pattern",e.ChangeAggregation="change-aggregation",e.ChangeAlphaLevel="change-alpha-level",e.ChangeBorder="change-border",e.ChangeFieldType="change-field-type",e.ChangeForecastColumnType="change-forecast-column-type",e.ChangeHalo="change-halo",e.ChangeMarkers="change-markers",e.ChangeSize="change-size",e.ChangeSheetTabColor="change-sheet-tab-color",e.ClearAllAxisRanges="clear-axis-ranges",e.ClearCalcModel="clear-calculation-model",e.ClearFilters="clear-filters",e.ClearFormatting="clear-formatting",e.ClearFuture="clear-future",e.ClearLayout="clear-layout",e.ClearQuickFilter="clear-quick-filter",e.CloseConnection="close-connection",e.CloseDataSource="close-data-source",e.ConnectionAddGoogleAnalyticsDimension="connection-add-google-analytics-dimension",e.ConnectionAddGoogleAnalyticsMeasure="connection-add-google-analytics-measure",e.ConnectionAddNewTable="connection-add-new-table",e.ConnectionAddCoalesce="connection-add-coalesce",e.ConnectionAddPivot="connection-add-pivot",e.ConnectionConvertToUnionAndEdit="connection-convert-to-union-and-edit",e.ConnectionConvertToUnion="connection-convert-to-union",e.ConnectionEditUnion="connection-edit-union",e.ConnectionAddOrEditBatchUnion="connection-add-or-edit-batch-union",e.ConnectionChangeTableProperty="connection-change-table-property",e.ConnectionCountEntity="connection-count-entity",e.ConnectionDataServerFetchMoreDatasources="connection-dataserver-fetch-more-datasources",e.ConnectionDataServerProjectSelect="connection-dataserver-change-selected-project",e.ConnectionDataServerUpdateFetchParameters="connection-dataserver-update-fetch-parameters",e.ConnectionDataServerFlushCache="connection-dataserver-flush-cache",e.ConnectionDeleteAllTables="connection-delete-all-tables",e.ConnectionDeleteTable="connection-delete-table",e.ConnectionEditGoogleAnalyticsAccount="connection-edit-google-analytics-account",e.ConnectionEditGoogleAnalyticsDateRange="connection-edit-google-analytics-date-range",e.ConnectionEditGoogleAnalyticsMeasureGroup="connection-edit-google-analytics-measure-group",e.ConnectionToggleGAQueryPartitioning="connection-toggle-ga-query-partitioning",e.ConnectionEditGoogleAnalyticsProperty="connection-edit-google-analytics-property",e.ConnectionEditGoogleAnalyticsView="connection-edit-google-analytics-view",e.ConnectionEditGoogleAnalyticsSegment="connection-edit-google-analytics-segment",e.ConnectionEditJoinClauses="connection-edit-join-clauses",e.ConnectionEditJoinType="connection-edit-join-type",e.ConnectionEditSQLText="connection-edit-sql-text",e.ConnectionFetchEntity="connection-fetch-entity",e.ConnectionSetForceExtractRefresh="connection-set-force-extract-refresh",e.ConnectionPrepareDataSourceForEdit="connection-prepare-datasource-for-edit",e.ConnectionClearRefreshAttributes="connection-clear-refresh-attributes",e.ConnectionRemoveGoogleAnalyticsDimension="connection-remove-google-analytics-dimension",e.ConnectionRemoveGoogleAnalyticsMeasure="connection-remove-google-analytics-measure",e.ConnectionRemoveCoalesce="connection-remove-coalesce",e.ConnectionRemovePivot="connection-remove-pivot",e.ConnectionAddDateParseFormats="connection-add-date-parse-formats",e.ConnectionRenameTable="connection-rename-table",e.ConnectionReplaceRelationWithSQLText="connection-replace-relation-with-sql-text",e.ConnectionReplaceTable="connection-replace-table",e.ConnectionResetTableAlias="connection-reset-table-alias",e.ConnectionSelectCatalog="connection-select-catalog",e.ConnectionSelectCube="connection-select-cube",e.ConnectionSelectStoredProcedure="connection-select-stored-procedure",e.ConnectionSelectBigQueryLegacySQLCheckBox="connection-select-bigquery-legacy-check",e.ConnectionToggleHasHeaderRow="connection-toggle-has-header-row",e.ConnectionToggleTableCleaning="connection-toggle-table-cleaning",e.ConnectionToggleUseExtract="connection-toggle-use-extract",e.ConnectionViewTableCleaningResults="connection-view-table-cleaning-results",e.ConnectToDataServerSource="connect-data-server-datasource",e.ConsiderZerosEmptyFlag="consider-zeros-empty",e.ConvertUnnamedFields="convert-unnamed-fields",e.Crash="crash",e.CreateAggregateRole="create-aggregate-role",e.CreateConnection="create-connection",e.CreateDefaultQuickFilter="create-default-quick-filter",e.CreateTypeInPill="create-type-in-pill",e.CustomDataGridFieldOrder="custom-datagrid-field-order",e.CustomDateAggregation="custom-date-aggregation",e.CustomSplitField="custom-split-field",e.DebugAssertion="debug-assertion",e.DecrementParameterValue="decr-parameter-value",e.DeleteFields="delete-calculation-fields-command",e.DeleteSheet="delete-sheet",e.DescribeDrillPath="describe-drill-path",e.DismissNullWart="dismiss-null-wart",e.DomainQuickFilter="domain-quick-filter",e.DoubleFreeCrash="double-free",e.DropNowhere="drop-nowhere",e.DropOnSchemaViewer="drop-on-schema-viewer",e.DropOnShelf="drop-on-shelf",e.DropOnCalcEditor="drop-on-calc-editor",e.DropOnShowMe="drop-on-showme",e.DropPrepare="drop-prepare",e.DualAxis="dual-axis",e.DuplicateSheet="duplicate-sheet",e.EditCopyCalc="edit-copy-calc",e.EditDropLines="edit-drop-lines",e.EditEnumeratedGroup="edit-enumerated-group",e.EditNestedGroup="edit-nested-group",e.EditPill="edit-pill",e.EditPrimitiveType="edit-primitive-type",e.EnableAllBrushing="enable-all-highlights",e.EnableQuickFilter="enable-quick-filter",e.EnableSheetBrushing="enable-sheet-highlights",e.EnableThemedBrushing="enable-themed-highlights",e.EnumerateVariables="enumerate-variables",e.EnumerateVariableSelectionValues="enumerate-variable-selection-values",e.EstablishConnection="establish-connection",e.EstablishMatchingConnections="establish-matching-connections",e.ExportDataToText="export-data-to-text",e.ExtSvcConfig="ext-svc-config",e.ExtSvcConfigConnect="ext-svc-config-connect",e.Extract="extract",e.SetDataGridCurrentTable="set-data-grid-current-table",e.FetchTableRelevance="fetch-table-relevance",e.FetchCachedTableRelevance="fetch-cached-table-relevance",e.FlipLabels="flip-labels",e.FloatingToolbar="zoom-controls",e.FloatingToolbarToggle="zoom-controls-toggle",e.ForecastConfig="forecast-config",e.ForecastToggle="forecast-toggle",e.FormatWorkbook="format-workbook",e.GeographicSearchQuery="geographic-search-query",e.GeographicSearchLoadData="geographic-search-load-data",e.GeographicSearchIsDataDoneLoading="geographic-search-data-done-loading",e.GeographicSearchToggleVisibility="geographic-search-toggle-visibility",e.GetEditConnectionPresModel="get-edit-connection-pres-model",e.GetEditEnumeratedGroupPresModel="get-edit-enumerated-group-pres-model",e.GetEditNestedGroupPresModel="get-edit-nested-group-pres-model",e.GetFrameFinderPresModel="get-frame-finder-pres-model",e.GetGoogleSheetsListPresModel="get-google-sheets-list-pres-model",e.GetGoogleSheetPanePresModel="get-google-sheet-pane-pres-model",e.GetInitialSQLPresModel="get-initial-sql-pres-model",e.GetQueryBandingPresModel="get-query-banding-pres-model",e.GetTabbedAuthenticationPresModel="get-tabbed-authentication-pres-model",e.GetActiveSheet="get-active-sheet",e.GetAlphaLevel="get-alpha-level",e.GetAppConfig="get-app-config",e.GetDisabledSecondaryDSFields="get-disabled-secondaryds-fields",e.GetBlendingFields="get-blending-fields",e.GetCalculationPresModel="get-calculation-pres-model",e.GetCategoricalColor="get-categorical-color",e.GetClientInfo="get-client-info",e.GetCommands="get-commands",e.GetConnectionDescriptionPresModel="get-connection-description-pres-model",e.GetDSDropdownPresModel="get-ds-dropdown-pres-model",e.GetDataPreviewWindowMessagePresModel="get-data-preview-window-pres-model",e.GetDataSourcePresModel="get-datasource-pres-model",e.GetDataSourceSortPresModel="get-datasource-sort-pres-model",e.GetDataSourcePropertiesPresModel="get-datasource-properties-pres-model",e.GetConnectionSettingsPresModel="get-connection-settings-pres-model",e.GetDashboard="get-dashboard",e.GetDataPreview="get-data-preview",e.GetDatabaseEnumerationPresModel="get-database-enumeration-pres-model",e.GetDefaultColor="get-default-color",e.GetDefaultShape="get-default-shape",e.GetDragPresModelForText="get-drag-pres-model-for-text",e.GetDropTargetPresModel="get-drop-target-pres-model",e.GetEditDataServerConnectionPresModel="get-edit-data-server-connection-pres-model",
e.GetEditDropLinesModel="get-edit-drop-lines-model",e.GetEncodingState="get-encoding-state",e.GetEncodingTypeMenuModel="get-encoding-type-menu",e.GetExtSvcConfig="get-ext-svc-config",e.GetForecastPresModel="get-forecast-pres-model",e.GetJoinDescriptionPresModel="get-join-description-pres-model",e.GetQuickFilter="get-quick-filter",e.GetQuickFilters="get-quick-filters",e.GetReferenceLinePresModel="get-reference-line-pres-model",e.GetParameters="get-parameters",e.GetParameterModels="get-parameter-models",e.GetParametersRegistryInfo="get-params-registry-info",e.GetPivotPresModel="get-pivot-pres-model",e.GetScene="get-scene",e.GetSchemaEnumerationPresModel="get-schema-enumeration-pres-model",e.GetSheetsInfo="get-sheets-info",e.GetShowMe="get-show-me",e.GetStandardConnectionEnumerationPresModel="get-standard-connection-enumeration-pres-model",e.GetStoredProcedureEnumerationPresModel="get-stored-procedure-enumeration-pres-model",e.GetStoredProcedureParametersPresModel="get-stored-procedure-parameters-pres-model",e.GetTableEnumerationPresModel="get-table-enumeration-pres-model",e.GetTableCleaningPresModel="get-table-cleaning-pres-model",e.GetTargetFieldList="get-target-field-list",e.GetTopLevelConnectionDescriptionPresModel="get-top-level-connection-description-pres-model",e.GetTypeInPillPresModel="get-type-in-pill-pres-model",e.GetUberTipPresModel="get-ubertip-pres-model",e.GetUnionInfoPresModel="get-union-info-pres-model",e.GetVisual="get-visual",e.GetVizData="get-viz-data",e.GetWarehouseEnumerationPresModel="get-warehouse-enumeration-pres-model",e.GetWorkbook="get-workbook",e.GetWorldUpdate="get-world-update",e.GoToSheet="goto-sheet",e.HeapCorruptionCrash="corrupt-heap",e.HideColumnFieldLabel="hide-column-field-label",e.HideEmptyColsFlag="hide-empty-cols",e.HideEmptyRowsFlag="hide-empty-rows",e.HideLabel="hide-label",e.HideRowFieldLabel="hide-row-field-label",e.HierarchicalQuickFilterUpdateSetFunction="hierarchical-quick-filter-update-set-function",e.IncludeInTooltip="include-in-tooltip",e.IncludeOtherCategoricalBin="include-other-cat-bin",e.IncrementExtract="increment-extract",e.IncrementParameterValue="incr-parameter-value",e.CreateCalc="create-calc",e.EditCalc="edit-calc",e.InvokeHyperlink="invoke-hyperlink",e.KeepOnlyOrExcludeSelection="keep-only-or-exclude-selection",e.LabelDrill="label-drill",e.LabelDrillCtx="label-drill-ctx",e.LevelDrill="level-drill",e.LoadUrl="load-url",e.ListPublishedDataSources="list-published-datasources",e.MarkLabel="mark-label",e.MarkTrail="mark-trail",e.MemoryDumpObjectCounts="memory-dump-object-counts",e.MemoryLeak="memory-leak",e.Merge="merge-or-split",e.MigrateDataSource="migrate-data-source",e.ModifyMarksInSet="add-or-remove-marks",e.MoveAreaAnnotationText="move-area-annotation-text",e.MoveColumnTotals="move-column-totals",e.MoveMark="move-mark",e.MovePointAnnotation="move-point-annotation",e.MovePointAnnotationTarget="move-point-annotation-target",e.MoveReferenceLine="move-reference-line",e.MoveRowTotals="move-row-totals",e.NavigateToSheet="navigate-to-sheet",e.PostCalcJoinClauseResult="post-calc-join-clause-result",e.NewDocDashboard="new-dashboard",e.NewDocWorksheet="new-worksheet",e.NonRangedRemoveReferenceLine="non-ranged-remove-reference-line",e.OptimizeExtract="optimize-extract",e.OptOutActions="opt-out-actions",e.PageHistorySettings="page-history-settings",e.PageToggleTrails="page-toggle-trails",e.ParseUIName="parse-ui-name",e.Percentages="percentages",e.Perspectives="perspectives",e.PositionPointAnnotation="position-point-annotation",e.ProtocolPoolLog="protocol-pool-log",e.PublishToWorkgroup="publish-to-workgroup",e.PublishDataSource="publish-datasource",e.PublishDataSourceFromData="publish-data-source-from-data",e.PublishDataSourceFromWorkbookData="publish-data-source-from-workbook-data",e.QuantitativeQuickFilterEdit="quantitative-quick-filter-edit",e.QuantitativeModeQuickFilter="quantitative-mode-quick-filter",e.QueryMigrateDataSources="query-migrate-data-sources",e.QuickSort="quick-sort",e.RangedByIndexMerge="ranged-by-index-merge",e.RangedByValueMerge="ranged-by-value-merge",e.Record="record",e.Redo="redo",e.RefreshExtract="refresh-extract",e.RefreshFromSource="refresh-from-source",e.RelativeDateQuickFilterEdit="relative-date-quick-filter-edit",e.RemoveAllReferenceLines="remove-all-reference-lines",e.RemoveDrillPath="remove-drill-path",e.RemoveExtract="remove-extract",e.RemoveFieldFolder="remove-field-folder",e.RemoveFieldLabel="remove-field-label",e.RemoveFields="remove-fields",e.RemoveFieldsFromShelf="remove-fields-from-shelf",e.RemoveFromDrillPath="remove-from-drill-path",e.RemoveFromFieldFolder="remove-from-field-folder",e.RemoveReferenceLine="remove-reference-line",e.RemoveSubtotals="remove-subtotals",e.RenameDataSource="rename-data-source",e.RenameDrillPath="rename-drill-path",e.RenameFieldFolder="rename-field-folder",e.RenameSheet="rename-sheet",e.ReorderLabels="reorder-labels",e.ReportBug="report-bug",e.RequestDataSourcePresModel="request-datasource-pres-model",e.ResetParameterCtrlTitle="reset-parameter-ctrl-title",e.ResetTooltip="reset-tooltip",e.ResizeAreaAnnotationText="resize-area-annotation-text",e.ResizeAxis="resize-axis",e.ResizeCell="resize-cell",e.ResizeHeader="resize-header",e.ResizePointAnnotation="resize-point-annotation",e.Revert="revert",e.RotateFieldLabel="rotate-field-label",e.RotateLabel="rotate-label",e.SplitFieldLabel="split-field-label",e.RunAction="run-action",e.RunScript="run-script",e.RunUpdates="run-update",e.SaveModel="save-model",e.SavePublishedDStoFile="save-published-ds-to-file",e.SelectDataSource="select-data-source",e.SelectFieldsInShelf="select-fields-in-shelf",e.SendDataConnectionTableViewMessage="send-data-connection-tableview-message",e.SetActiveDataSourceName="set-active-data-source-name",e.SetActiveConnectionName="set-active-connection-name",e.SetActiveDataSource="set-active-datasource",e.SetBasePalette="set-base-palette",e.SetCategoricalColor="set-categorical-color",e.SetDataCacheDelta="set-data-cache-delta",e.SetDataPreviewAutoUpdate="set-data-preview-auto-update",e.SetDataPreviewCustomFieldOrder="set-data-preview-custom-field-order",e.SetDefaultColor="set-default-color",e.SetDefaultShape="set-default-shape",e.SetFilterContext="set-filter-context",e.SetFilterShared="set-filter-shared",e.SetInitialSQL="set-initial-sql",e.SetItemColor="set-item-color",e.SetItemColorResetCustomization="set-item-color-reset-customization",e.SetItemEncodingType="set-item-encoding-type",e.SetMarkSize="set-mark-size",e.SetPageNavFlag="set-page-flag",e.SetParameterCtrlDisplayFlags="set-parameter-ctrl-display-flags",e.SetParameterCtrlDisplayMode="set-parameter-ctrl-display-mode",e.SetParameterCtrlTitle="set-parameter-ctrl-title",e.SetParameterValue="set-parameter-value",e.SetPrimitive="set-primitive",e.SetQueryBanding="set-query-banding",e.SetQuickFilterIncludedValues="set-quick-filter-included",e.SetReferenceLineFormula="set-reference-line-formula",e.SetReferenceLineConstantValue="set-reference-line-constant-value",e.SetSheetFormatting="set-sheet-formatting",e.SetSheetSize="set-sheet-size",e.SetTotalsType="set-totals-type",e.SetWorkbookLocale="set-workbook-locale",e.ShowCatCtrlQuickFilter="show-cat-ctrl-quick-filter",e.ShowColFieldNamesFlag="show-col-field-names",e.ShowColTotalsFlag="show-col-totals",e.ShowColumnFieldLabel="show-column-field-label",e.ShowEmptyColsFlag="show-empty-cols",e.ShowEmptyRowsFlag="show-empty-rows",e.ShowForecastEditor="show-forecast-editor",e.ShowFullRange="show-full-range",e.ShowHeader="show-header",e.ShowHiddenData="show-hidden-data",e.ShowMe="show-me",e.ShowQuantCtrlQuickFilter="show-quant-ctrl-quick-filter",e.ShowQuickFilterDoc="show-quickfilter-doc",e.ShowReferenceLineEditor="show-reference-line-editor",e.ShowReferenceLineConstantValueEditor="show-reference-line-constant-value-editor",e.ShowReferenceLineFormatter="show-reference-line-formatter",e.ShowRowFieldLabel="show-row-field-label",e.ShowRowFieldNamesFlag="show-row-field-names",e.ShowRowTotalsFlag="show-row-totals",e.SimpleCommandList="simple-command-list",e.Sleep="sleep",e.SleepBackgroundThread="sleep-background-thread",e.SortDataGridByColumn="sort-datagrid-by-column",e.SortDataGridFields="sort-datagrid-fields",e.SpecialValues="special-values",e.SplitField="split-field",e.StackMarks="stack-marks",e.StackOverflowCrash="stack-overflow",e.SubtotalAggregation="subtotal-aggregation",e.Subtotals="subtotals",e.SwapFields="swap-fields",e.SwapRowsAndColumns="swap-rows-and-columns",e.TableauException="tableau-exception",e.ToggleDropLines="toggle-drop-lines",e.ToggleFieldBlending="toggle-field-blending",e.ToggleMarkLabels="toggle-mark-labels",e.TogglePageTitle="toggle-page-title",e.ToggleParameterCtrlDisplayFlag="toggle-parameter-ctrl-display-flag",e.ToggleParameterCtrlTitle="toggle-parameter-ctrl-title",e.ToggleQuickFilterTitle="toggle-quick-filter-title",e.ToggleVizNavigationSetting="toggle-viz-navigation-setting",e.Undo="undo",e.UnhideData="unhide-data",e.UnhideLabel="unhide-label",e.UpdateAreaAnnotation="update-area-annotation",e.UpdateCalcScopeIsolation="update-scope-isolation-for-calculation",e.UpdateDataServerConnectionInfo="update-data-server-connection-info",e.UpdatePointAnnotationPullback="update-point-annotation-pullback",e.UpdateTableCalcInfo="update-table-calc-infomation",e.UpgradeExtract="upgrade-extract",e.UseExtract="use-extract",e.ValidateDrillPathName="validate-drill-path-name",e.ValidateFormula="validate-formula",e.ValidateInitialSQL="validate-initial-sql",e.ValidateQueryBanding="validate-query-banding",e.ValidateTypeInPill="validate-type-in-pill",e.ViewParameterCtrls="view-param-ctrls",e.ViewQuickFilters="view-quick-filters",e.GetSchema="get-schema",e.GetSchemaViewerDataSchema="get-schema-viewer-data-schema",e.ConvertToDimension="convert-to-dimension",e.ConvertToMeasure="convert-to-measure",e.ConvertToContinuous="convert-to-continuous",e.ConvertToDiscrete="convert-to-discrete",e.RenameField="rename-field",e.HideField="hide-field",e.UnhideField="unhide-field",e.HideUnusedFields="hide-unused-fields",e.DuplicateFields="duplicate-fields",e.CleanValues="clean-values",e.ParseDate="parse-date",e.MakeDate="make-date",e.SetQualifyNames="set-qualify-names",e.CreateMeasureFromColumn="create-measure-from-column",e.RemoveFromSchemaDrillPath="remove-from-schema-drill-path",e.AddToSchemaDrillPath="add-to-schema-drill-path",e.RemoveSchemaDrillPath="remove-schema-drill-path",e.ShowHiddenFields="show-hidden-fields",e.ShowAliases="show-aliases",e.SetRowDisplayCount="set-row-display-count",e.ShowStructure="show-structure",e.GroupByTable="group-by-table",e.ChangeDataType="change-data-type",e.ChangePivotStrategy="change-pivot-strategy",e.ChangeDisplayAlias="change-display-alias",e.SetIncludeSharedMembers="set-include-shared-members",e.SetUtilityDimension="set-utility-dimension",e.SetDefaultHierarchy="set-default-hierarchy",e.DataSourceSortOrder="data-source-sort-order",e.ClearUtilityDimension="clear-utility-dimension",e.SetDefaultAggregation="set-default-aggregation",e.SetDefaultVTAggregation="set-default-vtaggregation",e.ChangeFiscalYear="change-fiscal-year",e.ChangeSemanticRole="change-semantic-role",e.AddToSheet="add-to-sheet",e.DropSchemaSelOnShelf="drop-schema-sel-on-shelf",e.AddToSchemaFieldFolder="add-to-schema-field-folder",e.RemoveFromSchemaFieldFolder="remove-from-schema-field-folder",e.RemoveSchemaFieldFolder="remove-schema-field-folder",e.DefaultTextFormat="default-text-format",e.EditSchemaCaption="edit-schema-caption",e.ResetSchemaCaption="reset-schema-caption"}(a=t.DocCommands||(t.DocCommands={}));var r;!function(e){e.ChooseExtensionManifestFile="choose-extension-manifest-file",e.DisplayExtensionDialog="display-extension-dialog",e.CloseExtensionDialog="close-extension-dialog",e.About="about",e.AddDataServerDataSourceUI="add-data-server-datasource-ui",e.SwitchToDocumentAndAddDataServerDataSourceUI="switch-to-document-and-add-data-server-ds-ui",e.AddDrillPathUI="add-drillpath-ui",e.AddFieldFolderUI="add-field-folder-ui",e.AddFileToExtractUI="add-file-to-extract-ui",e.AddDataSourceToExtractUI="add-data-source-to-extract-ui",e.AddQCToSheetUI="add-qc-to-sheet-ui",e.AddReferenceLineUI="add-reference-line-ui",e.AddSchemaFieldFolderUI="add-to-schema-field-folder-ui",e.AddTableauServerDSConnectionUI="add-tableau-server-ds-connection-ui",e.AddToSchemaDrillPathUI="add-to-schema-drillpath-ui",e.AddToSheetUI="add-to-sheet-ui",e.AnnotateUI="annotate-ui",e.AppendDataSourceToRemoteExtractUI="append-data-source-to-remote-extract-ui",e.AttemptConnectDataSourcesOnSheetUI="attempt-connect-datasources-on-sheet-ui",e.AttemptDataSourceConnectionUI="attempt-datasource-connect-ui",e.AutoHideSheet="auto-hide-sheet",e.AutomationClickMRUItem="click-mru-item",e.CalculatedMembersUI="calculated-members-ui",e.ChangeAggregationUI="change-aggregation-ui",e.ChangeDataServerLogonUI="change-data-server-logon-ui",e.ChangeEssbaseAliasFile="change-essbase-alias-file",e.ChangeFieldTypeUI="change-field-type-ui",e.ChangeTabColorSheet="change-tab-color-sheet",e.CheckForProductUpdates="check-for-product-updates",e.ClearDashboardUI="clear-dashboard-ui",e.ClearSheetUI="clear-sheet-ui",e.ClearStoryUI="clear-story-ui",e.ClearVizUI="clear-viz-ui",e.CloseCalculationUI="close-calculation-ui",e.CloseDataSourceUI="close-datasource-ui",e.CloseWorkbook="close-workbook",e.ColorLegendEditUI="color-legend-edit-ui",e.CommitPillEditUI="commit-pill-edit-ui",e.ConnectDataSourceUI="connect-datasource-ui",e.ConnectRepromptUI="connect-reprompt-ui",e.ConnectVariablePromptUI="connect-variable-prompt-ui",e.ConnectVariablePromptMatchingUI="connect-variable-prompt-matching-ui",e.ConnectionAddNewCustomSQLUI="connection-add-new-custom-sql-ui",e.ConnectionAddNewTableUI="connection-add-new-table-ui",e.ConnectionDataGridCopyUI="connection-data-grid-copy-ui",e.ConnectionEditCustomSQLUI="connection-custom-sql-ui",e.ConnectionEditExtractUI="connection-extract-ui",e.ConnectionEditDBVariablesUI="connection-edit-db-variables-ui",e.ConnectionEditConnectionUI="connection-edit-connection-ui",e.ConnectionFinalizeDataSourceUI="connection-finalize-datasource-ui",e.ConnectionFinalizeExtractStatesUI="connection-finalize-extract-states-ui",e.ConnectionGetTypeGroupPresModelUI="connection-get-type-group-pres-model-ui",e.ConnectionGetSavedDataSourcesPresModelUI="connection-get-saved-ds-pres-model-ui",e.ConnectionPartitioningFailureUI="connection-partitioning-failure-ui",e.ConnectionReplaceTableUI="connection-replace-table-ui",e.ConnectionSearchCatalogUI="connection-search-catalog-ui",e.ConnectionSearchCubeUI="connection-search-cube-ui",e.ConnectionSelectCatalogUI="connection-select-catalog-ui",e.ConnectionSelectCubeUI="connection-select-cube-ui",e.ConnectionSelectStandardConnectionUI="connection-select-standard-connection-ui",e.ConnectionSelectStoredProcedureUI="connection-select-stored-procedure-ui",e.ConnectionShowEditTableDialogUI="connection-show-edit-table-ui",e.ConnectionShowPivotDialogUI="conneciton-show-pivot-dialog-ui",e.ConnectionSortCatalogUI="connection-sort-catalog-ui",e.ConnectionSortCubeUI="connection-sort-cube-ui",e.ConnectionValidateCustomSQLUI="connection-validate-custom-sql-ui",e.ConnectToCloudFile="connect-to-cloud-file",e.ConnectToDataServerSourceUI="connect-data-server-datasource-ui",e.ConnectionConvertToSQLUI="connection-convert-to-sql-ui",e.ConnectionRenameConnectionUI="connection-rename-connection-ui",e.ExportUnderlyingDataToCSVUI="export-to-csv-with-progress-ui",e.ConnectODBCUI="connect-odbc-ui",e.CopyCrosstab="copy-crosstab",e.CopyData="copy-data",e.CopyDrillPathFieldsUI="copy-drill-path-fields-ui",e.CopyFieldsDefnUI="copy-fields-defn-ui",e.CopyImage="copy-image",e.CopyImageDashboard="copy-image-dashboard",e.CopyImageWorksheet="copy-image-worksheet",e.CopyImageStory="copy-image-story",e.CopyWorksheetFormatting="copy-formatting",e.CreateCalculatedSetUI="create-calculated-set-ui",e.CreateCalculationUI="create-calculation-ui",e.CreateCombinedFieldUI="create-combined-field-ui",e.CreateConnectionUI="create-connection-ui",e.CreateDateBinUI="create-Date-bin-ui",e.CreateGroupSelectionUI="create-group-selection-ui",e.CreateGroupUI="create-group-ui",e.CreateIdentitySet="create-user-filter",e.CreateLeafConnectionUI="create-leaf-connection-ui",e.CreateNumericBinsUI="create-numeric-bins-ui",e.CreateSetUI="create-set-ui",e.CustomDateAggregationUI="custom-date-aggregation-ui",e.CutDrillPathFieldsUI="cut-drill-path-fields-ui",e.CutFieldsDefnUI="cut-fields-defn-ui",e.DeactivateDashboard="deactivate-dashboard",e.DeleteCookies="delete-cookies",e.DeleteFieldsUI="delete-fields-ui",e.DeleteSheetUI="delete-sheet-ui",e.DescribeAdhocClusterUI="describe-adhoc-cluster-ui",e.DescribeDrillPathUI="describe-drillpath-ui",e.DescribeFieldUI="describe-field-ui",e.DescribeForecastUI="describe-forecast-ui",e.DescribeSchemaDrillPathUI="describe-schema-drillpath-ui",e.DescribeTrendLine="describe-trend-line",e.DescribeTrendModel="describe-trend-model",e.OpenDiscoverPaneLinks="open-discover-pane-links",e.DismissGoToWorksheetTooltipUI="dismiss-go-to-worksheet-tooltip-ui",e.DownloadCopyDataSource="download-copy-data-source",e.DrilldownUI="drilldown-ui",e.DropSchemaSelOnShelfUI="drop-schema-sel-on-shelf-ui",e.DropUI="drop-ui",e.DuplicateDataSourceUI="duplicate-datasource-ui",e.DuplicateSheetAsCrosstab="duplicate-sheet-as-crosstab",e.DuplicateSheetOrCrosstabUI="duplicate-sheet-or-crosstab-ui",e.DuplicateSheetUI="duplicate-sheet-ui",e.EditAliasesUI="edit-aliases-ui",e.EditAnnotation="edit-annotation",e.EditAxisUI="edit-axis-ui",e.EditCalculatedSetUI="edit-calculated-set-ui",e.EditCalculationUI="edit-calculation-ui",e.EditCaptionUI="edit-caption",e.EditCombinedFieldUI="edit-combined-field",e.EditCopyFieldUI="edit-copy-field-ui",e.EditDataSourceUI="edit-datasource-ui",e.EditDataSourceFieldAliases="edit-datasource-field-aliases",e.EditDataSourceFiltersUI="edit-datasource-filters-ui",e.EditDataSourceSitePathsUI="edit-datasource-site-paths-ui",e.EditDateBinUI="edit-date-bin-ui",e.EditDefaultSortUI="edit-default-sort-ui",e.EditDropLinesUI="edit-drop-lines-ui",e.EditDropFieldUI="edit-drop-field-ui",e.EditDataSourceRelationshipsUI="edit-datasource-relationships-ui",e.EditEnumeratedSetUI="edit-enumerated-set",e.EditFilterQuickFilter="edit-filter-quick-filter",e.EditFilterUI="edit-filter-ui",e.EditForecastUI="edit-forecast-ui",e.EditGroupUI="edit-group-ui",e.EditGroupValue="edit-group-value",e.EditGroupValueLabel="edit-group-value-label",e.EditLegendGroupValueUI="edit-group-value-legend",e.EditImageUI="edit-image-ui",e.EditLegendMemberAliasUI="edit-legend-member-alias-ui",e.EditLegendTitleUI="edit-legend-title-ui",e.EditMarkColorUI="edit-mark-color-ui",e.EditMarkShapeUI="edit-mark-shape-ui",e.EditMemberAlias="edit-member-alias",e.EditMemberAliasLabel="edit-member-alias-label",e.EditPageTitleUI="edit-page-title-ui",e.EditParameterCtrlTitle="edit-param-control-title",e.EditPdfPageSelectionUI="edit-pdf-page-selection-ui",e.EditPrimaryAliasesUI="edit-primary-aliases-ui",e.EditReferenceLine="edit-reference-line",e.EditSchemaCalculationUI="edit-schema-calculation-ui",e.EditSchemaCalculationRangeUI="edit-schema-calculation-range-ui",e.EditSchemaCaptionUI="edit-schema-caption-ui",e.EditSchemaFieldAliasUI="edit-schema-field-alias-ui",e.ResetSchemaCaptionUI="reset-schema-field-alias-ui",e.ResetMultipleSchemaCaptionsUI="reset-multiple-schema-field-alias-ui",e.EditSchemaNumericBinsUI="edit-schema-numeric-bins-ui",e.EditSetUI="edit-set-ui",e.EditTitleQuickFilter="edit-title-quick-filter",e.EditTitleUI="edit-title",e.EditTooltipUI="edit-tooltip",e.EditTrendLinesUI="edit-trend-lines-ui",e.EditUserDescriptionUI="edit-user-description-ui",e.EditWMSMapTileServer="edit-wms-map-tile-server",e.EditZoneParam="edit-zone-param",e.EditZoneUrl="edit-zone-url",e.EstablishConnectionUI="establish-connection-ui",e.EstablishTableauServerConnectionUI="establish-tableau-server-connection-ui",e.ExecuteUIAutomationButton="execute-ui-button-action",e.ExecuteUIAutomationComboBox="execute-ui-combo-box-action",e.ExecuteUIAutomationGenericWidget="execute-ui-generic-widget-action",e.ExecuteUIAutomationLabel="execute-ui-label-action",e.ExecuteUIAutomationMenu="execute-ui-menu-action",e.ExecuteUIAutomationItemView="execute-ui-item-view-action",e.ExecuteUIAutomationTextBox="execute-ui-text-box-action",e.ExecuteUIAutomationToggleButton="execute-ui-toggle-button-action",e.ExecuteUIAutomationSlider="execute-ui-slider-action",e.ExecuteUIAutomationWindow="execute-ui-window-action",e.ExecuteUIAutomationWebView="execute-ui-web-view-action",e.ExecuteUIAutomationTab="execute-ui-tab-action",e.ExecuteUIAutomationTextBrowser="execute-ui-text-browser-action",e.ExitApplication="exit-application",e.ExportData="export-data",e.ExportDataSourceUI="export-datasource-ui",e.ExportPackagedWorkbook="export-packaged",e.ExportWorkbookSheetsUI="export-workbook-sheets-ui",e.ExtSvcConfigUI="ext-svc-config-ui",e.ExtractHistory="extract-history",e.ExtractPropertiesUI="extract-properties-ui",e.ExtractUI="extract-ui",e.FilterFieldLabelUI="filter-field-label-ui",e.FormatAnnotation="format-annotation",e.FormatAxisUI="format-axis-ui",e.FormatCaptionTitleUI="format-caption-title",e.FormatField="format-pane",e.FormatFieldLabelUI="format-field-label-ui",e.FormatLabel="format-label",e.FormatLegendsUI="format-legends-ui",e.FormatReferenceLine="format-reference-line",e.FormatUI="format-ui",e.FullScreen="fullscreen",e.GetDashboardSidePaneMode="get-dashboard-sidepane-mode",e.GetDebuggingInfo="get-debugging-info",e.GetIconPathForEncodingType="get-icon-path-for-encoding-type",e.GetIconPathForPrimitiveType="get-icon-path-for-primitive-type",e.GetTableOptionsPresModel="get-table-options-pres-model",e.GetWindowNameUI="get-window-name",e.GetWorksheetSidePaneMode="get-worksheet-sidepane-mode",e.GetHiddenSheets="get-hidden-sheets",e.GetOpenPaneMRUs="get-open-pane-mrus",e.GetOpenPaneSampleWorkbooks="get-open-pane-sample-workbooks",e.GetRetargetDataSourcePresModelUI="get-retarget-datasource-pres-model-ui",e.GetSchemaViewerPresModel="get-schema-viewer-pres-model",e.GetSelectedSheets="get-selected-sheets",e.GetSheetSorterThumbnail="get-sheet-sorter-thumbnail",e.GetSheetTabUIThumbnail="get-sheet-tab-ui-thumbnail",e.GetSheetTabUIText="get-sheet-tab-ui-text",e.GetVisibleTreeItems="get-visible-tree-items",e.GotoSheetRange="goto",e.GotoURL="goto-url",e.HideCaptionUI="hide-caption",e.HideFilmstripUI="hide-filmstrip-ui",e.HideTitleUI="hide-title",e.HideZoneUI="hide-zone-ui",e.HideAllSheetsUI="hide-all-sheets-ui",e.UnhideAllSheetsUI="unhide-all-sheets-ui",e.ImportLocalDataUI="import-local-data-ui",e.ImportMapSource="import-map-source",e.ImportMapSourceUI="import-map-source-ui",e.ImportWorkbookUI="import-workbook-ui",e.LoadDefaultFormattingUI="load-formatting-ui",e.LocateFieldUI="locate-field-ui",e.LogMemoryUsage="log-memory-usage",e.ManageLicensing="manage-licensing",e.ManageMapbox="manage-mapbox",e.ManagePublicWorkbooks="manage-public",e.ManageMapServices="manage-map-services",e.MapLayersUI="map-layers-ui",e.ManageWMS="manage-wms",e.UpgradeDataSourcesUI="upgrade-datasources-ui",e.UpgradeDataSourceUI="upgrade-datasource-ui",e.MoveRepository="move-repository",e.NewSchemaDrillPathUI="new-schema-drill-path-ui",e.NewUIDashboard="new-dashboard-ui",e.NewUIWorksheet="new-worksheet-ui",e.NewUIStoryboard="new-storyboard-ui",e.NewWorkbook="new-workbook",e.NextSheet="next-sheet",e.NonRangedEditReferenceLine="non-ranged-edit-reference-line",e.OpenBookmark="open-bookmark",e.OpenFromWorkgroup="open-workbook-from-workgroup",e.OpenMapSource="open-map-source",e.OpenMapSourceUI="open-map-source-ui",e.OpenSampleWorkbook="open-sample-workbook",e.OpenWorkbook="open-workbook",e.OpenRecentWorkbook="open-recent-workbook",e.OpenOtherFiles="open-other-files",e.OptimizeExtractUI="optimize-extract-ui",e.PageSetup="page-setup",e.Paste="paste",e.PasteFieldsDefnUI="paste-fields-defn-ui",e.PasteWorksheetFormatting="paste-formatting",e.PDFExport="export-pdf",e.PerspectivesUI="perspectives-ui",e.PresentationMode="presentation-mode",e.Print="print",e.PromptScript="prompt-command",e.PropertiesDataSourceUI="properties-datasource-ui",e.PublishDatasourceToWorkgroup="publish-datasource-to-workgroup",e.PublishDatasourceToWorkgroupFromData="publish-datasource-to-workgroup-from-data",e.PublishDatasourceToWorkgroupRange="publish-datasource-to-workgroup-range",e.PublishWorkbookToWorkgroup="publish-workbook-to-workgroup",e.PublishDatasourceToWorkgroupFromWorkbookData="publish-datasource-to-workgroup-from-workbook-data",e.PromptForDataSourceFileUI="prompt-for-datasource-file-ui",e.PromptUnknownWDCUrlUI="prompt-unknown-wdc-url-ui",e.QueryDataSourceUI="query-datasource-ui",e.QuickFilterFieldLabelUI="quick-filter-field-label-ui",e.QuickTableCalcUI="quick-table-calc-ui",e.ReconnectMapSourceUI="reconnect-map-source-ui",e.RecordPerformance="record-perf",e.RefreshAllExtractsUI="refresh-all-extracts-ui",e.RefreshAllThumbnailsUI="refresh-all-thumbnails",e.RefreshAutoExtractUI="refresh-auto-extract-ui",e.RefreshDataSourceUI="refresh-datasource-ui",e.RefreshExtractUI="refresh-extract-ui",e.RefreshFromSourceUI="refresh-from-source-ui",e.RefreshLocalDataUI="refresh-local-data-ui",e.RefreshThumbnailUI="refresh-thumbnail",e.ReleaseMemory="release-memory",e.RemoveAnnotation="remove-annotation",e.RemoveExtractUI="remove-extract-ui",e.RemoveMRUItem="remove-mru",e.RemoveSavedDataSourceUI="remove-saved-datasource",e.RemoveSheetFromDashboardUI="remove-sheet-from-dashboard-ui",e.RemoveTableUI="remove-table-ui",e.RenameDataSourceUI="rename-datasource-ui",e.RenameSchemaFieldFolderUI="rename-field-folder-ui",e.RenameSchemaDrillPathUI="rename-schema-drillpath-ui",e.RenameSheetUI="rename-sheet-ui",e.ReorderSheetsUI="reorder-sheets-ui",e.ReplaceDataSourceWithDataServerDataSourceUI="replace-datasource-with-data-server-datasource-ui",e.ReplaceFieldUI="replace-field-ui",e.ResetCaptionUI="reset-caption-ui",e.ResetCards="reset-cards",e.ResetLocalDataUI="remove-local-data-ui",e.ResetMessages="reset-messages",e.StartOnlineSyncClient="start-online-sync-client",e.ResetTitleUI="reset-title-ui",e.ResetToDefaultsMapCard="reset-map-to-defaults",e.ResetWorkbook="revert-workbook-ui",e.RetargetDataSource="retarget-datasource",e.RetargetDataSourceUI="retarget-datasource-ui",e.SaveAsWorkbook="save-as-workbook",e.SaveBookmark="save-bookmark",e.SaveDebuggingWorkbook="save-debugging-workbook",e.SaveDefaultFormattingUI="save-formatting-ui",e.SaveWorkbook="save-workbook",e.SchemaDefaultMemberUI="schema-default-member-ui",e.ScrollSheet="scroll-sheet",e.SetAccountsDimension="set-accounts-dimension",e.SetActiveConnectionUI="set-active-connection-ui",e.SetAnalyticsDropTargetVisibility="set-analytics-drop-target-visibility",e.SetDashboardSidePaneMode="set-dashboard-sidepane-mode",e.SetDefaultDateFormatUI="set-default-date-format-ui",e.SetDefaultLocationUI="set-default-location-ui",e.SetDefaultMapSourceUI="set-default-mapsource-ui",e.SetDefaultTextFormatUI="set-default-text-format-ui",e.SetDefaultUtilityMember="set-default-utility-member",e.SetFreeFormDashboardUI="set-free-form-dashboard-ui",e.SetFilterSharedUI="set-filter-shared-ui",e.SetKey="set-key",e.SetProductAutoUpdate="set-auto-update",e.SetQueryFailure="set-query-failure",e.SetRendering="set-rendering",e.SetRuntimeImmediateMode="set-runtime-immediate-mode",e.SetUILanguage="set-ui-language",e.SetWorkbookLocaleUI="set-workbook-locale-ui",e.SetWorksheetSidePaneMode="set-worksheet-sidepane-mode",e.SetZoneFixedSizeUI="set-zone-fixed-size-ui",e.SetsInOutUI="show-in-out-sets",e.ShapeLegendEditUI="shape-legend-edit-ui",e.ShowCloudFileOAuthPromptAndSelectionUI="show-cloudfile-oauth-prompt-and-selection-ui",e.ShowConnectionAuthUI="show-connection-auth-ui",e.ShowConnectionAuthAndEstablishConnectionUI="show-connection-auth-and-establish-connection-ui",e.ShowConnectTab="show-connect-tab",e.ShowCustomSplitDialogUI="show-custom-split-dialog-ui",e.ShowDocument="document",e.ShowFeatureFlagDialog="show-feature-flag-dialog",e.ShowFieldFormatUI="show-field-format-ui",e.ShowFieldInSchemaUI="show-field-in-schema",e.ShowFilmstripUI="show-filmstrip-ui",e.ShowGoogleSheetsSelectionUI="show-google-sheets-selection-ui",e.ShowHideDashboardSheetUI="show-hide-dashboard-sheet-ui",e.ShowHideStoryboardSheetUI="show-hide-storyboard-sheet-ui",e.ShowGraphicsAPI="show-graphics-api-command",e.ShowMapOptionsDialog="show-map-options-dialog",e.ShowMeasuresUI="show-measures-ui",e.ShowMeCycleUI="show-me-cycle-ui",e.ShowMeHideUI="show-me-hide-ui",e.ShowMembersUI="show-members-ui",e.ShowMeToggleUI="show-me-toggle-ui",e.ShowOAuthPromptUI="show-oauth-prompt-ui",e.ShowParameterControl="show-parameter-control",e.ShowPublicStatusDialog="show-public-status-dialog",e.ShowPublicQuotaExceededDialog="show-public-quota-exceeded-dialog",e.ShowPublishDatasourceToWorkgroupDialog="show-publish-datasource-to-workgroup-dialog",e.ShowQueryBandingAndInitialSQLDialogUI="show-query-banding-and-initial-sql-dialog-ui",e.ShowQuickFilter="show-quickfilter",e.ShowQuickFilterUI="show-quickfilter-ui",e.ShowRuntimeIndicator="show-runtime-indicator",e.ShowSheetSorter="sheet-sorter",e.ShowTableOptionsDialog="show-table-options-dialog",e.ShowWebDataConnectorUI="show-web-data-connector-ui",e.ShowWidgetSandboxUI="show-widget-sandbox-ui",e.SizeLegendEditUI="size-legend-edit-ui",e.SleepUI="sleep-ui",e.SortAscendingFieldLabelUI="sort-ascending-field-label-ui",e.SortDescendingFieldLabelUI="sort-descending-field-label-ui",e.SortFieldLabelUI="sort-field-label-ui",e.SortUI="sort-ui",e.SplitFieldUI="split-field-ui",e.StackMarksUI="stack-marks-ui",e.StartFileConnectionUI="start-file-connection-ui",e.StartPillEditUI="start-pill-edit-ui",e.SwitchToConnectTab="switch-to-connect-tab",e.SwitchToDocument="switch-to-document",e.SwitchToSheetSorter="switch-to-sheet-sorter",e.TableCalcAddressUI="table-calc-address-ui",e.TableCalcIgnoreUI="table-calc-ignore-ui",e.TableCalcOrderingUI="table-calc-ordering-ui",e.TableCalcUI="table-calc-ui",e.ToggleConnectPaneUI="toggle-connect-pane",e.ToggleFilmstripUI="toggle-filmstrip-ui",e.ToggleINDJoinSemanticsUI="toggle-ind-join-semantics-ui",e.TogglePinMRUItem="toggle-pin-mru",e.ToggleReferentialIntegrityUI="toggle-referential-integrity-ui",e.ToggleStartPageUI="toggle-start-page",e.TrackMemory="track-memory",e.TrendLinesFlagUI="trend-lines-ui",e.UpdateDefaultsMapCard="update-map-defaults",e.UpgradeExtractsUI="upgrade-extracts-ui",e.UpgradeExtractUI="upgrade-extract-ui",e.UseExtractUI="use-extract-ui",e.UseMemory="use-memory",e.UtilityDimensionUI="utility-dimension-ui",e.ValidateExtractCredentialsUI="validate-extract-credentials-ui",e.ViewCard="view-card",e.ViewTitleCard="view-title-card",e.ViewSummaryCard="view-summary-card",e.ViewCaptionCard="view-caption-card",e.ViewColumnsShelf="view-columns-shelf",e.ViewRowsShelf="view-rows-shelf",e.ViewPagesShelf="view-pages-shelf",e.ViewFiltersShelf="view-filters-shelf",e.ViewMeasuresShelf="view-measures-shelf",e.ViewMarksShelf="view-marks-shelf",e.ViewCurrentPageCard="view-current-page-card",e.ViewData="view-data",e.ViewSQLDataUI="view-sql-data-ui",e.ViewDataSourceData="view-datasource-data",e.ViewLegend="view-legend",e.ViewSidePane="view-side-pane",e.ViewStatusBar="view-statusbar",e.ViewSummaryDetail="view-summary-detail",e.ViewTableData="view-table-data",e.ViewToolBar="view-toolbar",e.WebViewEnableJavascript="webview-enable-javascript",e.WebViewEnablePlugins="webview-enable-plugins",e.WebViewBlockPopups="webview-block-popups",e.WebViewEnableURLHoverActions="webview-enable-url-hover-actions",e.WorkgroupChangeDataserver="workgroup-change-dataserver",e.WorkgroupChangeServer="workgroup-change-server",e.WorkgroupChangeUser="workgroup-change-user",e.WorkgroupRemoveLastServer="workgroup-remove-last-server"}(r=t.UICommands||(t.UICommands={}));var i;!function(e){e.PingSession="ping-session",e.ApplyCustomizedView="apply-customized-view",e.RefreshData="refresh-data"}(i=t.SrvCommands||(t.SrvCommands={})),function(e){e.GetAxisOptions="get-axis-options",e.ResetAxisOptions="reset-axis-options",e.ShowEditAxisDialog="show-edit-axis-dialog",
e.SetAxisReversed="set-axis-reversed",e.SetAxisScaleType="set-axis-scale-type",e.SetAxisTitle="set-axis-title",e.SetAxisSubtitle="set-axis-subtitle",e.SetAxisUseAutomaticSubtitle="set-axis-use-automatic-subtitle",e.SetAxisExtentStartType="set-axis-extent-start-type",e.SetAxisExtentEndType="set-axis-extent-end-type",e.SetBothAxisExtentsType="set-both-axis-extents-type",e.SetAxisIncludeZero="set-axis-include-zero",e.SetAxisRangeEnd="set-axis-range-end",e.SetAxisRangeStart="set-axis-range-start",e.SetAxisFoldState="set-axis-fold-state",e.SetMajorTickMarkState="set-major-tick-mark-state",e.SetMinorTickMarkState="set-minor-tick-mark-state",e.SetMajorTickMarkOrigin="set-major-tick-mark-origin",e.SetMinorTickMarkOrigin="set-minor-tick-mark-origin",e.SetMajorTickMarkSpacing="set-major-tick-mark-spacing",e.SetMinorTickMarkSpacing="set-minor-tick-mark-spacing",e.SetMajorTickMarkUnits="set-major-tick-mark-units",e.SetMinorTickMarkUnits="set-minor-tick-mark-units"}(a=t.DocCommands||(t.DocCommands={}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(84),n=function(){function e(){this._commands={}}return e.prototype.addCommand=function(e){this._commands[e.apiVerbId]=e},e.prototype.hasCommand=function(e){return!!this._commands.hasOwnProperty(e)&&!!this._commands[e]},e.prototype.getCommand=function(e){if(!this.hasCommand(e))throw new i.InternalTableauError(r.ErrorCodes.UNKNOWN_VERB_ID,"Unknown ApiVerb: "+e);return this._commands[e]},e}();t.CommandMappingRegistry=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=a(82),n=a(84);!function(e){e.TabDoc="tabdoc",e.TabSrv="tabsrv",e.TabUI="tabui"}(r=t.CommandNamespace||(t.CommandNamespace={}));var o=function(){function e(e,t,a){this._apiId=e,this._presLayerId=t,this._isOptional=a}return Object.defineProperty(e.prototype,"apiId",{get:function(){return this._apiId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"presLayerId",{get:function(){return this._presLayerId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isOptional",{get:function(){return!!this._isOptional},enumerable:!0,configurable:!0}),e}();t.CommandParameter=o;var l=function(){function e(e,t,a,r,i){this._apiVerbId=e,this._commandId=t,this._inputParameters=a,this._outputParameter=r,this._namespace=i}return Object.defineProperty(e.prototype,"apiVerbId",{get:function(){return this._apiVerbId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"commandId",{get:function(){return this._commandId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"namespace",{get:function(){return this._namespace||r.TabDoc},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return this._inputParameters||new Array},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"output",{get:function(){return this._outputParameter},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"needsAddInLocator",{get:function(){for(var e=0,t=this.inputs;e<t.length;e++){var a=t[e];if(a.apiId===i.ParameterId.ExtensionLocator)return!0}return!1},enumerable:!0,configurable:!0}),e.prototype.createParams=function(e,t){for(var a={},r=0,o=this.inputs;r<o.length;r++){var l=o[r];if(!e.hasOwnProperty(l.apiId)){if(l.isOptional)continue;throw new n.InternalTableauError(i.ErrorCodes.MISSING_PARAMETER,"Missing input parameter: "+l.apiId)}var s=t.get(l.apiId,l.presLayerId);a[l.presLayerId]=s(e[l.apiId])}return a},e.prototype.ProcessResult=function(e,t){if(void 0===this.output){var a={};return a}if(!e||!e.hasOwnProperty(this.output.presLayerId)){if(this.output.isOptional)return{};throw new n.InternalTableauError(i.ErrorCodes.MISSING_PARAMETER,"Missing output parameter: "+this.output.presLayerId)}var r=t.get(this.output.presLayerId,this.output.apiId);return r(e[this.output.presLayerId])},e}();t.CommandRegistration=l},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(91),n=a(92),o=function(){function e(e,t,a){this._presLayerId=e,this._apiId=t,this._converter=a}return Object.defineProperty(e.prototype,"presLayerId",{get:function(){return this._presLayerId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"apiId",{get:function(){return this._apiId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"converter",{get:function(){return this._converter},enumerable:!0,configurable:!0}),e}();t.EventMappingRegistration=o;var l=function(){function e(){}return e.createEventMappingRegistry=function(e){var t={};return t[i.NotificationId.SelectionChanged]=new o(i.NotificationId.SelectionChanged,r.NotificationId.SelectedMarksChanged,n.PresLayerToApiConverter.convertVisualId),t[i.NotificationId.ParameterChanged]=new o(i.NotificationId.ParameterChanged,r.NotificationId.ParameterChanged,n.PresLayerToApiConverter.convertFieldCaptionPair),t[i.NotificationId.FilterChanged]=new o(i.NotificationId.FilterChanged,r.NotificationId.FilterChanged,n.PresLayerToApiConverter.convertFilterEvent),t[i.NotificationId.ExtensionDialogUpdate]=new o(i.NotificationId.ExtensionDialogUpdate,r.NotificationId.ExtensionDialogUpdate,n.PresLayerToApiConverter.convertDialogUpdateEvent),t[i.NotificationId.SettingsChanged]=new o(i.NotificationId.SettingsChanged,r.NotificationId.SettingsChanged,n.PresLayerToApiConverter.convertSettingsChangedEvent),t},e}();t.EventMappingRegistryFactory=l},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.EditAliasesDialogNotification="doc:edit-aliases-dialog-notification-event",e.CalculationDialog="doc:calculation-dialog-event",e.TypeInPill="doc:type-in-pill-event",e.CommandValidation="doc:command-validation-event",e.UpdateCategoricalBinEditDialog="doc:update-categorical-bin-edit-dialog-event",e.CategoricalColor="doc:categorical-color-event",e.WebCategoricalColorDialog="doc:web-categorical-color-dialog-event",e.DataAlertDialog="doc:data-alert-dialog-event",e.DataSchemaSelection="doc:data-schema-selection-event",e.UpdateDataPreparation="doc:update-data-preparation-event",e.UpdateDataSourceData="doc:update-data-source-data-event",e.DataSourceUpdateNeeded="doc:data-source-update-needed-event",e.TextFileProperties="doc:text-file-properties-event",e.FilterRelationalStateChanged="doc:filter-relational-state-changed-event",e.FilterRelationalDomainChanged="doc:filter-relational-domain-changed-event",e.FilterCacheNotFound="doc:filter-cache-not-found-event",e.HierarchyNotification="doc:hierarchy-notification-event",e.HierarchySelection="doc:hierarchy-selection-event",e.MapOptionsDialog="doc:map-options-dialog-event",e.UpdatePageUINotification="doc:update-page-uinotification-event",e.SceneViewDrawnNotification="doc:scene-view-drawn-notification-event",e.AnimationControlChange="doc:animation-control-change-event",e.RenameSheetNotification="doc:rename-sheet-notification-event",e.WebQuantitativeColorDialog="doc:web-quantitative-color-dialog-event",e.UpdateButtonConfigDialog="doc:update-button-config-dialog-event",e.UpdateRefLineDialog="doc:update-ref-line-dialog-event",e.RefLineDialogOpening="doc:ref-line-dialog-opening-event",e.CloseDataSourceErrorDialog="doc:close-data-source-error-dialog-event",e.WebSaveDatasourceDialog="doc:web-save-datasource-dialog-event",e.WarningMessage="doc:warning-message-event",e.TableCalcDialog="doc:table-calc-dialog-event",e.TableCalcActivateDialog="doc:table-calc-activate-dialog-event",e.UpdateTrendLineEditDialog="doc:update-trend-line-edit-dialog-event",e.PageCacheRefresh="doc:page-cache-refresh-event",e.PageCacheExpired="doc:page-cache-expired-event",e.PageCachePagesExpired="doc:page-cache-pages-expired-event",e.PageCachePageRangeExpired="doc:page-cache-page-range-expired-event",e.ReloadAddIn="doc:reload-add-in-event",e.SelectionChanged="doc:selection-changed-event",e.ParameterChanged="doc:parameter-changed-event",e.FilterChanged="doc:filter-changed-event",e.ChooseExtensionDialog="doc:choose-extension-dialog-event",e.ExtensionDialogUpdate="doc:extension-dialog-update-event",e.SettingsChanged="doc:settings-changed-event",e.ClusterRefitNotification="doc:cluster-refit-notification-event",e.AnimationGUIUpdateNeeded="doc:animation-guiupdate-needed-event",e.UpdateDetailedErrorDialog="doc:update-detailed-error-dialog-event",e.UpdateEditAxisDialog="doc:update-edit-axis-dialog-event",e.LaunchHybridUIShowcase="doc:launch-hybrid-uishowcase-event",e.HybridUIShowcaseEcho="doc:hybrid-uishowcase-echo-event",e.UpdateNumericBinEditDialog="doc:update-numeric-bin-edit-dialog-event",e.RichTextEditorDialog="doc:rich-text-editor-dialog-event",e.ShowSortDialog="doc:show-sort-dialog-event",e.UpdateSortDialog="doc:update-sort-dialog-event",e.TestEventWithModel="doc:test-event-with-model-event",e.TestEventWithoutModel="doc:test-event-without-model-event"}(a=t.NotificationId||(t.NotificationId={}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(93),n=a(83),o=function(){function e(){}return e.convertSheetPath=function(e){var t={sheetName:e.sheetName,isDashboard:e.isDashboard,storyboard:e.storyboard,flipboardZoneID:e.flipboardZoneId,storyPointID:e.storyPointId};return t},e.convertVisualId=function(e){var t={worksheet:e.worksheet,dashboard:e.dashboard,storyboard:e.storyboard,flipboardZoneID:e.flipboardZoneId,storyPointID:e.storyPointId};return t},e.convertExtensionLocator=function(t){var a=void 0;t.sheetPath&&(a=e.convertSheetPath(t.sheetPath));var r={instanceId:t.addInInstanceId,dashboardPath:a};return r},e.convertDashboardInZones=function(e){for(var t=new Array,a=0,r=Object.keys(e.zones);a<r.length;a++){var n=r[a],o=e.zones[n],l={name:o.zoneCommon.name,zoneId:o.zoneId,zoneType:i.PresLayerToApiEnumMappings.zoneType.convert(o.zoneCommon.zoneType),height:o.zoneCommon.h,width:o.zoneCommon.w,x:o.zoneCommon.x,y:o.zoneCommon.y};t.push(l)}return t},e.convertDashboardInfo=function(t){var a={zones:e.convertDashboardInZones(t.dashboardPresModel),name:t.dashboardPresModel.sheetPath.sheetName,extensionZoneId:t.zoneId,size:t.dashboardPresModel.viewportSize};return a},e.convertExtensionInstance=function(t){var a={url:t.addInRegistrationPresModel.url,locator:e.convertExtensionLocator(t.addInLocatorPresModel)};return a},e.convertExtensionEnivironment=function(e){var t={extensionContext:i.PresLayerToApiEnumMappings.extensionContext.convert(e.addInContext),extensionMode:i.PresLayerToApiEnumMappings.extensionMode.convert(e.addInMode),extensionLocale:e.addInLocale,extensionLanguage:e.addInLanguage,tableauVersion:e.tableauVersion,operatingSystem:e.operatingSystem,apiVersion:e.apiVersion};return t},e.convertExtensionSettingsInfo=function(e){var t={settingsValues:e.addInSettings||{}};return t},e.convertExtensionBootstrapInfo=function(t){var a={extensionDashboardInfo:e.convertDashboardInfo(t.addInDashboardInfoPresModel),extensionEnvironment:e.convertExtensionEnivironment(t.addInEnvironmentPresModel),extensionInstance:e.convertExtensionInstance(t.addInInstancePresModel),extensionSettingsInfo:e.convertExtensionSettingsInfo(t.addInSettingsInfo)};return a},e.convertFieldCaptionPair=function(e){return e.fn},e.convertFilterEvent=function(t){var a={visualId:e.convertVisualId(t.visualIdPresModel),fieldName:t.fieldCaption};return a},e.convertDialogUpdateEvent=function(e){var t={isCloseEvent:e.isExtensionCloseEvent,closePayload:e.extensionDialogPayload};return t},e.convertSettingsChangedEvent=function(t){var a={newSettings:t.addInSettingsInfo.addInSettings,filterByLocator:!0,locator:e.convertExtensionLocator(t.addInLocatorPresModel)};return a},e.convertExtensionDialogResult=function(e){return i.PresLayerToApiEnumMappings.extensionDialogResult.convert(e)},e.convertDataSchema=function(t){var a={};n.ErrorHelpers.verifyValue(t,"dataSchema"),n.ErrorHelpers.verifyValue(t.dataSources,"dataSchema.dataSources"),Object.keys(t.dataSources).forEach(function(r){t.dataSources[r].datasource!==e.PARAMETERS_DB_NAME&&(a[r]=e.convertDataSource(t.dataSources[r]))});var r=e.convertWorksheetDataSchemaMap(t.worksheetDataSchemaMap),i={dataSources:a,worksheetDataSchemaMap:r};return i},e.convertDataSource=function(t){var a=""===t.extractUpdateTime?void 0:t.extractUpdateTime,r=new Array;n.ErrorHelpers.verifyValue(t,"dataSource"),n.ErrorHelpers.verifyValue(t.fieldList,"dataSchema.fieldList"),t.fieldList.forEach(function(t){var a=t;a.columnList?a.columnList.forEach(function(t){return r.push(e.convertField(t))}):"field-folder"!==t.type&&"dimension"!==t.type&&r.push(e.convertField(t))});var i={name:t.datasourceCaption,id:t.datasource,isExtract:void 0!==a,extractUpdateTime:a,fields:r};return i},e.convertWorksheetDataSchemaMap=function(t){var a={};return Object.keys(t).forEach(function(r){var i=t[r].referencedDataSourceList.filter(function(t){return t!==e.PARAMETERS_DB_NAME}),n={primaryDataSource:t[r].primaryDatasource,referencedDataSourceList:i};a[r]=n}),a},e.convertField=function(e){var t=e,a=e,n=r.FieldAggregationType.None,o=r.FieldRoleType.Unknown,l=!1;if(!t.aggregation||!t.fieldRole)throw new Error("Unexpected Internal Error: field pres model is missing expected properties.");n=i.PresLayerToApiEnumMappings.fieldAggregationType.convert(t.aggregation),o=i.PresLayerToApiEnumMappings.fieldRoleType.convert(t.fieldRole),l=t.isCalculated||!1;var s={name:e.description,id:e.name,description:e.userCaption,aggregation:n,isHidden:!!e.isHidden,isGenerated:e.isGenerated,isCalculatedField:l,role:o,isCombinedField:!!a.isCombinedField};return s},e.convertJoinDescription=function(e){n.ErrorHelpers.verifyValue(e,"plJoinDescription");var t=e.joinTableInfos.map(function(e){var t={name:e.tableAlias,id:e.tableName,customSQL:e.isCustomSql?e.sqlQuery:void 0,connectionClassName:e.connectionClassName,connectionId:e.connectionName};return t}),a={tables:t};return a},e.convertConnectionDescrptionSummaries=function(e){return e.map(function(e){var t={name:e.connectionDescriptionLabel,id:e.connectionName,type:e.connectionTypeLabel,serverURI:e.connectionUri};return t})},e.PARAMETERS_DB_NAME="Parameters",e}();t.PresLayerToApiConverter=o},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(84),n=a(94),o=function(){function e(e,t){this._mappings=e,this._defaultVal=t}return e.prototype.convert=function(e,t){if(this._mappings.hasOwnProperty(e))return this._mappings[e];if(void 0!==this._defaultVal&&!t)return this._defaultVal;throw new i.InternalTableauError(r.ErrorCodes.MISSING_ENUM_MAPPING,"Enum Mapping not found for: "+e)},e}();t.EnumConverter=o;var l=function(){function e(){}return e.zoneType=new o((d={},d[n.ZoneType.ZT_Invalid]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_Viz]=r.DashboardObjectType.Worksheet,d[n.ZoneType.ZT_ColorLegend]=r.DashboardObjectType.Legend,d[n.ZoneType.ZT_ShapeLegend]=r.DashboardObjectType.Legend,d[n.ZoneType.ZT_SizeLegend]=r.DashboardObjectType.Legend,d[n.ZoneType.ZT_MapLegend]=r.DashboardObjectType.Legend,d[n.ZoneType.ZT_QuickFilter]=r.DashboardObjectType.QuickFilter,d[n.ZoneType.ZT_Highlighter]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_CurrPage]=r.DashboardObjectType.PageFilter,d[n.ZoneType.ZT_Empty]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_Title]=r.DashboardObjectType.Title,d[n.ZoneType.ZT_Text]=r.DashboardObjectType.Text,d[n.ZoneType.ZT_Bitmap]=r.DashboardObjectType.Image,d[n.ZoneType.ZT_Web]=r.DashboardObjectType.WebPage,d[n.ZoneType.ZT_AddIn]=r.DashboardObjectType.Extension,d[n.ZoneType.ZT_ParamCtrl]=r.DashboardObjectType.ParameterControl,d[n.ZoneType.ZT_FlipboardNav]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_Flipboard]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_LayoutBasic]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_LayoutFlow]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_LayoutFreeForm]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_End]=r.DashboardObjectType.Blank,d[n.ZoneType.ZT_DashboardObject]=r.DashboardObjectType.Blank,d),r.DashboardObjectType.Blank),e.extensionContext=new o((c={},c[n.AddInContext.Unknown]=r.ExtensionContext.Unknown,c[n.AddInContext.Desktop]=r.ExtensionContext.Desktop,c[n.AddInContext.Server]=r.ExtensionContext.Server,c)),e.extensionMode=new o((u={},u[n.AddInMode.Unknown]=r.ExtensionMode.Unknown,u[n.AddInMode.Authoring]=r.ExtensionMode.Authoring,u[n.AddInMode.Viewing]=r.ExtensionMode.Viewing,u)),e.extensionDialogResult=new o((p={},p[n.ExtensionDialogResult.DialogAlreadyOpen]=r.ExtensionDialogResult.DialogAlreadyOpen,p[n.ExtensionDialogResult.InvalidDomain]=r.ExtensionDialogResult.InvalidDomain,p[n.ExtensionDialogResult.Success]=r.ExtensionDialogResult.Success,p)),e.dataType=new o((m={},m[n.DataType.DT_BOOLEAN]=r.DataType.Bool,m[n.DataType.DT_DATE]=r.DataType.Date,m[n.DataType.DT_DATETIME]=r.DataType.DateTime,m[n.DataType.DT_INTEGER]=r.DataType.Int,m[n.DataType.DT_REAL]=r.DataType.Float,m[n.DataType.DT_STRING]=r.DataType.String,m[n.DataType.DT_SPATIAL]=r.DataType.Spatial,m)),e.fieldAggregationType=new o((g={},g[n.AggType.AGG_ATTR]=r.FieldAggregationType.Attr,g[n.AggType.AGG_AVG]=r.FieldAggregationType.Avg,g[n.AggType.AGG_COUNT]=r.FieldAggregationType.Count,g[n.AggType.AGG_COUNTD]=r.FieldAggregationType.Countd,g[n.AggType.AGG_DAY]=r.FieldAggregationType.Day,g[n.AggType.AGG_END]=r.FieldAggregationType.End,g[n.AggType.AGG_HOUR]=r.FieldAggregationType.Hour,g[n.AggType.AGG_INOUT]=r.FieldAggregationType.InOut,g[n.AggType.AGG_KURTOSIS]=r.FieldAggregationType.Kurtosis,g[n.AggType.AGG_MAX]=r.FieldAggregationType.Max,g[n.AggType.AGG_MDY]=r.FieldAggregationType.Mdy,g[n.AggType.AGG_MEDIAN]=r.FieldAggregationType.Median,g[n.AggType.AGG_MIN]=r.FieldAggregationType.Min,g[n.AggType.AGG_MINUTE]=r.FieldAggregationType.Minute,g[n.AggType.AGG_MONTHYEAR]=r.FieldAggregationType.MonthYear,g[n.AggType.AGG_NONE]=r.FieldAggregationType.None,g[n.AggType.AGG_QTR]=r.FieldAggregationType.Qtr,g[n.AggType.AGG_QUART1]=r.FieldAggregationType.Quart1,g[n.AggType.AGG_QUART3]=r.FieldAggregationType.Quart3,g[n.AggType.AGG_SECOND]=r.FieldAggregationType.Second,g[n.AggType.AGG_SKEWNESS]=r.FieldAggregationType.Skewness,g[n.AggType.AGG_STDEV]=r.FieldAggregationType.Stdev,g[n.AggType.AGG_STDEVP]=r.FieldAggregationType.Stdevp,g[n.AggType.AGG_SUM]=r.FieldAggregationType.Sum,g[n.AggType.TRUNC_DAY]=r.FieldAggregationType.TruncDay,g[n.AggType.TRUNC_HOUR]=r.FieldAggregationType.TruncHour,g[n.AggType.TRUNC_MINUTE]=r.FieldAggregationType.TruncMinute,g[n.AggType.TRUNC_MONTH]=r.FieldAggregationType.TruncMonth,g[n.AggType.TRUNC_QTR]=r.FieldAggregationType.TruncQtr,g[n.AggType.TRUNC_SECOND]=r.FieldAggregationType.TruncSecond,g[n.AggType.TRUNC_WEEK]=r.FieldAggregationType.TruncWeek,g[n.AggType.TRUNC_YEAR]=r.FieldAggregationType.TruncYear,g[n.AggType.AGG_USER]=r.FieldAggregationType.User,g[n.AggType.AGG_VAR]=r.FieldAggregationType.Var,g[n.AggType.AGG_VARP]=r.FieldAggregationType.Varp,g[n.AggType.AGG_WEEK]=r.FieldAggregationType.Week,g[n.AggType.AGG_WEEKDAY]=r.FieldAggregationType.Weekday,g[n.AggType.AGG_YEAR]=r.FieldAggregationType.Year,g)),e.fieldRoleType=new o((h={},h[n.FieldRole.ROLE_DIMENSION]=r.FieldRoleType.Dimension,h[n.FieldRole.ROLE_MEASURE]=r.FieldRoleType.Measure,h)),e.parameterTypesDomainType=new o((S={},S[n.ParameterTypesDomainType.Domain_Any]=r.DomainRestrictionType.All,S[n.ParameterTypesDomainType.Domain_List]=r.DomainRestrictionType.List,S[n.ParameterTypesDomainType.Domain_Range]=r.DomainRestrictionType.Range,S)),e.dateStepPeriod=new o((f={},f[n.DatePeriodType.PeriodYear]=r.DateStepPeriod.Years,f[n.DatePeriodType.PeriodQuarter]=r.DateStepPeriod.Quarters,f[n.DatePeriodType.PeriodMonth]=r.DateStepPeriod.Months,f[n.DatePeriodType.PeriodWeek]=r.DateStepPeriod.Weeks,f[n.DatePeriodType.PeriodDay]=r.DateStepPeriod.Days,f[n.DatePeriodType.PeriodHour]=r.DateStepPeriod.Hours,f[n.DatePeriodType.PeriodMinute]=r.DateStepPeriod.Minutes,f[n.DatePeriodType.PeriodSecond]=r.DateStepPeriod.Seconds,f)),e.dateRangeType=new o((y={},y[n.FiltersRelativeDateRangeType.RangeCurrent]=r.DateRangeType.Current,y[n.FiltersRelativeDateRangeType.RangeCurrentToDate]=r.DateRangeType.ToDate,y[n.FiltersRelativeDateRangeType.RangeLast1]=r.DateRangeType.Last,y[n.FiltersRelativeDateRangeType.RangeLastN]=r.DateRangeType.LastN,y[n.FiltersRelativeDateRangeType.RangeNext1]=r.DateRangeType.Next,y[n.FiltersRelativeDateRangeType.RangeNextN]=r.DateRangeType.NextN,y)),e.filterDomainType=new o((T={},T[n.FiltersDomainType.Relevant]=r.FilterDomainType.Relevant,T[n.FiltersDomainType.Database]=r.FilterDomainType.Database,T)),e}();t.PresLayerToApiEnumMappings=l;var s=function(){function e(){}return e.filterUpdateType=new o((d={},d[r.FilterUpdateType.Add]=n.FilterUpdateType.ADD,d[r.FilterUpdateType.All]=n.FilterUpdateType.ALL,d[r.FilterUpdateType.Replace]=n.FilterUpdateType.REPLACE,d[r.FilterUpdateType.Remove]=n.FilterUpdateType.REMOVE,d)),e.nullOption=new o((c={},c[r.FilterNullOption.AllValues]=n.FiltersQuantitativeIncludedValues.All,c[r.FilterNullOption.NonNullValues]=n.FiltersQuantitativeIncludedValues.NonNull,c[r.FilterNullOption.NullValues]=n.FiltersQuantitativeIncludedValues.Null,c)),e.filterDomainType=new o((u={},u[r.FilterDomainType.Relevant]=n.FiltersDomainType.Relevant,u[r.FilterDomainType.Database]=n.FiltersDomainType.Database,u)),e}();t.ApiToPresLayerEnumMappings=s;var d,c,u,p,m,g,h,S,f,y,T,d,c,u},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a;!function(e){e.SCALING_NONE="none",e.SCALING_STANDARDIZED="standardized",e.SCALING_NORMALIZED="normalized"}(a=t.DataScaling||(t.DataScaling={}));var r;!function(e){e.ForecastModelTypeAutoSeason="auto-season",e.ForecastModelTypeAuto="auto",e.ForecastModelTypeCustom="custom"}(r=t.ForecastModelType||(t.ForecastModelType={}));var i;!function(e){e.ForecastRangeTypeAuto="auto",e.ForecastRangeTypeNext="next",e.ForecastRangeTypeEndOf="end-of"}(i=t.ForecastRangeType||(t.ForecastRangeType={}));var n;!function(e){e.FS_VALID="fs-valid",e.FS_INVALID_DATETIME="fs-invalid-datetime",e.FS_INVALID_RESPONSE="fs-invalid-response",e.FS_NEED_MORE_DATA="fs-need-more-data",e.FS_TIME_SERIES_TOO_SHORT="fs-time-series-too-short",e.FS_TIME_SERIES_IRREGULAR="fs-time-series-irregular",e.FS_NULL_DATETIME="fs-null-datetime",e.FS_NULL_RESPONSE="fs-null-response",e.FS_METADATA_INVALID="fs-metadata-invalid",e.FS_NO_RESPONSE="fs-no-response",e.FS_EXCESS_DATA="fs-excess-data",e.FS_EXCESS_PARTITIONS="fs-excess-partitions",e.FS_DIMENSION_INVALID="fs-dimension-invalid",e.FS_TABLECALC_INVALID="fs-tablecalc-invalid",e.FS_TIME_SERIES_TOO_IRREGULAR="fs-time-series-too-irregular",e.FS_AGGREGATE_FILTER="fs-aggregate-filter",e.FS_DISAGGREGATE_RESPONSE="fs-disaggregate-response",e.FS_PERCENTAGE_INVALID="fs-percentage-invalid",e.FS_TOTAL_INVALID="fs-total-invalid",e.FS_EXCESS_DATETIME="fs-excess-datetime",e.FS_DATE_AGG_INCOMPATIBLE="fs-date-agg-incompatible",e.FS_TIME_SERIES_NOT_POSITIVE="fs-time-series-not-positive",e.FS_REQUESTED_MODEL_INVALID="fs-requested-model-invalid",e.FS_TOO_SHORT_FOR_SEASON="fs-too-short-for-season",e.FS_REQUESTED_MODEL_UNSTABLE="fs-requested-model-unstable",e.FS_UNDEFINED="fs-undefined"}(n=t.ForecastStatus||(t.ForecastStatus={}));var o;!function(e){e.saAlternateText="saAlternateText",e.saAltMarkColor="saAltMarkColor",e.saAspect="saAspect",e.saAutoSubtitle="saAutoSubtitle",e.saBackgroundColor="saBackgroundColor",e.saBackgroundTransparency="saBackgroundTransparency",e.saBandSize="saBandSize",e.saBandColor="saBandColor",e.saBandLevel="saBandLevel",e.saBodyType="saBodyType",e.saBorderColor="saBorderColor",e.saBorderColorTop="saBorderColorTop",e.saBorderColorRight="saBorderColorRight",e.saBorderColorBottom="saBorderColorBottom",e.saBorderColorLeft="saBorderColorLeft",e.saBorderStyle="saBorderStyle",e.saBorderStyleTop="saBorderStyleTop",e.saBorderStyleRight="saBorderStyleRight",e.saBorderStyleBottom="saBorderStyleBottom",e.saBorderStyleLeft="saBorderStyleLeft",e.saBorderWidth="saBorderWidth",e.saBorderWidthTop="saBorderWidthTop",e.saBorderWidthRight="saBorderWidthRight",e.saBorderWidthBottom="saBorderWidthBottom",e.saBorderWidthLeft="saBorderWidthLeft",e.saBoxplotStyle="saBoxplotStyle",e.saBreakOnSpecial="saBreakOnSpecial",e.saCell="saCell",e.saCellW="saCellW",e.saCellH="saCellH",e.saCellQ="saCellQ",e.saCellQMark="saCellQMark",e.saColor="saColor",e.saColorMode="saColorMode",e.saColLevels="saColLevels",e.saColVertLevels="saColVertLevels",e.saColHorizHeight="saColHorizHeight",e.saColVertHeight="saColVertHeight",e.saColHeight="saColHeight",e.saColWidth="saColWidth",e.saContent="saContent",e.saDisplayFieldLabels="saDisplayFieldLabels",e.saDisplayHeader="saDisplayHeader",e.saDisplayAlternateText="saDisplayAlternateText",e.saDivLevel="saDivLevel",e.saEnabled="saEnabled",e.saFillAboveColor="saFillAboveColor",e.saFillBelowColor="saFillBelowColor",e.saFillColor="saFillColor",e.saFogBGColor="saFogBGColor",e.saFogDesaturationWithoutSelection="saFogDesaturationWithoutSelection",e.saFogDesaturationWithSelection="saFogDesaturationWithSelection",e.saFont="saFont",e.saFontFamily="saFontFamily",e.saFontSize="saFontSize",e.saFontStyle="saFontStyle",e.saFontWeight="saFontWeight",e.saGeographicAreaType="saGeographicAreaType",e.saHAlign="saHAlign",e.saHaloColor="saHaloColor",e.saHaloColorSelected="saHaloColorSelected",e.saHasFill="saHasFill",e.saHasHalo="saHasHalo",e.saHasLabel="saHasLabel",e.saHasStroke="saHasStroke",e.saHeight="saHeight",e.saHeightHeader="saHeightHeader",e.saHighlightLegend="saHighlightLegend",e.saHnaxis="saHnaxis",e.saHnlabel="saHnlabel",e.saInTooltip="saInTooltip",e.saLineEnd="saLineEnd",e.saLineEndSize="saLineEndSize",e.saLineInterpolation="saLineInterpolation",e.saLinePattern="saLinePattern",e.saLinePatternOnly="saLinePatternOnly",e.saLineVisibility="saLineVisibility",e.saMap="saMap",e.saMapStyle="saMapStyle",e.saMargin="saMargin",e.saMarginTop="saMarginTop",e.saMarginRight="saMarginRight",e.saMarginBottom="saMarginBottom",e.saMarginLeft="saMarginLeft",e.saMarkColor="saMarkColor",e.saMarkTransparency="saMarkTransparency",e.saMarkLabelsShow="saMarkLabelsShow",e.saRunningOrderLabelsShow="saRunningOrderLabelsShow",e.saMarkLabelsMode="saMarkLabelsMode",e.saMarkLabelsCull="saMarkLabelsCull",e.saMarkLabelsLineEndFirst="saMarkLabelsLineEndFirst",e.saMarkLabelsLineEndLast="saMarkLabelsLineEndLast",e.saMarkLabelsRangeMin="saMarkLabelsRangeMin",e.saMarkLabelsRangeMax="saMarkLabelsRangeMax",e.saMarkLabelsRangeScope="saMarkLabelsRangeScope",e.saMarkLabelsRangeField="saMarkLabelsRangeField",e.saMarkMarkersMode="saMarkMarkersMode",e.saMaxHeight="saMaxHeight",e.saMaxFontSize="saMaxFontSize",e.saMaxStrokeWidth="saMaxStrokeWidth",e.saMaxWidth="saMaxWidth",e.saMidStrokeWidth="saMidStrokeWidth",e.saMinHeight="saMinHeight",e.saMinFontSize="saMinFontSize",e.saMinLength="saMinLength",e.saMinMapSize="saMinMapSize",e.saMinSize="saMinSize",e.saMinStrokeWidth="saMinStrokeWidth",e.saMinWidth="saMinWidth",e.saNonhighlightColor="saNonhighlightColor",e.saOmitOnSpecial="saOmitOnSpecial",e.saOpacity="saOpacity",e.saOrientation="saOrientation",e.saPadding="saPadding",e.saPaddingTop="saPaddingTop",e.saPaddingRight="saPaddingRight",e.saPaddingBottom="saPaddingBottom",e.saPaddingLeft="saPaddingLeft",e.saPalette="saPalette",e.saRenderFoldReversed="saRenderFoldReversed",e.saReversePalette="saReversePalette",e.saRounding="saRounding",e.saRowHorizLevels="saRowHorizLevels",e.saRowHorizWidth="saRowHorizWidth",e.saRowLevels="saRowLevels",e.saRowVertWidth="saRowVertWidth",e.saSeparator="saSeparator",e.saShape="saShape",e.saShowLabels="saShowLabels",e.saSize="saSize",e.saSizeBar="saSizeBar",e.saSmartAutoAlignment="saSmartAutoAlignment",e.saSpace="saSpace",e.saStrokeColor="saStrokeColor",e.saStrokeSize="saStrokeSize",e.saSubtitle="saSubtitle",e.saTextAlign="saTextAlign",e.saTextAlignDefault="saTextAlignDefault",e.saTextDecoration="saTextDecoration",e.saTextIndent="saTextIndent",e.saTextOrientation="saTextOrientation",e.saTextFormat="saTextFormat",e.saTickColor="saTickColor",e.saTickLength="saTickLength",e.saTickSpacing="saTickSpacing",e.saTitle="saTitle",e.saTotalLabel="saTotalLabel",e.saVAlign="saVAlign",e.saVerticalAlign="saVerticalAlign",e.saVerticalAlignDefault="saVerticalAlignDefault",e.saVnaxis="saVnaxis",e.saVnlabel="saVnlabel",e.saWarnOnSpecial="saWarnOnSpecial",e.saWashout="saWashout",e.saWhiskerEnd="saWhiskerEnd",e.saWhiskerStrokeColor="saWhiskerStrokeColor",e.saWhiskerStrokeSize="saWhiskerStrokeSize",e.saWidth="saWidth",e.saWidthHeader="saWidthHeader",e.saWrap="saWrap",e.saZoom="saZoom",e.saNone="saNone",e.saAny="saAny"}(o=t.StyleAttribute||(t.StyleAttribute={}));var l;!function(e){e.BoxplotStyleTwoTone="two-tone",e.BoxplotStyleModern="modern",e.BoxplotStyleGlass="glass",e.BoxplotStyleClassic="classic",e.BoxplotStyleClassicTwoTone="classic-two-tone"}(l=t.BoxplotStyle||(t.BoxplotStyle={}));var s;!function(e){e.WhiskerEndNone="none",e.WhiskerEndSmall="small",e.WhiskerEndLarge="large"}(s=t.WhiskerEnd||(t.WhiskerEnd={}));var d;!function(e){e.elementAxis="elementAxis",e.elementCell="elementCell",e.elementDatalabel="elementDatalabel",e.elementDropspot="elementDropspot",e.elementHeader="elementHeader",e.elementFieldLabel="elementFieldLabel",e.elementFieldLabelDecoration="elementFieldLabelDecoration",e.elementFieldLabelSpanner="elementFieldLabelSpanner",e.elementLabel="elementLabel",e.elementMark="elementMark",e.elementPane="elementPane",e.elementTable="elementTable",e.elementWorksheet="elementWorksheet",e.elementBasesheet="elementBasesheet",e.elementDashboard="elementDashboard",e.elementStoryboard="elementStoryboard",e.elementCaption="elementCaption",e.elementDropline="elementDropline",e.elementRefline="elementRefline",e.elementRefBand="elementRefBand",e.elementRefBoxplot="elementRefBoxplot",e.elementGridline="elementGridline",e.elementZeroline="elementZeroline",e.elementTrendline="elementTrendline",e.elementTableDiv="elementTableDiv",e.elementHeaderDiv="elementHeaderDiv",e.elementMappedImage="elementMappedImage",e.elementAction="elementAction",e.elementTitle="elementTitle",e.elementLegend="elementLegend",e.elementLegendTitle="elementLegendTitle",e.elementLegendTitleText="elementLegendTitleText",e.elementAxisTitle="elementAxisTitle",e.elementAnnotation="elementAnnotation",e.elementDashTitle="elementDashTitle",e.elementDashSubtitle="elementDashSubtitle",e.elementDashText="elementDashText",e.elementDashZone="elementDashZone",e.elementDashContainer="elementDashContainer",e.elementScrollbar="elementScrollbar",e.elementMapLayer="elementMapLayer",e.elementMap="elementMap",e.elementMapDataLayer="elementMapDataLayer",e.elementQuickFilter="elementQuickFilter",e.elementQuickFilterTitle="elementQuickFilterTitle",e.elementParameterCtrl="elementParameterCtrl",e.elementParameterCtrlTitle="elementParameterCtrlTitle",e.elementPageCardTitle="elementPageCardTitle",e.elementStoryDescription="elementStoryDescription",e.elementStoryPointCaption="elementStoryPointCaption",e.elementStoryTitle="elementStoryTitle",e.elementTooltip="elementTooltip",e.elementAll="elementAll",e.elementPageCardBody="elementPageCardBody",e.elementDataHighlighter="elementDataHighlighter",e.elementDataHighlighterTitle="elementDataHighlighterTitle",e.elementNone="elementNone",e.elementAny="elementAny",e.elementRoot="elementRoot"}(d=t.StyleElement||(t.StyleElement={}));var c;!function(e){e.dcNormal="dcNormal",e.dcTotal="dcTotal",e.dcSubtotal="dcSubtotal",e.dcCOUNT="dcCOUNT"}(c=t.StyleDataClass||(t.StyleDataClass={}));var u;!function(e){e.fsNone="fsNone",e.fsRows="fsRows",e.fsCols="fsCols"}(u=t.StyleFieldScope||(t.StyleFieldScope={}));var p;!function(e){e.ssUnspecified="ssUnspecified",e.ssLight="ssLight",e.ssDark="ssDark"}(p=t.StyleSwatch||(t.StyleSwatch={}));var m;!function(e){e.NormalStyle="font-style-normal",e.Italic="font-style-italic"}(m=t.TableauFontStyle||(t.TableauFontStyle={}));var g;!function(e){e.NoDecoration="text-decoration-none",e.Underline="text-decoration-underline",e.Overline="text-decoration-overline",e.Strikethrough="text-decoration-strikethrough"}(g=t.TextDecoration||(t.TextDecoration={}));var h;!function(e){e.NormalWeight="font-weight-normal",e.Bold="font-weight-bold"}(h=t.FontWeight||(t.FontWeight={}));
var S;!function(e){e.TO_Auto="text-orient-auto",e.TO_Horz="text-orient-horizontal",e.TO_VertUp="text-orient-vertical-up",e.TO_VertDown="text-orient-vertical-down"}(S=t.TextOrient||(t.TextOrient={}));var f;!function(e){e.TA_Start="text-align-start",e.TA_Center="text-align-center",e.TA_End="text-align-end"}(f=t.TextAlign||(t.TextAlign={}));var y;!function(e){e.TextWrapOff="text-wrap-off",e.TextWrapTruncate="text-wrap-truncate",e.TextWrapOn="text-wrap-on",e.TextWrapAuto="text-wrap-auto"}(y=t.TextWrapMode||(t.TextWrapMode={}));var T;!function(e){e.TextWholeLineOff="text-whole-line-off",e.TextWholeLineOn="text-whole-line-on",e.TextWholeLineAuto="text-whole-line-auto"}(T=t.TextWholeLineMode||(t.TextWholeLineMode={}));var b;!function(e){e.TextBreakWhitespaceOnly="text-break-ws-only",e.TextBreakAuto="text-break-auto"}(b=t.TextBreakMode||(t.TextBreakMode={}));var I;!function(e){e.AGG_SUM="sum",e.AGG_AVG="average",e.AGG_MIN="min",e.AGG_MAX="max",e.AGG_STDEV="std-dev",e.AGG_STDEVP="std-dev-p",e.AGG_VAR="var",e.AGG_VARP="var-p",e.AGG_COUNT="count",e.AGG_COUNTD="count-d",e.AGG_MEDIAN="median",e.AGG_ATTR="attr",e.AGG_NONE="none",e.AGG_PERCENTILE="percentile",e.AGG_YEAR="year",e.AGG_QTR="qtr",e.AGG_MONTH="month",e.AGG_DAY="day",e.AGG_HOUR="hour",e.AGG_MINUTE="minute",e.AGG_SECOND="second",e.AGG_WEEK="week",e.AGG_WEEKDAY="weekday",e.AGG_MONTHYEAR="month-year",e.AGG_MDY="mdy",e.AGG_END="end",e.AGG_ISO_YEAR="iso-year",e.AGG_ISO_QTR="iso-qtr",e.AGG_ISO_WEEK="iso-week",e.AGG_ISO_WEEKDAY="iso-weekday",e.TRUNC_YEAR="trunc-year",e.TRUNC_QTR="trunc-qtr",e.TRUNC_MONTH="trunc-month",e.TRUNC_WEEK="trunc-week",e.TRUNC_DAY="trunc-day",e.TRUNC_HOUR="trunc-hour",e.TRUNC_MINUTE="trunc-minute",e.TRUNC_SECOND="trunc-second",e.TRUNC_ISO_YEAR="trunc-iso-year",e.TRUNC_ISO_QTR="trunc-iso-qtr",e.TRUNC_ISO_WEEK="trunc-iso-week",e.TRUNC_ISO_WEEKDAY="trunc-iso-weekday",e.AGG_QUART1="quart1",e.AGG_QUART3="quart3",e.AGG_SKEWNESS="skewness",e.AGG_KURTOSIS="kurtosis",e.AGG_INOUT="in-out",e.AGG_SUM_XSQR="sum-xsqr",e.AGG_USER="user",e.AGG_COLLECT="collect",e.AGG_COVAR="covar",e.AGG_COVARP="covarp",e.AGG_CORR="corr"}(I=t.AggType||(t.AggType={}));var C;!function(e){e.DT_INTEGER="integer",e.DT_REAL="real",e.DT_STRING="cstring",e.DT_DATETIME="datetime",e.DT_BOOLEAN="boolean",e.DT_DATE="date",e.DT_TUPLE="tuple",e.DT_SPATIAL="spatial",e.DT_UNKNOWN="unknown",e.DT_BINARY="binary",e.DT_TIME="time"}(C=t.DataType||(t.DataType={}));var v;!function(e){e.PeriodYear="year",e.PeriodQuarter="quarter",e.PeriodMonth="month",e.PeriodWeek="week",e.PeriodDay="day",e.PeriodHour="hour",e.PeriodMinute="minute",e.PeriodSecond="second"}(v=t.DatePeriodType||(t.DatePeriodType={}));var D;!function(e){e.AutoFormat="auto-format",e.SystemLongDate="system-long-date",e.SystemShortDate="system-short-date",e.SystemNumber="system-number",e.SystemCurrency="system-currency",e.SystemTime="system-time",e.Custom="custom",e.CustomICU="custom-icu",e.CustomNumber="custom-number",e.CustomCurrency="custom-currency",e.CustomScientific="custom-scientific",e.CustomPercentage="custom-percentage"}(D=t.FormatCode||(t.FormatCode={}));var P;!function(e){e.UnitsFmtNone="units-none",e.UnitsFmtThousands="units-thousands",e.UnitsFmtMillions="units-millions",e.UnitsFmtBillionsEnglish="units-billions-english",e.UnitsFmtBillionsStandard="units-billions-standard"}(P=t.UnitsFormatEnum||(t.UnitsFormatEnum={}));var _;!function(e){e.FORECAST_NONE="none",e.FORECAST_VALUE="value",e.FORECAST_INDICATOR="indicator",e.FORECAST_PRECISION="precision",e.FORECAST_QUALITY="quality",e.FORECAST_FIT_TREND="fit_trend",e.FORECAST_PRECISION_PERCENT="precision_percent",e.FORECAST_PREDICTION_INTERVAL_UPPER="prediction_upper",e.FORECAST_PREDICTION_INTERVAL_LOWER="prediction_lower"}(_=t.ForecastColumnType||(t.ForecastColumnType={}));var A;!function(e){e.MMM_Auto="mmm-auto",e.MMM_All="mmm_all",e.MMM_None="mmm_none",e.MMM_Default="mmm_default"}(A=t.MarkMarkersMode||(t.MarkMarkersMode={}));var M;!function(e){e.PERCENT_CELL_IN_PANE="cell-in-pane",e.PERCENT_ROW_IN_PANE="row-in-pane",e.PERCENT_COLUMN_IN_PANE="column-in-pane",e.PERCENT_PANE="pane",e.PERCENT_ROW="row",e.PERCENT_COLUMN="column",e.PERCENT_TABLE="table"}(M=t.PercentMode||(t.PercentMode={}));var F;!function(e){e.SPECIAL_VALUES_HIDE_AND_WARN="hide-and-warn",e.SPECIAL_VALUES_HIDE="hide",e.SPECIAL_VALUES_HIDE_BREAK_LINES="hide-break-lines",e.SPECIAL_VALUES_SHOW="show"}(F=t.SpecialValuesMode||(t.SpecialValuesMode={}));var E;!function(e){e.LAYOUT_CARTESIAN="cartesian",e.LAYOUT_DEFAULT="default"}(E=t.LayoutType||(t.LayoutType={}));var L;!function(e){e.ST_NONE="none-shelf",e.ST_COLUMNS_SHELF="columns-shelf",e.ST_ROWS_SHELF="rows-shelf",e.ST_PAGES_SHELF="pages-shelf",e.ST_FILTER_SHELF="filter-shelf",e.ST_IMAGE_SHELF="image-shelf",e.ST_MEASURES_SHELF="measures-shelf",e.ST_SHOWME_SHELF="show-me-shelf",e.ST_ENCODING_SHELF="encoding-shelf",e.ST_CLUSTER_SHELF="cluster-shelf",e.ST_GEOMETRY_SHELF="geometry-shelf",e.ST_END="end-shelf",e.ST_FINAL="final-shelf"}(L=t.ShelfType||(t.ShelfType={}));var R;!function(e){e.RT_INTERSECT="rt-intersection",e.RT_UNION="rt-union"}(R=t.RestrictType||(t.RestrictType={}));var w;!function(e){e.TM_NONE="none",e.TM_STICKY="sticky",e.TM_SMOOTH="smooth"}(w=t.TooltipMode||(t.TooltipMode={}));var x;!function(e){e.COLS_IN_OUTPUT="cols-in-output",e.COLS_IN_FILTER_SHELF="cols-in-filter-shelf",e.COLS_REF_BY_FILTERS="cols-ref-by-filters",e.COLS_REF_BY_OMEASURES="cols-ref-by-omeasures",e.COLS_REF_BY_JOIN_LOD="cols-ref-by-join-lod",e.COLS_HIDDEN="cols-hidden",e.COLS_REF_BY_SORTS="cols-ref-by-sorts",e.COLS_REF_BY_FILTERS_OR_SORTS="cols-ref-by-filters-or-sorts",e.COLS_ON_SHELVES="cols-on-shelves",e.COLS_ALL="cols-all"}(x=t.ColumnGroups||(t.ColumnGroups={}));var O;!function(e){e.BO_HIDE="buttons-hide"}(O=t.ButtonsOption||(t.ButtonsOption={}));var k;!function(e){e.SRO_ALLOW="selection-relaxation-allow",e.SRO_DISALLOW="selection-relaxation-disallow"}(k=t.SelectionRelaxationOption||(t.SelectionRelaxationOption={}));var N;!function(e){e.ET_TEXT="text-encoding",e.ET_COLOR="color-encoding",e.ET_SIZE="size-encoding",e.ET_SHAPE="shape-encoding",e.ET_IMAGE="image-encoding",e.ET_SORT="sort-encoding",e.ET_WEDGESIZE="wedge-size-encoding",e.ET_GEOMETRY="geometry-encoding",e.ET_LOD="level-of-detail-encoding",e.ET_HIGHLIGHT="highlight-encoding",e.ET_TOOLTIP="tooltip-encoding",e.ET_RUNNINGORDER="runningorder-encoding",e.NUM_ENCODINGS="num-encodings",e.ET_INVALID="invalid-encoding"}(N=t.EncodingType||(t.EncodingType={}));var V;!function(e){e.LHA_Left="h-align-left",e.LHA_Center="h-align-center",e.LHA_Right="h-align-right",e.LHA_Automatic="h-align-auto"}(V=t.LabelHAlignment||(t.LabelHAlignment={}));var U;!function(e){e.LVA_Bottom="v-align-bottom",e.LVA_Center="v-align-center",e.LVA_Top="v-align-top",e.LVA_Automatic="v-align-auto"}(U=t.LabelVAlignment||(t.LabelVAlignment={}));var B;!function(e){e.CenterInOriginalBbox="label-position-center-in-original-box",e.OriginAtLowerLeft="label-position-origin-at-lower-left",e.OriginAtCenter="label-position-origin-at-center"}(B=t.LabelPosition||(t.LabelPosition={}));var G;!function(e){e.CLRM_User="clrm-user",e.CLRM_Auto="clrm-auto",e.CLRM_Match="clrm-match",e.CLRM_None="clrm-none"}(G=t.ColorMode||(t.ColorMode={}));var H;!function(e){e.MLM_All="mlm-all",e.MLM_Selection="mlm-selection",e.MLM_Highlight="mlm-highlight",e.MLM_LineEnds="mlm-line-ends",e.MLM_Range="mlm-range",e.MLM_MostRecent="mlm-most-recent",e.MLM_MultipleValues="mlm-multiple-values",e.MLM_Default="mlm-default"}(H=t.MarkLabelsMode||(t.MarkLabelsMode={}));var W;!function(e){e.MLS_Table="mls-table",e.MLS_Pane="mls-pane",e.MLS_Cell="mls-cell",e.MLS_MultiMark="mls-multimark",e.MLS_MultipleValues="mls-multiple-values",e.MLS_Default="mls-default"}(W=t.MarkLabelsScope||(t.MarkLabelsScope={}));var j;!function(e){e.MLV_Hidden="mlv-hidden",e.MLV_Visible="mlv-visible",e.MLV_UseCurrent="mlv-use-current"}(j=t.MarkLabelsVisibility||(t.MarkLabelsVisibility={}));var z;!function(e){e.StackingOff="off",e.StackingOn="on",e.StackingAuto="auto"}(z=t.StackingMode||(t.StackingMode={}));var Q;!function(e){e.MarkAlignmentLeft="mark-alignment-left",e.MarkAlignmentRight="mark-alignment-right",e.MarkAlignmentCenter="mark-alignment-center"}(Q=t.MarkAlignment||(t.MarkAlignment={}));var q;!function(e){e.PLC_None="pane-label-composition-none",e.PLC_Mixed="pane-label-composition-mixed",e.PLC_All="pane-label-composition-all"}(q=t.PaneLabelComposition||(t.PaneLabelComposition={}));var Z;!function(e){e.PT_AUTOMATIC="automatic",e.PT_TEXT="text",e.PT_IMAGE="image",e.PT_SHAPE="shape",e.PT_RECTANGLE="rectangle",e.PT_BAR="bar",e.PT_GANTT="gantt",e.PT_SQUARE="square",e.PT_CIRCLE="circle",e.PT_POLYLINE="polyline",e.PT_LINE="line",e.PT_POLYGON="polygon",e.PT_AREA="area",e.PT_PIE="pie",e.PT_MULTIPOLYGON="multipolygon",e.PT_MULTIPLE="multiple",e.NUM_PRIMITIVES="count",e.PT_INVALID="invalid"}(Z=t.PrimitiveType||(t.PrimitiveType={}));var Y;!function(e){e.MT_POINT="point",e.MT_LINE="line",e.MT_AREA="area",e.MT_INVALID="invalid"}(Y=t.MarkType||(t.MarkType={}));var K;!function(e){e.AXIS_AUTO="auto",e.AXIS_X="x",e.AXIS_Y="y"}(K=t.PaneAxis||(t.PaneAxis={}));var J;!function(e){e.Rounding_None="none",e.Rounding_Small="small",e.Rounding_Medium="medium",e.Rounding_Large="large"}(J=t.Rounding||(t.Rounding={}));var X;!function(e){e.LineEnd_None="none",e.LineEnd_Arrow="arrow",e.LineEnd_OpenArrow="open-arrow",e.LineEnd_Dot="dot"}(X=t.LineEnd||(t.LineEnd={}));var $;!function(e){e.LineEndSize_Smallest="smallest",e.LineEndSize_Smaller="smaller",e.LineEndSize_Small="small",e.LineEndSize_Medium="medium",e.LineEndSize_Large="large",e.LineEndSize_Larger="larger",e.LineEndSize_Largest="largest"}($=t.LineEndSize||(t.LineEndSize={}));var ee;!function(e){e.BodyType_None="none",e.BodyType_Box="box",e.BodyType_Edge="edge"}(ee=t.BodyType||(t.BodyType={}));var te;!function(e){e.themeClassic="classic",e.themeModern="modern",e.themeClean="clean",e.themeSmooth="smooth",e.themeCustom="custom"}(te=t.StyleTheme||(t.StyleTheme={}));var ae;!function(e){e.afNone="none",e.afFolded="folded",e.afSynchronized="synchronized"}(ae=t.AxisFoldState||(t.AxisFoldState={}));var re;!function(e){e.LinePatternNone="none",e.LinePatternSolid="solid",e.LinePatternDashed="dashed",e.LinePatternDotted="dotted"}(re=t.LinePattern||(t.LinePattern={}));var ie;!function(e){e.LineVisibilityAuto="automatic",e.LineVisibilityOn="on",e.LineVisibilityOff="off"}(ie=t.LineVisibility||(t.LineVisibility={}));var ne;!function(e){e.StylesLinePatternSolid="solid",e.StylesLinePatternDashed="dashed",e.StylesLinePatternDotted="dotted"}(ne=t.StylesLinePattern||(t.StylesLinePattern={}));var oe;!function(e){e.LineCapFlat="flat",e.LineCapSquare="square",e.LineCapRound="round",e.LineCapTriangle="triangle"}(oe=t.LineCap||(t.LineCap={}));var le;!function(e){e.BevelJoin="bevel",e.MiterJoin="miter",e.RoundJoin="round"}(le=t.LineJoin||(t.LineJoin={}));var se;!function(e){e.AlignmentCenter="center",e.AlignmentInset="inset"}(se=t.LineAlignment||(t.LineAlignment={}));var de;!function(e){e.FillEvenOdd="even-odd",e.FillWinding="winding"}(de=t.FillMode||(t.FillMode={}));var ce;!function(e){e.BorderStyleNone="bs-none",e.BorderStyleHidden="bs-hidden",e.BorderStyleDotted="bs-dotted",e.BorderStyleDashed="bs-dashed",e.BorderStyleSolid="bs-solid",e.BorderStyleDouble="bs-double",e.BorderStyleGroove="bs-groove",e.BorderStyleRidge="bs-ridge",e.BorderStyleInset="bs-inset",e.BorderStyleOutset="bs-outset",e.BorderStyleInvalid="bs-invalid"}(ce=t.BorderStyle||(t.BorderStyle={}));var ue;!function(e){e.ColorPaletteRegular="color-palette-regular",e.ColorPaletteOrderedDiverging="palette-ordered-diverging",e.ColorPaletteOrderedLinear="palette-ordered-linear"}(ue=t.ColorPaletteType||(t.ColorPaletteType={}));var pe;!function(e){e.PaletteFlagNone="palette-flag-none",e.PaletteFlagCustom="palette-flag-custom",e.PaletteFlagNotQuantitative="palette-flag-not-quantitative",e.PaletteFlagNotCategorical="palette-flag-not-categorical",e.PaletteFlagNotReferenceBand="palette-flag-not-reference-band",e.PaletteFlagNotBoxplot="palette-flag-not-boxplot",e.PaletteFlagNotFilledMapLight="palette-flag-not-filled-map-light",e.PaletteFlagNotFilledMapDark="palette-flag-not-filled-map-dark",e.PaletteFlagLegacy="palette-flag-legacy"}(pe=t.PaletteFlags||(t.PaletteFlags={}));var me;!function(e){e.SmallNominal="palette-default-small-nominal",e.LargeNominal="palette-default-large-nominal",e.Ordinal="palette-default-ordinal",e.QuantitativePositive="palette-default-quant-pos",e.QuantitativeNegative="palette-default-quant-neg",e.QuantitativeDiverging="palette-default-quant-div",e.QuantitativePositiveLight="palette-default-quant-pos-light",e.QuantitativeNegativeLight="palette-default-quant-neg-light",e.QuantitativeDivergingLight="palette-default-quant-div-light",e.QuantitativePositiveArea="palette-default-quant-pos-area",e.QuantitativeNegativeArea="palette-default-quant-neg-area",e.QuantitativeDivergingArea="palette-default-quant-div-area"}(me=t.DefaultPaletteType||(t.DefaultPaletteType={}));var ge;!function(e){e.Both="show-both",e.Upper="show-upper",e.Lower="show-lower"}(ge=t.ShowBounds||(t.ShowBounds={}));var he;!function(e){e.Sample="stdev-sample",e.Population="stdev-population"}(he=t.StDevType||(t.StDevType={}));var Se;!function(e){e.None="none",e.Line="line",e.Band="band",e.Distribution="distribution",e.Boxplot="boxplot"}(Se=t.ReferenceLineFormulaGroup||(t.ReferenceLineFormulaGroup={}));var fe;!function(e){e.PerCell="per-cell",e.PerPane="per-pane",e.PerTable="per-table"}(fe=t.ReferenceLineScopeType||(t.ReferenceLineScopeType={}));var ye;!function(e){e.None="none",e.Automatic="automatic",e.Value="value",e.Computation="computation",e.Custom="custom"}(ye=t.ReferenceLineLabelType||(t.ReferenceLineLabelType={}));var Te;!function(e){e.Constant="constant",e.Total="total",e.Sum="sum",e.Min="min",e.Max="max",e.Average="average",e.Median="median",e.Quantiles="quantiles",e.Percentile="percentile",e.StandardDeviation="standard-deviation",e.ConfidenceInterval="confidence-interval",e.MedianConfidenceInterval="median-confidence-interval"}(Te=t.ReferenceLineFormulaType||(t.ReferenceLineFormulaType={}));var be;!function(e){e.LineOnly="line-only",e.LineAndConfidenceInterval="line-and-interval",e.ConfidenceIntervalOnly="interval-only"}(be=t.ReferenceLineConfidenceIntervalState||(t.ReferenceLineConfidenceIntervalState={}));var Ie;!function(e){e.Percentages="percentages",e.Percentiles="percentiles",e.Quantiles="quantiles",e.StandardDeviation="standard-deviation"}(Ie=t.ReferenceLineDistributionType||(t.ReferenceLineDistributionType={}));var Ce;!function(e){e.MeasureFormula="measure-formula",e.BooleanFilter="boolean-filter"}(Ce=t.ReferenceLineLODCalcType||(t.ReferenceLineLODCalcType={}));var ve;!function(e){e.Standard="standard",e.Minmax="minmax"}(ve=t.BoxplotWhiskerType||(t.BoxplotWhiskerType={}));var De;!function(e){e.CTC_Database="database",e.CTC_More="more",e.CTC_Other="other",e.CTC_Invalid="invalid"}(De=t.ConnectionTypeCategory||(t.ConnectionTypeCategory={}));var Pe;!function(e){e.CTG_File="file",e.CTG_Server="server",e.CTG_MruServer="mru-server",e.CTG_Invalid="invalid"}(Pe=t.ConnectionTypeGroup||(t.ConnectionTypeGroup={}));var _e;!function(e){e.CMC_Name="name",e.CMC_Description="description",e.CMC_LastUpdated="last-updated",e.CMC_Invalid="invalid"}(_e=t.CubeMetadataCategory||(t.CubeMetadataCategory={}));var Ae;!function(e){e.CWT_JoinArea="join-area",e.CWT_CubeSelection="cube-selection",e.CWT_GoogleAnalytics="google-analytics",e.CWT_TableauServer="tableau-server",e.CWT_NoWidget="no-widget",e.CWT_Invalid="invalid"}(Ae=t.ConnectionWidgetType||(t.ConnectionWidgetType={}));var Me;!function(e){e.GA_Account="ga-account",e.GA_Property="ga-property",e.GA_View="ga-view",e.GA_Invalid="invalid"}(Me=t.GoogleBasicInfoType||(t.GoogleBasicInfoType={}));var Fe;!function(e){e.CST_ComboBox="combo-box",e.CST_LineEdit="line-edit",e.CST_LineEditBrowse="line-edit-browse",e.CST_Invalid="invalid"}(Fe=t.ConnectionSpecificationType||(t.ConnectionSpecificationType={}));var Ee;!function(e){e.DateRangeFirst="date-range-first",e.DateRangeLast30Days="date-range-last30",e.DateRangeToday="date-range-today",e.DateRangeYesterday="date-range-yesterday",e.DateRangeLastWeek="date-range-last-week",e.DateRangeLastMonth="date-range-last-month",e.DateRangeLastYear="date-range-last-year",e.DateRangeThisWeekToYesterday="date-range-this-week-to-yesterday",e.DateRangeThisMonthToYesterday="date-range-this-month-to-yesterday",e.DateRangeThisYearToYesterday="date-range-this-year-to-yesterday",e.DateRangeLastWeekToYesterday="date-range-last-week-to-yesterday",e.DateRangeLastMonthToYesterday="date-range-last-month-to-yesterday",e.DateRangeLastYearToYesterday="date-range-last-year-to-yesterday",e.DateRangeFixedRange="date-range-fixed-range",e.DateRangeFixedStart="date-range-fixed-start",e.DateRangeCount="date-range-count"}(Ee=t.DateRange||(t.DateRange={}));var Le;!function(e){e.CSWT_Invalid="invalid",e.CSWT_Access="access",e.CSWT_ODBC="odbc",e.CSWT_Cube="cube",e.CSWT_Relational="relational"}(Le=t.ConnectServerWidgetType||(t.ConnectServerWidgetType={}));var Re;!function(e){e.AuthModeNone="auth-mode-none",e.AuthModeBasic="auth-mode-basic",e.AuthModeBasicNoValidateFields="auth-mode-basic-no-validate-fields",e.AuthModeBasicUserNameOnly="auth-mode-basic-username-only",e.AuthModeBasicAWS="auth-mode-basic-aws",e.AuthModeRadio="auth-mode-radio",e.AuthModeRadioUnindented="auth-mode-radio-unindented",e.AuthModeComboBox="auth-mode-combobox",e.AuthModeComboBoxIntegrated="auth-mode-combobox-integrated",e.AuthModeHive="auth-mode-hive",e.AuthModeOData="auth-mode-odata",e.AuthModeSharePoint="auth-mode-sharepoint",e.AuthModeSAPBW="auth-mode-sapbw",e.AuthModeSwitchModal="auth-mode-switch-modal"}(Re=t.AuthenticationEnumsMode||(t.AuthenticationEnumsMode={}));var we;!function(e){e.ReconnectModeNone="reconnect-mode-none",e.ReconnectModeBasic="reconnect-mode-basic",e.ReconnectModeAccess="reconnect-mode-access",e.ReconnectModeDataMarket="reconnect-mode-data-market",e.ReconnectModeGoogleOAuth="reconnect-mode-google-oauth",e.ReconnectModeSalesforceOAuth="reconnect-mode-salesforce-oauth",e.ReconnectModeWebData="reconnect-mode-web-data"}(we=t.AuthenticationEnumsReconnectMode||(t.AuthenticationEnumsReconnectMode={}));var xe;!function(e){e.AuthExplicit="auth-option-explicit",e.AuthExplicitUnindented="auth-option-explicit-unindented",e.AuthUseWindows="auth-option-use-windows",e.AuthUseWindowsPreferred="auth-option-windows-preferred",e.AuthTeradata="auth-option-teradata",e.AuthLDAP="auth-option-ldap",e.AuthVirtualNode="auth-option-virtual-node",e.AuthODataAccount="auth-option-odata",e.AuthNone="auth-option-none",e.AuthKerberos="auth-option-kerberos",e.AuthIntegrated="auth-option-integrated",e.AuthUsername="auth-option-username",e.AuthUsernameAndPassword="auth-option-username-and-password",e.AuthSSL="auth-option-ssl",e.AuthHDIEmulator="auth-hdi-emulator",e.AuthHDIService="auth-hdi-service",e.AuthHTTP="auth-http",e.AuthHTTPS="auth-https",e.AuthAccessNoSecurity="auth-option-access-no",e.AuthAccessYesSecurity="auth-option-access-yes",e.AuthOAuth="auth-oauth",e.AuthForms="auth-forms",e.AuthThirdPartySSO="auth-third-party-SSO",e.AuthInvalid="auth-option-invalid",e.AuthSAMLIdP="auth-option-saml-idp"}(xe=t.AuthenticationEnumsAuthOption||(t.AuthenticationEnumsAuthOption={}));var Oe;!function(e){e.WorkbookLoadValidation="workbook-load-validation",e.AutoValidation="auto-validation",e.ForceValidation="force-validation",e.PreventValidation="prevent-validation",e.PreventValidationAndThrow="prevent-validation-and-throw"}(Oe=t.DataSourceParserValidationMode||(t.DataSourceParserValidationMode={}));var ke;!function(e){e.DATASOURCE_ORDER="datasource-order",e.ALPHA_PER_TABLE="alpha-per-table",e.ALPHABETICAL_ORDER="alphabetical-order",e.CUSTOM_ORDER="custom-order"}(ke=t.FieldOrderType||(t.FieldOrderType={}));var Ne;!function(e){e.LIM_Linear="lim-linear",e.LIM_Step="lim-step",e.LIM_Jump="lim-jump"}(Ne=t.LineInterpolationMode||(t.LineInterpolationMode={}));var Ve;!function(e){e.FOLDER_DIMENSIONS="dimensions",e.FOLDER_MEASURES="measure",e.FOLDER_GROUPS="groups",e.FOLDER_PARAMETERS="parameters"}(Ve=t.FolderRole||(t.FolderRole={}));var Ue;!function(e){e.FT_SET_ALL="all",e.FT_SET_CUBE_MEASURES="cube-measures",e.FT_SET_CUBE_DIMENSIONS="cube-dimensions"}(Ue=t.FieldTypeIconSet||(t.FieldTypeIconSet={}));var Be;!function(e){e.PIVOT_ON_KEY="pivot-on-key",e.PIVOT_ON_ALIAS="pivot-on-alias"}(Be=t.FieldPivotStrategy||(t.FieldPivotStrategy={}));var Ge;!function(e){e.ALIAS_NOTSET="alias-not-set",e.ALIAS_BEGIN="alias-begin",e.ALIAS_KEY="alias-key",e.ALIAS_KEY_NAME="alias-key-name",e.ALIAS_KEY_MEDNAME="alias-key-medname",e.ALIAS_KEY_LONGNAME="alias-key-longname",e.ALIAS_NAME="alias-name",e.ALIAS_NAME_KEY="alias-name-key",e.ALIAS_MEDNAME="alias-medname",e.ALIAS_MEDNAME_KEY="alias-medname-key",e.ALIAS_LONGNAME="alias-longname",e.ALIAS_LONGNAME_KEY="alias-longname-key",e.ALIAS_END="alias-end"}(Ge=t.AliasType||(t.AliasType={}));var He;!function(e){e.MASK_ALIAS_KEY="mask-alias-key",e.MASK_ALIAS_NAME="mask-alias-name",e.MASK_ALIAS_MEDNAME="mask-alias-medname",e.MASK_ALIAS_LONGNAME="mask-alias-longname"}(He=t.AliasTypes||(t.AliasTypes={}));var We;!function(e){e.ROLE_DIMENSION="dimension",e.ROLE_MEASURE="measure",e.ROLE_UNKNOWN="unknown"}(We=t.FieldRole||(t.FieldRole={}));var je;!function(e){e.TYPE_QUANTITATIVE="quantitative",e.TYPE_ORDINAL="ordinal",e.TYPE_NOMINAL="nominal",e.TYPE_UNKNOWN="unknown"}(je=t.FieldType||(t.FieldType={}));var ze;!function(e){e.DSO_ALPHABETIC="dso-alphabetic",e.DSO_ORDINAL="dso-ordinal"}(ze=t.DataSourceOrder||(t.DataSourceOrder={}));var Qe;!function(e){e.COL_METADATA="col-metadata",e.COL_DATABASE="col-database",e.COL_NUMERICBIN="col-numericbin",e.COL_CATEGORICALBIN="col-categoricalbin",e.COL_INSTANCE="col-instance",e.COL_MDXCALC="col-mdxcalc",e.COL_USERCALC="col-usercalc",e.COL_DANGLING="col-dangling",e.COL_LOCALDATA="col-localdata",e.COL_VISUALDATA="col-visualdata",e.COL_GROUP="col-group"}(Qe=t.ColumnClass||(t.ColumnClass={}));var qe;!function(e){e.VTAGG_SUM="sum",e.VTAGG_AVG="avg",e.VTAGG_MIN="min",e.VTAGG_MAX="max",e.VTAGG_SERVER="server",e.VTAGG_NONE="none",e.VTAGG_DEFAULT="default"}(qe=t.VTAggType||(t.VTAggType={}));var Ze;!function(e){e.NoEnumerationEntity="no-enumeration-entity",e.DatabaseEntity="database-entity",e.SchemaEntity="schema-entity",e.TableEntity="table-entity"}(Ze=t.EntityType||(t.EntityType={}));var Ye;!function(e){e.PickEntitySearchType_StartsWith="starts-with",e.PickEntitySearchType_Contains="contains",e.PickEntitySearchType_ExactMatch="exact-match",e.PickEntitySearchType_DEFAULT="default"}(Ye=t.PickEntitySearchType||(t.PickEntitySearchType={}));var Ke;!function(e){e.LogicalOr="op-logical-or",e.LogicalAnd="op-logical-and",e.LogicalNot="op-logical-not",e.BitwiseXOr="op-bitwise-xor",e.BitwiseOr="op-bitwise-or",e.Equals="op-equals",e.Greater="op-greater",e.Less="op-less",e.GEqual="op-gequal",e.LEqual="op-lequal",e.NEqual="op-nequal",e.Plus="op-plus",e.Minus="op-minus",e.BitwiseAnd="op-bitwise-and",e.Multiply="op-multiply",e.Divide="op-divide",e.Modulo="op-modulo",e.Power="op-power",e.Positive="op-positive",e.Negative="op-negative",e.BitwiseNot="op-bitwise-not",e.Column="op-column",e.String="op-string",e.Number="op-number",e.Date="op-date",e.Boolean="op-boolean",e.Funcall="op-funcall",e.LParen="op-lparen",e.RParen="op-rparen",e.Comma="op-comma",e.Ident="op-ident",e.Null="op-null",e.If="op-if",e.Elseif="op-elseif",e.Case="op-case",e.When="op-when",e.Then="op-then",e.Else="op-else",e.EndExpr="op-endexpr",e.Whitespace="op-whitespace",e.Comment="op-comment",e.LBrace="op-lbrace",e.RBrace="op-rbrace",e.Colon="op-colon",e.Bar="op-bar",e.Txtype="op-txtype",e.End="op-end",e.RBrackets="op-rbrackets",e.Invalid="op-invalid"}(Ke=t.ExpressionOp||(t.ExpressionOp={}));var Je;!function(e){e.TB_Invalid="tribool-invalid",e.TB_False="tribool-false",e.TB_True="tribool-true"}(Je=t.TriBool||(t.TriBool={}));var Xe;!function(e){e.ROS_Relative="reference-options-set-relative",e.ROS_Fixed="reference-options-set-fixed",e.ROS_Parameter="reference-options-set-parameter",e.ROS_None="reference-options-set-none"}(Xe=t.ReferenceOptionsSet||(t.ReferenceOptionsSet={}));var $e;!function(e){e.Hidden="widget-state-hidden",e.Disabled="widget-state-disabled",e.Enabled="widget-state-enabled"}($e=t.WidgetState||(t.WidgetState={}));var et;!function(e){e.Competition="rank-type-competition",e.ModifiedCompetition="rank-type-modified-competition",e.Dense="rank-type-dense",e.Unique="rank-type-unique"}(et=t.RankType||(t.RankType={}));var tt;!function(e){e.TableCalcCommandClear="clear"}(tt=t.TableCalcCommandType||(t.TableCalcCommandType={}));var at;!function(e){e.Primary="primary",e.Secondary="secondary",e.Nested="nested"}(at=t.CalcNestingLevel||(t.CalcNestingLevel={}));var rt;!function(e){e.DecimalModeAutomatic="automatic",e.DecimalModeManual="manual"}(rt=t.DecimalMode||(t.DecimalMode={}));var it;!function(e){e.OTField="field",e.OTRows="rows",e.OTColumns="columns",e.OTTable="table",e.OTTableColumnPrecedence="table-column-precedence",e.OTRowInPane="row-in-pane",e.OTColumnInPane="column-in-pane",e.OTPane="pane",e.OTPaneColumnPrecedence="pane-column-precedence",e.OTCellInPane="cell-in-pane"}(it=t.TableCalcOrderingType||(t.TableCalcOrderingType={}));var nt;!function(e){e.SM_Automatic="sort-mode-automatic",e.SM_Custom="sort-mode-custom"}(nt=t.TableCalcSortMode||(t.TableCalcSortMode={}));var ot;!function(e){e.TC_NONE="none",e.TC_CUMULATIVE="cumulative",e.TC_WINDOW="window",e.TC_DIFF="diff",e.TC_PCTDIFF="pct-diff",e.TC_PCTVALUE="pct-value",e.TC_PCTTOTAL="pct-total",e.TC_RANK="rank",e.TC_PCTRANK="pct-rank",e.TC_CUSTOM="custom"}(ot=t.TableCalcTableCalcType||(t.TableCalcTableCalcType={}));var lt;!function(e){e.QuickTableCalcCommandRunTotal="run-total",e.QuickTableCalcCommandDifference="difference",e.QuickTableCalcCommandPctDiff="pct-diff",e.QuickTableCalcCommandPctTotal="pct-total",e.QuickTableCalcCommandRank="rank",e.QuickTableCalcCommandPctRank="pct-rank",e.QuickTableCalcCommandMovingAvg="moving-avg",e.QuickTableCalcCommandYtd="ytd",e.QuickTableCalcCommandCgr="cgr",e.QuickTableCalcCommandYOverY="y-over-y",e.QuickTableCalcCommandYtdGrowth="ytd-growth",e.QuickTableCalcCommandCustom="custom"}(lt=t.QuickTableCalcCommandType||(t.QuickTableCalcCommandType={}));var st;!function(e){e.TableCalcAddressCommandRel="rel",e.TableCalcAddressCommandAbs="abs",e.TableCalcAddressCommandParam="param",e.TableCalcAddressCommandMore="more"}(st=t.TableCalcAddressCommandType||(t.TableCalcAddressCommandType={}));var dt;!function(e){e.RelAddrFirst="relative-address-first",e.RelAddrPrevious="relative-address-previous",e.RelAddrNext="relative-address-next",e.RelAddrLast="relative-address-last"}(dt=t.TableCalcRelativeAddress||(t.TableCalcRelativeAddress={}));var ct;!function(e){e.Unbinned="unbinned",e.BinMember="categorical-bin-member",e.Bin="categorical-bin"}(ct=t.CategoricalBinItemType||(t.CategoricalBinItemType={}));var ut;!function(e){e.None="none",e.GenericAuthClass="generic-auth-class",e.ProviderClass="provider-class",e.DataConnectionClass="data-connection-class"}(ut=t.CredentialTypePropertiesFlag||(t.CredentialTypePropertiesFlag={}));var pt;!function(e){e.Invalid="invalid",e.WebDataConnector="web-data-connector",e.CloudFileConnector="cloud-file-connector",e.LegacyConnector="legacy-connector"}(pt=t.ConnectorType||(t.ConnectorType={}));var mt;!function(e){e.ListItem="list-item",e.Sheet="sheet",e.FoundTable="found-table",e.NamedRange="named-range",e.StoredProcedure="stored-procedure"}(mt=t.TablePillIcon||(t.TablePillIcon={}));var gt;!function(e){e.JVE_NoError="no-error",e.JVE_EmptyClause="empty-clause",e.JVE_TypeMismatch="type-mismatch",e.JVE_InvalidField="invalid-field",e.JVE_BadClause="bad-clause",e.JVE_BadInputRelation="bad-input-relation",e.JVE_RepeatedFieldReferences="repeated-field-references",e.JVE_UnsupportedJoinType="unsupported-join-type",e.JVE_InvalidCalculation="invalid-calculation",e.JVE_NonSpatialType="non-spatial-type",e.JVE_NonSpatialComparison="non-spatial-comp",e.JVE_Unknown="unknown"}(gt=t.JoinValidationError||(t.JoinValidationError={}));var ht;!function(e){e.InvalidDS="invalid-d-s",e.FileDS="file-d-s",e.ServerDS="server-d-s",e.InternetDS="internet-d-s",e.TableauServerDS="tableau-server-d-s"}(ht=t.ConnectionTypeEnum||(t.ConnectionTypeEnum={}));var St;!function(e){e.Unknown="unknown",e.CreateProtocolFailed="create-protocol-failed",e.LoadMetadataFailed="load-metadata-failed"}(St=t.ConnectionErrorStage||(t.ConnectionErrorStage={}));var ft;!function(e){e.ST_ASC="asc",e.ST_DESC="desc"}(ft=t.SortDirection||(t.SortDirection={}));var yt;!function(e){e.ST_NATURAL="data-source-order",e.ST_ALPHABETIC="alpha",e.ST_COMPUTED="field",e.ST_MANUAL="manual"}(yt=t.SortType||(t.SortType={}));var Tt;!function(e){e.None="none",e.Nested="nested"}(Tt=t.SortPartitioning||(t.SortPartitioning={}));var bt;!function(e){e.ST_TOP="top",e.ST_BOTTOM="bottom"}(bt=t.SortEnd||(t.SortEnd={}));var It;!function(e){e.SQL_InnerJoin="sql-inner-join",e.SQL_LeftJoin="sql-left-join",e.SQL_RightJoin="sql-right-join",e.SQL_FullJoin="sql-full-join",e.SQL_CrossJoin="sql-cross-join"}(It=t.SQLJoinType||(t.SQLJoinType={}));var Ct;!function(e){e.Success="set-axis-data-value-result-success",e.ParseFailure="set-axis-data-value-result-parse-failure",e.ValueFailure="set-axis-data-value-result-value-failure"}(Ct=t.SetAxisDataValueResult||(t.SetAxisDataValueResult={}));var vt;!function(e){e.Automatic="axis-extent-automatic",e.Uniform="axis-extent-uniform",e.Independent="axis-extent-independent",e.Fixed="axis-extent-fixed"}(vt=t.AxisExtentType||(t.AxisExtentType={}));var Dt;!function(e){e.NoUnits="no-units",e.Years="years",e.Quarters="quarters",e.Months="months",e.Weeks="weeks",e.Days="days",e.Hours="hours",e.Minutes="minutes",e.Seconds="seconds"}(Dt=t.TickSpacingUnits||(t.TickSpacingUnits={}));var Pt;!function(e){e.IncludeTotals="include-totals",e.ExcludeTotals="exclude-totals"}(Pt=t.TotalsInclusion||(t.TotalsInclusion={}));var _t;!function(e){e.TicksAutomatic="ticks-automatic",e.TicksManual="ticks-manual",e.TicksNone="ticks-None"}(_t=t.TickMarkState||(t.TickMarkState={}));var At;!function(e){e.AutomaticRange="automatic-range",e.UniformRange="uniform-range",e.IndependentRange="independent-range",e.FixedRange="fixed-range",e.FixedMin="fixed-min",e.FixedMax="fixed-max",e.FixedMinUniformMax="fixed-min-uniform-max",e.FixedMinIndependentMax="fixed-min-independent-max",e.FixedMaxUniformMin="fixed-max-uniform-min",e.FixedMaxIndependentMin="fixed-max-independent-min",e.FixedRangeOrdinal="fixed-range-ordinal"}(At=t.AxisRangeType||(t.AxisRangeType={}));var Mt;!function(e){e.None="none",e.FontSize="fontsize",e.FontName="fontname",e.FontColor="color",e.Bold="bold",e.Italic="italic",e.Underline="underline",e.AlignLeft="justifyleft",e.AlignCenter="justifycenter",e.AlignRight="justifyright",e.ClearFormatting="clearformatting",e.TableauKeywords="tableaukeywords"}(Mt=t.RichTextEditorWidgetKey||(t.RichTextEditorWidgetKey={}));var Ft;!function(e){e.CSC_Taller="taller",e.CSC_Shorter="shorter",e.CSC_Wider="wider",e.CSC_Narrower="narrower",e.CSC_Bigger="bigger",e.CSC_Smaller="smaller"}(Ft=t.CellSizeChange||(t.CellSizeChange={}));var Et;!function(e){e.CLT_Square="square",e.CLT_Text="text"}(Et=t.CellTypeEnum||(t.CellTypeEnum={}));var Lt;!function(e){e.FT_FormatItem="formatItem",e.FT_FormatContainer="formatContainer",e.FT_FormatControl="formatControl"}(Lt=t.TypeOfFormatItem||(t.TypeOfFormatItem={}));var Rt;!function(e){e.FT_FormatPane="formatPane",e.FT_FormatSection="formatSection",e.FT_CollapsibleSection="collapsibleSection",e.FT_CompositeContainer="compositeContainer",e.FT_UnitContainer="unitContainer",e.FT_Tab="tab",e.FT_TabGroup="tabGroup"}(Rt=t.TypeOfFormatContainer||(t.TypeOfFormatContainer={}));var wt;!function(e){e.FT_None="none",e.FT_NumericControl="numeric-control",e.FT_TextControl="text-control",e.FT_ColorControl="color-control",e.FT_SelectorControl="selector-control",e.FT_ToggleControl="toggle-control"}(wt=t.TypeOfFormatControl||(t.TypeOfFormatControl={}));var xt;!function(e){e.FWK_None="none",e.FWK_FontFamily="fontFamily",
e.FWK_FontSize="fontSize",e.FWK_ColorSwatch="colorSwatch",e.FWK_Bold="bold",e.FWK_Italics="italics",e.FWK_Underline="underline",e.FWK_LineVisibility="lineVisibility",e.FWK_LinePattern="linePattern",e.FWK_LineSize="lineSize",e.FWK_NumberType="numericType",e.FWK_DecimalPlaces="decimalPlaces",e.FWK_ThousandsSeparator="thousandsSeparator",e.FWK_NumericUnits="numericUnits"}(xt=t.FormatWidgetKey||(t.FormatWidgetKey={}));var Ot;!function(e){e.Format_None_Key="none",e.Format_Workbook_Key="workbook",e.Format_Font_Key="font",e.Format_Color_Key="color",e.Format_Lines_Key="lines",e.Format_FontAll_Key="font-all",e.Format_FontAllControls_Key="font-all-controls",e.Format_FontMore_Key="font-more",e.Format_FontWorksheetTitles_Key="worksheet-titles",e.Format_FontToolTip_Key="font-tooltip",e.Format_FontWorksheet_Key="font-worksheet",e.Format_FontDashTitles_Key="dash-titles",e.Format_FontStoryTitles_Key="story-titles",e.Format_FontTitlesControls_Key="titles-controls",e.Format_FontTooltipControls_Key="tooltip-controls",e.Format_FontWorksheetControls_Key="worksheet-controls",e.Format_LineMore_Key="line-more",e.Format_LineGrid_Key="line-grid",e.Format_LineGridTabs_Key="line-grid-tabs",e.Format_LineZero_Key="line-zero",e.Format_LineZeroTabs_Key="line-zero-tabs",e.Format_LineAxisTick_Key="line-axis-tick",e.Format_LineAxisTickTabs_Key="line-axis-tick-tabs",e.Format_LineAxisRuler_Key="line-axis-ruler",e.Format_LineAxisRulerTabs_Key="line-axis-ruler-tabs",e.Format_LineHeaderDivider_Key="line-header-divider",e.Format_LineHeaderDividerTabs_Key="line-header-divider-tabs",e.Format_LinePaneDivider_Key="line-paneDivider",e.Format_LinePaneDividerTabs_Key="line-paneDivider-tabs",e.Format_LineGridAll_Key="line-grid-all",e.Format_LineGridRow_Key="line-grid-row",e.Format_LineGridColumn_Key="line-grid-column",e.Format_LineZeroAll_Key="line-zero-all",e.Format_LineZeroRow_Key="line-zero-row",e.Format_LineZeroColumn_Key="line-zero-column",e.Format_LineAxisTickAll_Key="line-axis-tick-all",e.Format_LineAxisTickRow_Key="line-axis-tick-row",e.Format_LineAxisTickColumn_Key="line-axis-tick-column",e.Format_LineAxisRulerAll_Key="line-axis-ruler-all",e.Format_LineAxisRulerRow_Key="line-axis-ruler-row",e.Format_LineAxisRulerColumn_Key="line-axis-ruler-column",e.Format_LineReference_Key="line-reference",e.Format_LineDrop_Key="line-drop",e.Format_LineTrend_Key="line-trend",e.Format_LineVisibility_Key="line-visibility",e.Format_LinePattern_Key="line-pattern",e.Format_LineWidth_Key="line-width",e.Format_LineColor_Key="line-color",e.Format_TickColor_Key="tick-color",e.Format_BorderPattern_Key="border-pattern",e.Format_BorderColor_Key="border-color",e.Format_DividerColor_Key="divider-color",e.Format_FontFamily_Key="font-family-key",e.Format_FontSize_Key="font-size-key",e.Format_Bold_Key="bold-key",e.Format_Italics_Key="italics-key",e.Format_Underline_Key="underline-key",e.Format_FontColor_Key="font-color-key",e.Format_Number_Container_Key="number-container",e.Format_Number_Type_Key="number-container-type",e.Format_Number_Units_Key="number-container-units",e.Format_Number_Decimal_Key="number-container-decimal",e.Format_Number_Thousands_Separator_Key="number-container-thousands-separator",e.Format_FontPickerMinimal_Key="font-picker-minimal",e.Format_FontPickerDefault_Key="font-picker-default",e.Format_LinePickerDefault_Key="line-picker-default",e.Format_LinePickerNoVis_Key="line-picker-no-visibility",e.Format_LineAxisTickPicker_Key="line-axis-tick-picker"}(Ot=t.FormatNodeIdentifier||(t.FormatNodeIdentifier={}));var kt;!function(e){e.CST_Dark="dark-swatch",e.CST_Light="light-swatch"}(kt=t.ColorSwatchType||(t.ColorSwatchType={}));var Nt;!function(e){e.PT_None="none",e.PT_Font="font",e.PT_Line="line",e.PT_Number="number"}(Nt=t.PickerType||(t.PickerType={}));var Vt;!function(e){e.US_Worksheet="worksheet",e.US_Dashboard="dashboard",e.US_QuickFilters="quick-filters",e.US_Story="story"}(Vt=t.UpdateScope||(t.UpdateScope={}));var Ut;!function(e){e.MODE_TYPE_IN="type_in",e.MODE_COMPACT_LIST="compact",e.MODE_LIST="list",e.MODE_SLIDER="slider",e.MODE_DATETIME="datetime"}(Ut=t.ParameterCtrlTypesDisplayMode||(t.ParameterCtrlTypesDisplayMode={}));var Bt;!function(e){e.DISPLAY_CUSTOM_TITLE="custom_title",e.DISPLAY_HIDE_SLIDER_SLIDER="hide_slider_slider",e.DISPLAY_HIDE_SLIDER_READOUT="hide_slider_readout",e.DISPLAY_HIDE_SLIDER_BUTTONS="hide_slider_buttons"}(Bt=t.ParameterCtrlTypesDisplayFlag||(t.ParameterCtrlTypesDisplayFlag={}));var Gt;!function(e){e.EncodePaletteShift="paletteShift",e.EncodePaletteMask="paletteMask",e.EncodeShapeMask="shapeMask"}(Gt=t.ShapeEncodeConstants||(t.ShapeEncodeConstants={}));var Ht;!function(e){e.ShapeCircle="circle",e.ShapeSquare="square",e.ShapePlus="plus",e.ShapeTimes="times",e.ShapeAsterisk="asterisk",e.ShapeDiamond="diamond",e.ShapeTriangle="triangle",e.ShapeDownTriangle="down-triangle",e.ShapeLeftTriangle="left-triangle",e.ShapeRightTriangle="right-triangle",e.MaxAllShapes="invalid"}(Ht=t.ShapeType||(t.ShapeType={}));var Wt;!function(e){e.ShapePaletteFilled="filled",e.ShapePaletteCustom1="custom1",e.ShapePaletteCustom2="custom2",e.ShapePaletteCustom3="custom3",e.ShapePaletteCustom4="custom4",e.ShapePaletteCustom5="custom5",e.ShapePaletteCustom6="custom6",e.ShapePaletteCustom7="custom7",e.ShapePaletteCustom8="custom8",e.ShapePaletteCustom9="custom9",e.ShapePaletteCustom10="custom10",e.ShapePaletteCustom11="custom11",e.ShapePaletteCustom12="custom12",e.ShapePaletteHidden="hidden"}(Wt=t.ShapePalette||(t.ShapePalette={}));var jt;!function(e){e.ShapeIDCircle="shapeIDCircle",e.ShapeIDSquare="shapeIDSquare",e.ShapeIDPlus="shapeIDPlus",e.ShapeIDTimes="shapeIDTimes",e.ShapeIDAsterisk="shapeIDAsterisk",e.ShapeIDDiamond="shapeIDDiamond",e.ShapeIDTriangle="shapeIDTriangle",e.ShapeIDDownTriangle="shapeIDDownTriangle",e.ShapeIDLeftTriangle="shapeIDLeftTriangle",e.ShapeIDRightTriangle="shapeIDRightTriangle",e.ShapeIDFilledCircle="shapeIDFilledCircle",e.ShapeIDFilledSquare="shapeIDFilledSquare",e.ShapeIDFilledPlus="shapeIDFilledPlus",e.ShapeIDFilledTimes="shapeIDFilledTimes",e.ShapeIDFilledStar="shapeIDFilledStar",e.ShapeIDFilledDiamond="shapeIDFilledDiamond",e.ShapeIDFilledTriangle="shapeIDFilledTriangle",e.ShapeIDFilledDownTriangle="shapeIDFilledDownTriangle",e.ShapeIDFilledLeftTriangle="shapeIDFilledLeftTriangle",e.ShapeIDFilledRightTriangle="shapeIDFilledRightTriangle",e.ShapeIDUnscaledFilledCircle="shapeIDUnscaledFilledCircle"}(jt=t.ShapeID||(t.ShapeID={}));var zt;!function(e){e.Color="color",e.Shape="shape",e.Size="size",e.HighlightLegend="highlight",e.Map="map"}(zt=t.LegendTypeEnum||(t.LegendTypeEnum={}));var Qt;!function(e){e.BSF_Invalid="invalid",e.BSF_AllFields="all",e.BSF_DatesAndTimes="date-time",e.BSF_Trails="trails",e.BSF_EntireTable="table"}(Qt=t.BrushSpecialFields||(t.BrushSpecialFields={}));var qt;!function(e){e.TrendLineFitType__LinearFit="linear",e.TrendLineFitType__PolynomialFit="polynomial",e.TrendLineFitType__LogFit="log",e.TrendLineFitType__ExpFit="exp",e.TrendLineFitType__PowerFit="power"}(qt=t.TrendLineFitType||(t.TrendLineFitType={}));var Zt;!function(e){e.Item="item",e.ItemRange="range",e.SubCommandsItem="subcommands",e.SeparatorItem="separator"}(Zt=t.CommandsEnumItemType||(t.CommandsEnumItemType={}));var Yt;!function(e){e.Domain_Any="any",e.Domain_List="list",e.Domain_Range="range"}(Yt=t.ParameterTypesDomainType||(t.ParameterTypesDomainType={}));var Kt;!function(e){e.Visual="visual",e.DataSource="data-source",e.GroupCreate="group-create",e.GroupEdit="group-edit"}(Kt=t.FiltersCategoricalFilterType||(t.FiltersCategoricalFilterType={}));var Jt;!function(e){e.Visual="visual",e.DataSource="datasource",e.Extract="extract"}(Jt=t.FiltersQuantitativeFilterType||(t.FiltersQuantitativeFilterType={}));var Xt;!function(e){e.Relevant="relevant",e.Cascading="cascading",e.CascadingContext="cascading-context",e.Context="context",e.Database="all"}(Xt=t.FiltersDomainType||(t.FiltersDomainType={}));var $t;!function(e){e.All="all",e.Selected="selected",e.Manual="manual"}($t=t.FiltersRangeType||(t.FiltersRangeType={}));var ea;!function(e){e.StartsWith="starts-with",e.EndsWith="ends-with",e.Contains="contains",e.ExactMatch="exact-match"}(ea=t.FiltersPatternType||(t.FiltersPatternType={}));var ta;!function(e){e.None="none",e.ByField="by-field",e.Formula="formula"}(ta=t.FiltersLimitType||(t.FiltersLimitType={}));var aa;!function(e){e.None="none",e.ByField="by-field",e.Formula="formula"}(aa=t.FiltersConditionType||(t.FiltersConditionType={}));var ra;!function(e){e.RangeCurrent="curr",e.RangeCurrentToDate="todate",e.RangeLast1="last",e.RangeNext1="next",e.RangeLastN="lastn",e.RangeNextN="nextn",e.RangeOther1="other",e.RangeOtherN="othern",e.RangeInvalid="invalid"}(ra=t.FiltersRelativeDateRangeType||(t.FiltersRelativeDateRangeType={}));var ia;!function(e){e.Local="local",e.Global="global",e.Shared="shared",e.MappedGlobal="mapped-global"}(ia=t.FiltersFilterMode||(t.FiltersFilterMode={}));var na;!function(e){e.DifferencesFromBase="differences",e.SelectedValues="selected",e.None="dont-track-selection-state"}(na=t.FiltersSelectionTracking||(t.FiltersSelectionTracking={}));var oa;!function(e){e.ALL="filter-all",e.ADD="filter-add",e.REMOVE="filter-remove",e.REPLACE="filter-replace",e.DELTA="filter-delta",e.CLEAR="filter-clear",e.EACH="filter-each"}(oa=t.FilterUpdateType||(t.FilterUpdateType={}));var la;!function(e){e.CUSTOM_DOMAIN="filter-update-custom-domain",e.NO_QUALIFICATIONS="filter-update-no-qual"}(la=t.FilterUpdateQualifierType||(t.FilterUpdateQualifierType={}));var sa;!function(e){e.None="none",e.LastValues="last-values",e.CurrentValues="current-values"}(sa=t.FiltersPresetType||(t.FiltersPresetType={}));var da;!function(e){e.All="include-all",e.NonNull="include-non-null",e.Null="include-null",e.InRange="include-range",e.InRangeOrNull="include-range-or-null",e.None="include-none"}(da=t.FiltersQuantitativeIncludedValues||(t.FiltersQuantitativeIncludedValues={}));var ca;!function(e){e.FYSValues__FYS_JANUARY="fys-january",e.FYSValues__FYS_FEBRUARY="fys-february",e.FYSValues__FYS_MARCH="fys-march",e.FYSValues__FYS_APRIL="fys-april",e.FYSValues__FYS_MAY="fys-may",e.FYSValues__FYS_JUNE="fys-june",e.FYSValues__FYS_JULY="fys-july",e.FYSValues__FYS_AUGUST="fys-august",e.FYSValues__FYS_SEPTEMBER="fys-september",e.FYSValues__FYS_OCTOBER="fys-october",e.FYSValues__FYS_NOVEMBER="fys-november",e.FYSValues__FYS_DECEMBER="fys-december"}(ca=t.FYSValues||(t.FYSValues={}));var ua;!function(e){e.None="none",e.LoopedPlayback="looped-playback",e.ShowDropdown="show-dropdown",e.ShowSlider="show-slider",e.ShowPlayCtrls="show-play-controls",e.ShowTrailCtrls="show-trail-controls",e.Synchronized="synchronized"}(ua=t.PageNavFlagsFlags||(t.PageNavFlagsFlags={}));var pa;!function(e){e.Manual="manual",e.All="all",e.Selected="selected",e.Highlighted="highlighted"}(pa=t.PageTrailEnumsMarksToTrail||(t.PageTrailEnumsMarksToTrail={}));var ma;!function(e){e.Marks="marks",e.Trails="trails",e.Both="both"}(ma=t.PageTrailEnumsTrailType||(t.PageTrailEnumsTrailType={}));var ga;!function(e){e.None="none",e.Transparency="transparency"}(ga=t.PageTrailEnumsTrailEffect||(t.PageTrailEnumsTrailEffect={}));var ha;!function(e){e.NoFlags="no-flags",e.DrawIfHighlighted="draw-if-highlighted",e.DrawIfSelected="draw-if-selected",e.DrawAlways="draw-always",e.LinesEnabled="lines-enabled"}(ha=t.PageTrailEnumsTrailFlags||(t.PageTrailEnumsTrailFlags={}));var Sa;!function(e){e.ToFirst="first",e.ToNext="next",e.ToPrev="previous",e.ToLast="last"}(Sa=t.ChangePageChangeType||(t.ChangePageChangeType={}));var fa;!function(e){e.Stop="stop",e.Forward="forward",e.Backward="backward",e.SlowSpeed="slow-speed",e.NormalSpeed="normal-speed",e.FastSpeed="fast-speed",e.ToggleForward="toggle-forward",e.ToggleBackward="toggle-backward"}(fa=t.ChangePagePageAnimationControl||(t.ChangePagePageAnimationControl={}));var ya;!function(e){e.LegendItemLayout__LegendItemLayoutVert="vertical",e.LegendItemLayout__LegendItemLayoutHorz="horizontal",e.LegendItemLayout__LegendItemLayoutGrid="grid",e.LegendItemLayout__LegendItemLayoutAuto="auto"}(ya=t.LegendItemLayout||(t.LegendItemLayout={}));var Ta;!function(e){e.LegendItemOrder__LegendItemOrderNormal="normal",e.LegendItemOrder__LegendItemOrderReversed="reversed",e.LegendItemOrder__LegendItemOrderAuto="auto"}(Ta=t.LegendItemOrder||(t.LegendItemOrder={}));var ba;!function(e){e.SizeModeAuto="size-mode-auto",e.SizeModeFixed="size-mode-fixed",e.SizeModeMin="size-mode-min",e.SizeModeMax="size-mode-max",e.SizeModeRange="size-mode-range",e.SizeModeFitWidth="size-mode-fit-width",e.SizeModeFitHeight="size-mode-height",e.SizeModeScrollHeight="size-mode-scroll-height"}(ba=t.SizeMode||(t.SizeMode={}));var Ia;!function(e){e.SHOWME_TEXT="text",e.SHOWME_HEAT="heat",e.SHOWME_SPOTTABLE="spot-table",e.SHOWME_BARHORIZ="bar-horiz",e.SHOWME_BARSTACK="bar-stack",e.SHOWME_BARSIDE="bar-side",e.SHOWME_BARMEASURE="bar-measure",e.SHOWME_OLINE="o-line",e.SHOWME_QILINE="qi-line",e.SHOWME_OAREA="o-area",e.SHOWME_QIAREA="qi-area",e.SHOWME_CIRCLE="circle",e.SHOWME_CIRCLESIDE="circle-side",e.SHOWME_GANTT="gantt",e.SHOWME_SCATTER="scatter",e.SHOWME_SCATTERMATRIX="scatter-matrix",e.SHOWME_HISTOGRAM="histogram",e.SHOWME_MAPS="maps",e.SHOWME_FILLEDMAPS="filled-maps",e.SHOWME_PIES="pies",e.SHOWME_DUALBARLINE="dual-bar-line",e.SHOWME_DUALLINE="dual-line",e.SHOWME_BULLET="bullet",e.SHOWME_TREEMAP="treemap",e.SHOWME_BUBBLE="bubble",e.SHOWME_BOXPLOT="box-plot"}(Ia=t.ShowMeCommandType||(t.ShowMeCommandType={}));var Ca;!function(e){e.SIT_None="none",e.SIT_IncompatibleField="incompatible-field",e.SIT_Remote="remote",e.SIT_Group="group",e.SIT_TableCalc="table-calc",e.SIT_SecondaryDatasource="secondary-datasource",e.SIT_TableCalcSecondary="table-calc-secondary",e.SIT_Forecast="forecast",e.SIT_SortAsc="sort-asc",e.SIT_SortDesc="sort-desc",e.SIT_SortAlphabeticAsc="sort-alphabetic-asc",e.SIT_SortAlphabeticDesc="sort-alphabetic-desc"}(Ca=t.ShelfIconType||(t.ShelfIconType={}));var va;!function(e){e.FIT_Global="global-filter",e.FIT_Shared="shared-filter",e.FIT_MappedSharedSource="mapped-shared-source-filter",e.FIT_MappedSharedTarget="mapped-shared-target-filter",e.FIT_Slice="slice-filter",e.FIT_Local="local-filter",e.FIT_MappedGlobalSource="mapped-global-source-filter",e.FIT_MappedGlobalTarget="mapped-global-target-filter",e.FIT_None="no-filter"}(va=t.FilterIconType||(t.FilterIconType={}));var Da;!function(e){e.ITEM_DRAWSTYLE_NORMAL="normal",e.ITEM_DRAWSTYLE_OPENED="opened",e.ITEM_DRAWSTYLE_CLOSED="closed",e.ITEM_DRAWSTYLE_MIDDLE="middle"}(Da=t.ItemDrawStyle||(t.ItemDrawStyle={}));var Pa;!function(e){e.PAGESIZE_LETTER="letter",e.PAGESIZE_LEGAL="legal",e.PAGESIZE_NOTE="note",e.PAGESIZE_FOLIO="folio",e.PAGESIZE_TABLOID="tabloid",e.PAGESIZE_LEDGER="ledger",e.PAGESIZE_STATEMENT="statement",e.PAGESIZE_EXECUTIVE="executive",e.PAGESIZE_A3="a3",e.PAGESIZE_A4="a4",e.PAGESIZE_A5="a5",e.PAGESIZE_B4="b4",e.PAGESIZE_B5="b5",e.PAGESIZE_QUARTO="quarto",e.PAGESIZE_UNSPECIFIED="unspecified"}(Pa=t.PageSizeOption||(t.PageSizeOption={}));var _a;!function(e){e.OrientationPrinter="printer",e.OrientationPortrait="portrait",e.OrientationLandscape="landscape"}(_a=t.PageOrientation||(t.PageOrientation={}));var Aa;!function(e){e.ScaleAuto="auto",e.ScalePercentage="percent",e.ScaleFitPages="fit-pages"}(Aa=t.ScaleMode||(t.ScaleMode={}));var Ma;!function(e){e.ScalePctAuto="auto",e.ScalePct400="pct400",e.ScalePct200="pct200",e.ScalePct100="pct100",e.ScalePct90="pct90",e.ScalePct80="pct80",e.ScalePct75="pct75",e.ScalePct60="pct60",e.ScalePct50="pct50",e.ScalePct25="pct25"}(Ma=t.PageScalingOption||(t.PageScalingOption={}));var Fa;!function(e){e.SheetRangeAll="all",e.SheetRangeActive="active",e.SheetRangeSelected="selected"}(Fa=t.SheetRange||(t.SheetRange={}));var Ea;!function(e){e.TYPE_WORKSHEET="worksheet",e.TYPE_DASHBOARD="dashboard",e.TYPE_STORY="story"}(Ea=t.SheetType||(t.SheetType={}));var La;!function(e){e.UIMT_ScrollbarMetric="scrollbar-metric",e.UIMT_QFilterFixedMetric="q-filter-fixed-metric",e.UIMT_QFilterSliderMetric="q-filter-slider-metric",e.UIMT_QFilterReadoutMetric="q-filter-readout-metric",e.UIMT_CFilterFixedMetric="c-filter-fixed-metric",e.UIMT_CFilterItemMetric="c-filter-item-metric",e.UIMT_HFilterFixedMetric="h-filter-fixed-metric",e.UIMT_HFilterItemMetric="h-filter-item-metric",e.UIMT_CmSliderFilterMetric="cm-slider-filter-metric",e.UIMT_CmDropdownFilterMetric="cm-dropdown-filter-metric",e.UIMT_CmPatternFilterMetric="cm-pattern-filter-metric",e.UIMT_RDateFilterMetric="r-date-filter-metric",e.UIMT_RDatePFilterMetric="r-date-p-filter-metric",e.UIMT_ParamTypeInMetric="param-type-in-metric",e.UIMT_ParamCompactListMetric="param-compact-list-metric",e.UIMT_ParamListMetric="param-list-metric",e.UIMT_ParamSliderMetric="param-slider-metric",e.UIMT_ParamDateTimeMetric="param-date-time-metric",e.UIMT_CFilterApplyMetric="c-filter-apply-metric",e.UIMT_CmTypeInSearchMetric="cm-type-in-search-metric",e.UIMT_CFilterCustomItemMetric="c-filter-custom-item-metric"}(La=t.ClientUIMetricType||(t.ClientUIMetricType={}));var Ra;!function(e){e.SRT_LABELS_X="xheader",e.SRT_LABELS_Y="yheader",e.SRT_LABELS_FIELD="uleft",e.SRT_AXIS_LEFT="leftaxis",e.SRT_AXIS_BOTTOM="bottomaxis",e.SRT_AXIS_RIGHT="rightaxis",e.SRT_AXIS_TOP="topaxis"}(Ra=t.SortRegionType||(t.SortRegionType={}));var wa;!function(e){e.ArrowCursor="arrow",e.UpArrowCursor="up-arrow",e.CrossCursor="cross",e.WaitCursor="wait",e.IBeamCursor="ibeam",e.SizeVerCursor="size-ver",e.SizeHorCursor="size-hor",e.SizeBDiagCursor="size-bdiag",e.SizeFDiagCursor="size-fdiag",e.SizeAllCursor="size-all",e.BlankCursor="blank",e.SplitVCursor="split-v",e.SplitHCursor="split-h",e.PointingHandCursor="pointing-hand",e.ForbiddenCursor="forbidden",e.WhatsThisCursor="whats-this",e.BusyCursor="busy",e.OpenHandCursor="open-hand",e.ClosedHandCursor="closed-hand",e.DragCopyCursor="drag-copy",e.DragMoveCursor="drag-move",e.DragLinkCursor="drag-link"}(wa=t.QtCursorShape||(t.QtCursorShape={}));var xa;!function(e){e.VIZ_REGION_TABLE="viz",e.VIZ_REGION_ROWHEADERS="yheader",e.VIZ_REGION_LEFTAXIS="leftaxis",e.VIZ_REGION_RIGHTAXIS="rightaxis",e.VIZ_REGION_COLUMNHEADERS="xheader",e.VIZ_REGION_BOTTOMAXIS="bottomaxis",e.VIZ_REGION_TOPAXIS="topaxis",e.VIZ_REGION_UPPERLEFT="uleft",e.VIZ_REGION_UPPERRIGHT="uright",e.VIZ_REGION_LOWERLEFT="lleft",e.VIZ_REGION_LOWERRIGHT="lright",e.VIZ_REGION_TITLE="title",e.VIZ_REGION_CAPTION="caption",e.VIZ_REGION_COLORLEGEND="color",e.VIZ_REGION_SHAPELEGEND="shape",e.VIZ_REGION_SIZELEGEND="size",e.VIZ_REGION_HIGHLIGHTLEGEND="highlight-legend",e.VIZ_REGION_MAPLEGEND="map",e.VIZ_REGION_COLORLEGENDTITLE="color-title",e.VIZ_REGION_SHAPELEGENDTITLE="shape-title",e.VIZ_REGION_SIZELEGENDTITLE="size-title",e.VIZ_REGION_HIGHLIGHTLEGENDTITLE="highlight-legend-title",e.VIZ_REGION_MAPLEGENDTITLE="map-title",e.VIZ_REGION_COLORLEGENDBODY="color-body",e.VIZ_REGION_SHAPELEGENDBODY="shape-body",e.VIZ_REGION_SIZELEGENDBODY="size-body",e.VIZ_REGION_HIGHLIGHTLEGENDBODY="highlight-legend-body",e.VIZ_REGION_MAPLEGENDBODY="map-body",e.VIZ_REGION_END="end"}(xa=t.VizImageRegion||(t.VizImageRegion={}));var Oa;!function(e){e.LM_NAME_VIEWDATA="viewdata",e.LM_NAME_EXPORTIMAGE="exportimage",e.LM_NAME_EXPORTDATA="exportdata",e.LM_NAME_EXPORTCROSSTAB="exportcrosstab",e.LM_NAME_PRINT="print"}(Oa=t.LegacyMenuName||(t.LegacyMenuName={}));var ka;!function(e){e.LM_STATE_VISIBLE="visible",e.LM_STATE_CHECKED="checked",e.LM_STATE_GRAYED="grayed",e.LM_STATE_RADIO="radio"}(ka=t.LegacyMenuState||(t.LegacyMenuState={}));var Na;!function(e){e.UniqueWithinCube="cube-unique",e.UniqueWithinHierarchy="hierarchy-unique",e.UniqueWithinLevel="level-unique",e.UniqueWithinParent="parent-unique"}(Na=t.MemberUniquenessType||(t.MemberUniquenessType={}));var Va;!function(e){e.RegularDimension="regular-dimension",e.MeasureDimension="measure-dimension",e.TimeDimension="time-dimension"}(Va=t.DimensionType||(t.DimensionType={}));var Ua;!function(e){e.SVT_DS_NORMAL="datasource",e.SVT_DS_NORMAL_PRIMARY="datasource-primary",e.SVT_DS_NORMAL_SECONDARY="datasource-secondary",e.SVT_DS_EXTRACT="extract",e.SVT_DS_EXTRACT_PRIMARY="extract-primary",e.SVT_DS_EXTRACT_SECONDARY="extract-secondary",e.SVT_DS_CUBE="cube",e.SVT_DS_CUBE_PRIMARY="cube-primary",e.SVT_DS_CUBE_SECONDARY="cube-secondary",e.SVT_DS_SERVER="server",e.SVT_DS_SERVER_PRIMARY="server-primary",e.SVT_DS_SERVER_SECONDARY="server-secondary"}(Ua=t.SchemaViewerDataSourceType||(t.SchemaViewerDataSourceType={}));var Ba;!function(e){e.IT_NONE="none",e.IT_DIMENSION="dimension",e.IT_HIERARCHY="hierarchy",e.IT_LEVEL="level",e.IT_CATEGORICAL="categorical",e.IT_MEASURE="measure",e.IT_VALUE="value",e.IT_GROUP="group",e.IT_FOLDER="folder",e.IT_TABLE="table",e.IT_DRILLPATH="drillpath",e.IT_PARAMETER="parameter",e.IT_HEADER="header"}(Ba=t.SchemaItemType||(t.SchemaItemType={}));var Ga;!function(e){e.SVT_ALL_BLANK="blank",e.SVT_ALL_RELATIONAL="relational",e.SVT_ALL_CUBE="cube",e.SVT_ALL_DATETIME="datetime",e.SVT_ALL_DATE="date",e.SVT_ALL_TIME="time",e.SVT_ALL_TEXT="text",e.SVT_ALL_NUMBER="number",e.SVT_ALL_CURRENCY="currency",e.SVT_ALL_BOOL="bool",e.SVT_ALL_HIERARCHY="hierarchy",e.SVT_ALL_LEVEL="level",e.SVT_ALL_ATTRIBUTE="attribute",e.SVT_ALL_FOLDER_CLOSED="folder-closed",e.SVT_ALL_FOLDER_OPEN="folder-open",e.SVT_ALL_GROUP="grp",e.SVT_ALL_INVALID_GROUP="invalid-grp",e.SVT_ALL_SVR_GRP="svr-grp",e.SVT_ALL_INVALID_SVR_GRP="invalid-svr-grp",e.SVT_ALL_NUMERIC_BIN_O="numeric-bin-o",e.SVT_ALL_NUMERIC_BIN_Q="numeric-bin-q",e.SVT_ALL_INVALID_NUMERIC_BIN="invalid-numeric-bin",e.SVT_ALL_DRILLPATH="drillpath",e.SVT_ALL_VALID_SYSGRP="valid-sysgrp",e.SVT_ALL_INVALID_SYSGRP="invalid-sysgrp",e.SVT_ALL_CAT_BIN="cat-bin",e.SVT_ALL_CAT_BIN_GEOGAPHIC_O="cat-bin-geogaphic-o",e.SVT_ALL_CAT_BIN_GEOGAPHIC_Q="cat-bin-geogaphic-q",e.SVT_ALL_INVALID_CAT_BIN="invalid-cat-bin",e.SVT_ALL_INVALID_CAT_BIN_GEOGAPHIC_O="invalid-cat-bin-geogaphic-o",e.SVT_ALL_INVALID_CAT_BIN_GEOGAPHIC_Q="invalid-cat-bin-geogaphic-q",e.SVT_ALL_GEOGRAPHIC="geographic",e.SVT_ALL_INVALID_GEOGRAPHIC_O="invalid-geographic-o",e.SVT_ALL_INVALID_GEOGRAPHIC_Q="invalid-geographic-q",e.SVT_ALL_IDENT_SET="ident-set",e.SVT_ALL_INVALID_IDENT_SET="invalid-ident-set",e.SVT_ALL_TABLE="table",e.SVT_ALL_NONE="none"}(Ga=t.SchemaViewerFieldAllType||(t.SchemaViewerFieldAllType={}));var Ha;!function(e){e.SVT_CUBE_M_BLANK="cube-m-blank",e.SVT_CUBE_M_FOLDER_CLOSED="cube-m-folder-closed",e.SVT_CUBE_M_FOLDER_OPEN="cube-m-folder-open",e.SVT_CUBE_M_DATETIME="cube-m-datetime",e.SVT_CUBE_M_DATE="cube-m-date",e.SVT_CUBE_M_TIME="cube-m-time",e.SVT_CUBE_M_TEXT="cube-m-text",e.SVT_CUBE_M_NUMBER="cube-m-number",e.SVT_CUBE_M_CURRENCY="cube-m-currency",e.SVT_CUBE_M_BOOLEAN="cube-m-boolean",e.SVT_CUBE_M_GEOGRAPHIC="cube-m-geographic",e.SVT_CUBE_M_NONE="cube-m-none"}(Ha=t.SchemaViewerFieldCubeMeasureType||(t.SchemaViewerFieldCubeMeasureType={}));var Wa;!function(e){e.SVT_CUBE_D_BLANK="cube-d-blank",e.SVT_CUBE_D_HIERARCHY="cube-d-hierarchy",e.SVT_CUBE_D_LEVEL="cube-d-level",e.SVT_CUBE_D_HIER_CALC="cube-d-hier-calc",e.SVT_CUBE_D_LVL_CALC="cube-d-lvl-calc",e.SVT_CUBE_D_HIER_GEO="cube-d-hier-geo",e.SVT_CUBE_D_HIER_GEO_CUSTOM="cube-d-hier-geo-custom",e.SVT_CUBE_D_FOLDER_CLOSED="cube-d-folder-closed",e.SVT_CUBE_D_FOLDER_OPEN="cube-d-folder-open",e.SVT_CUBE_D_ATTRIBUTE="cube-d-attribute",e.SVT_CUBE_D_TEXT="cube-d-text",e.SVT_CUBE_D_DATETIME="cube-d-datetime",e.SVT_CUBE_D_DATETIME_INVALID="cube-d-datetime-invalid",e.SVT_CUBE_D_DATE="cube-d-date",e.SVT_CUBE_D_DATE_INVALID="cube-d-date-invalid",e.SVT_CUBE_D_GEOGRAPHIC="cube-d-geographic",e.SVT_CUBE_D_GEOGRAPHIC_INVALID="cube-d-geographic-invalid",e.SVT_CUBE_D_GEOGRAPHIC_CUSTOM="cube-d-geographic-custom",e.SVT_CUBE_D_GEOGRAPHIC_CUSTOM_INVALID="cube-d-geographic-custom-invalid",e.SVT_CUBE_D_VARYING="cube-d-varying",e.SVT_CUBE_D_UDA="cube-d-uda",e.SVT_CUBE_D_NUMBER="cube-d-number",e.SVT_CUBE_D_NONE="cube-d-none"}(Wa=t.SchemaViewerFieldCubeDimensionType||(t.SchemaViewerFieldCubeDimensionType={}));var ja;!function(e){e.Header="header",e.Field="field",e.Level="level",e.Hierarchy="hierarchy",e.Dimension="dimension",e.DrillPath="drill-path",e.Group="group",e.UDA="uda",e.RelationalTable="relational-table"}(ja=t.SchemaViewerMenuType||(t.SchemaViewerMenuType={}));var za;!function(e){e.Single="selection-mode-single",e.Multiple="selection-mode-multiple"}(za=t.HSMSelectionMode||(t.HSMSelectionMode={}));var Qa;!function(e){e.UseDefaultMember="use-default-member",e.UseAllMember="use-all-member",e.UseSelectedMember="use-selected-member"}(Qa=t.HSMDefaultMemberType||(t.HSMDefaultMemberType={}));var qa;!function(e){e.Updated="hsm-notification-updated",e.MissingMembers="hsm-notification-missing-members"}(qa=t.HSMNotificationType||(t.HSMNotificationType={}));var Za;!function(e){e.SelectMode="hsm-selection-request-select-mode",e.MemberDescendantsState="hsm-selection-request-descendants-state",e.SelectedMemberTuple="hsm-selection-request-selected-member-tuple",e.SelectedMemberCaption="hsm-selection-request-selected-member-caption"}(Za=t.HSMSelectionRequestType||(t.HSMSelectionRequestType={}));var Ya;!function(e){e.SelectMember="hsm-member-request-select-member",e.SelectSubtree="hsm-member-request-select-subtree",e.SelectLevel="hsm-member-request-select-level",e.MemberSelect="hsm-member-request-member-select",e.MemberLevel="hsm-member-request-member-level"}(Ya=t.HSMMemberSelectRequestType||(t.HSMMemberSelectRequestType={}));var Ka;!function(e){e.AllSelected="hsm-all-selected",e.NoneSelected="hsm-none-selected",e.SomeSelected="hsm-some-selected",e.UnknownSelected="hsm-unknown-selected"}(Ka=t.HSMLevelSelectionState||(t.HSMLevelSelectionState={}));var Ja;!function(e){e.AllLoaded="hsm-all-loaded",e.NoneLoaded="hsm-none-loaded",e.SomeLoaded="hsm-some-loaded"}(Ja=t.HSMMemberLoadState||(t.HSMMemberLoadState={}));var Xa;!function(e){e.CAR_Connected="connected",e.CAR_NotConnected="not-connected",e.CAR_UserEditConnection="user-edit-connection",e.CAR_ConnectionNotSupported="connection-not-supported"}(Xa=t.ConnectionAttemptResult||(t.ConnectionAttemptResult={}));var $a;!function(e){e.DSCR_Success="success",e.DSCR_Failure="failure",e.DSCR_RequiresWorkbookDoc="requires-workbook",e.DSCR_RequiresAuthentication="requires-authentication",e.DSCR_RequiresDBCredentials="requires-db-credentials",e.DSCR_RequiresOAuthKeyAssociation="requires-oauth-key-association",e.DSCR_RequiresValidOAuthKey="requires-valid-oauth-key",e.DSCR_FederatedError="federated-error"}($a=t.DataServerConnectionResult||(t.DataServerConnectionResult={}));var er;!function(e){e.CET_NeedsAuthentication="needs-authentication",e.CET_DataServerDisconnected="data-server-disconnected",e.CET_ExceptionWhileConnecting="exception-while-connecting",e.CET_ExceptionWhileConnectingDataSource="exception-while-connecting-data-source",e.CET_ConnectionNotSupported="connection-not-supported",e.CET_UnexpectedException="unexpected-exception"}(er=t.ConnectionErrorType||(t.ConnectionErrorType={}));var tr;!function(e){e.VP_Misc="misc",e.VP_Annotations="annotations",e.VP_AxisRules="axis-rules",e.VP_TopAxis="top-axis",e.VP_BottomAxis="bottom-axis",e.VP_LeftAxis="left-axis",e.VP_RightAxis="right-axis",e.VP_Background="background",e.VP_Borders="borders",e.VP_Caption="caption",e.VP_CellBorders="cell-borders",e.VP_Decoration="decoration",e.VP_DropLines="drop-lines",e.VP_XLabels="x-labels",e.VP_YLabels="y-labels",e.VP_Legends="legends",e.VP_Marks="marks",e.VP_MarkLabels="mark-labels",e.VP_MarkTrails="mark-trails",e.VP_ReferenceBands="ref-bands",e.VP_ReferenceLines="ref-lines",e.VP_PaneBorders="pane-borders",e.VP_ScrollBars="scroll-bars",e.VP_Title="title",e.VP_TrendLines="trend-lines",e.VP_UpperMapLayers="upper-map-layers"}(tr=t.VisualPart||(t.VisualPart={}));var ar;!function(e){e.NoDetail="no-detail",e.MarkDetail="mark-detail",e.LabelDetail="label-detail",e.LabelHandleDetail="label-handle-detail",e.TopLeftHandleDetail="top-left-handle-detail",e.TopMidHandleDetail="top-mid-handle-detail",e.TopRightHandleDetail="top-right-handle-detail",e.RightMidHandleDetail="right-mid-handle-detail",e.BottomRightHandleDetail="bottom-right-handle-detail",e.BottomMidHandleDetail="bottom-mid-handle-detail",e.BottomLeftHandleDetail="bottom-left-handle-detail",e.LeftMidHandleDetail="left-mid-handle-detail",e.LineDetail="line-detail",e.ArrowHandleDetail="arrow-handle-detail",e.TextCenterHandleDetail="text-center-handle-detail",e.TextBoxHandleDetail="text-box-handle-detail",e.MarkArrowHandleDetail="mark-arrow-handle-detail",e.MarkMovableHandleDetail="mark-movable-handle-detail",e.MarkAnchorDetail="mark-anchor-detail"}(ar=t.SceneModelTypesDetail||(t.SceneModelTypesDetail={}));var rr;!function(e){e.NoHit="no-hit",e.AreaHit="area-hit",e.NearHit="near-hit",e.ExactHit="exact-hit"}(rr=t.SceneModelTypesHitType||(t.SceneModelTypesHitType={}));var ir;!function(e){e.BoundsTest="bounds-test",e.ExactTest="exact-test",e.RadialDistanceTest="radial-distance-test",e.LabelTest="label-test"}(ir=t.SceneModelTypesHitTestStyle||(t.SceneModelTypesHitTestStyle={}));var nr;!function(e){e.HitTestAll="hit-test-all",e.HitTestIgnoreLabels="hit-test-ignore-labels",e.HitTestIgnoreAnnotations="hit-test-ignore-annotations",e.HitTestForOverlay="hit-test-for-overlay"}(nr=t.SceneModelTypesHitTestFlags||(t.SceneModelTypesHitTestFlags={}));var or;!function(e){e.AE_Mark="mark",e.AE_Point="point",e.AE_Area="area"}(or=t.AnnotateEnum||(t.AnnotateEnum={}));var lr;!function(e){e.ME_Auto="auto",e.ME_On="on",e.ME_Off="off",e.ME_Clear="clear"}(lr=t.MarkEnum||(t.MarkEnum={}));var sr;!function(e){e.ZOOM_ENTIRE_VIEW="zoom-entire-view",e.ZOOM_FIT_WIDTH="zoom-fit-width",e.ZOOM_FIT_HEIGHT="zoom-fit-height"}(sr=t.ZoomLevel||(t.ZoomLevel={}));var dr;!function(e){e.AT_Unknown="unknown",e.AT_Brush="brush",e.AT_Filter="filter",e.AT_URL="url"}(dr=t.ActionType||(t.ActionType={}));var cr;!function(e){e.SdaReplace="replace",e.SdaCombine="combine",e.SdaInsert="insert",e.SdaSwap="swap",e.SdaReplaceAll="replace-all"}(cr=t.ShelfDropAction||(t.ShelfDropAction={}));var ur;!function(e){e.ShelfDropContext_None="none",e.ShelfDropContext_Categorical="categorical",e.ShelfDropContext_Quantitative="quantitative"}(ur=t.ShelfDropContext||(t.ShelfDropContext={}));var pr;!function(e){e.DragDrop_Viz="drag-drop-viz",e.DragDrop_Shelf="drag-drop-shelf",e.DragDrop_Schema="drag-drop-schema",e.DragDrop_None="drag-drop-none",e.DragDrop_CalculationEditor="drag-drop-calculation-editor",e.DragDrop_Pivot="drag-drop-pivot"}(pr=t.DragDropType||(t.DragDropType={}));var mr;!function(e){e.CommandRedirect_AddDataConnection="command-redirect-add-data-connection",e.CommandRedirect_AddDrillPath="command-redirect-add-drill-path",e.CommandRedirect_Confirmation="command-redirect-confirmation",e.CommandRedirect_FormatWorkbook="command-redirect-format-workbook",e.CommandRedirect_Notification="command-redirect-notification",e.CommandRedirect_NumberFormat="command-redirect-number-format",e.CommandRedirect_Edit="command-redirect-edit",e.CommandRedirect_QuickEdit="command-redirect-quick-edit",e.CommandRedirect_RenameField="command-redirect-rename-field",e.CommandRedirect_RenameDrillPath="command-redirect-rename-drill-path",e.CommandRedirect_RenameSheet="command-redirect-rename-sheet",e.CommandRedirect_EditWebZoneUrl="command-redirect-edit-web-zone-url",e.CommandRedirect_EditFormatting="command-redirect-edit-formatting",e.CommandRedirect_CategoricalBinEdit="command-redirect-categorical-bin-edit",e.CommandRedirect_NumericBinEdit="command-redirect-numeric-bin-edit",e.CommandRedirect_RichText="command-redirect-rich-text",e.CommandRedirect_DeleteSheet="command-redirect-delete-sheet",e.CommandRedirect_None="command-redirect-none"}(mr=t.CommandRedirectType||(t.CommandRedirectType={}));var gr;!function(e){e.DoNotReinterpretCommand="do-not-reinterpret-command",e.CategoricalFilter_InferAllWhenEverythingSelected="categorical-filter-infer-all-when-everything-selected"}(gr=t.HeuristicCommandReinterpretation||(t.HeuristicCommandReinterpretation={}));var hr;!function(e){e.FLTR_Quantitative="Quantitative",e.FLTR_Categorical="Categorical",e.FLTR_Hierarchical="Hierarchical",e.FLTR_RelativeDate="RelativeDate",e.FLTR_RelativeDatePick="RelativeDatePick",e.FLTR_Default="FilterDefault";
}(hr=t.FilterType||(t.FilterType={}));var Sr;!function(e){e.InvalidAggFields="invalid-agg-fields",e.InvalidFields="invalid-fields",e.InvalidFilterValues="invalid-filter-values",e.InvalidDates="invalid-dates"}(Sr=t.ParameterError||(t.ParameterError={}));var fr;!function(e){e.ST_Tuples="tuples",e.ST_Nodes="nodes",e.ST_TrendLines="trend-lines",e.ST_LegendItems="legend-items",e.ST_RefLines="ref-lines",e.ST_Annotations="annotations",e.ST_OrientedNodes="oriented-nodes",e.ST_ShelfFields="shelf-fields"}(fr=t.SelectionType||(t.SelectionType={}));var yr;!function(e){e.SU_ADD="select-add",e.SU_REMOVE="select-remove",e.SU_REPLACE="select-replace"}(yr=t.SelectionUpdateType||(t.SelectionUpdateType={}));var Tr;!function(e){e.SelectOptionsSimple="select-options-simple",e.SelectOptionsToggle="select-options-toggle",e.SelectOptionsRange="select-options-range",e.SelectOptionsMouseMenu="select-options-menu",e.SelectOptionsSearchMatch="select-options-search"}(Tr=t.SelectOptions||(t.SelectOptions={}));var br;!function(e){e.Default="default",e.AlwaysClear="always-clear",e.NeverClear="never-clear"}(br=t.WhitespaceSelectionBehavior||(t.WhitespaceSelectionBehavior={}));var Ir;!function(e){e.Vertical="o-vert",e.Horizontal="o-horiz",e.OAutomatic="o-auto"}(Ir=t.Orientation||(t.Orientation={}));var Cr;!function(e){e.Log="log",e.Linear="linear"}(Cr=t.ScaleType||(t.ScaleType={}));var vr;!function(e){e.ST_All="all",e.ST_Datasource="datasource",e.ST_Sheet="sheet"}(vr=t.SourceType||(t.SourceType={}));var Dr;!function(e){e.AM_Explicit="explicitly",e.AM_OnSelect="on-select",e.AM_OnHover="on-hover"}(Dr=t.ActivationMethod||(t.ActivationMethod={}));var Pr;!function(e){e.OC_Nothing="nothing",e.OC_ShowAll="show-all",e.OC_ExcludeAll="exclude-all"}(Pr=t.OnClear||(t.OnClear={}));var _r;!function(e){e.MOS_MERGE="merge",e.MOS_SPLIT="split"}(_r=t.MergeOrSplit||(t.MergeOrSplit={}));var Ar;!function(e){e.ShapePrimitive="shape",e.LinePrimitive="line",e.BarPrimitive="bar",e.PolarBarPrimitive="polar-bar",e.TextPrimitive="text",e.LabelPrimitive="label",e.PiePrimitive="pie",e.AreaPrimitive="area",e.PolygonPrimitive="polygon",e.MultipolygonPrimitive="multipolygon",e.SquarePrimitive="square"}(Ar=t.MarkLayoutPrimitive||(t.MarkLayoutPrimitive={}));var Mr;!function(e){e.Standard="standard",e.OOStacked="oo-stacked",e.GanttStacked="gantt-stacked",e.Treemap="treemap",e.Bubble="bubble",e.Wordle="wordle",e.Highlight="highlight"}(Mr=t.MarkLayoutVizType||(t.MarkLayoutVizType={}));var Fr;!function(e){e.CategoricalAxis="categorical-axis",e.ShowSpecials="show-specials",e.OmitSpecials="omit-specials",e.BreakOnSpecials="break-on-specials"}(Fr=t.MarkLayoutHandleSpecials||(t.MarkLayoutHandleSpecials={}));var Er;!function(e){e.End="end",e.EndPrimitive="endprimitive",e.ClosedPrimitive="closedprimitive",e.Marked="marked",e.MarkedIfLabel="markediflabel",e.Debug="debug",e.User="user"}(Er=t.MarkLayoutMarkFlag||(t.MarkLayoutMarkFlag={}));var Lr;!function(e){e.EnablePanX="enable-pan-x",e.EnablePanY="enable-pan-y",e.EnableZoomX="enable-zoom-x",e.EnableZoomY="enable-zoom-y",e.EnableScaleX="enable-scale-x",e.EnableScaleY="enable-scale-y",e.ClipToCellX="clip-to-cell-x",e.ClipToCellY="clip-to-cell-y",e.ClipToCellForSelection="clip-to-cell-for-selection",e.XAxisOnTop="x-axis-on-top",e.YAxisOnRight="y-axis-on-right",e.HasCellsX="has-cells-x",e.HasCellsY="has-cells-y"}(Lr=t.MarkLayoutPaneFlag||(t.MarkLayoutPaneFlag={}));var Rr;!function(e){e.DropLineShowSelected="dropline-show-selected",e.DropLineShowAll="dropline-show-all",e.DropLineX="dropline-x",e.DropLineY="dropline-y",e.DropLineLabels="dropline-labels"}(Rr=t.MarkLayoutDropLineFlag||(t.MarkLayoutDropLineFlag={}));var wr;!function(e){e.MarkTable="mark-table",e.TextRunTable="text-run-table",e.TextStyleTable="text-style-table"}(wr=t.MarkLayoutDataTableID||(t.MarkLayoutDataTableID={}));var xr;!function(e){e.LABEL_LAYOUT_NONE="unlabeled",e.LABEL_LAYOUT_TREEMAP="treemap-labels",e.LABEL_LAYOUT_BUBBLECHART="bubble-labels",e.LABEL_LAYOUT_SCATTERPLOT="scatterplot-labels",e.LABEL_LAYOUT_STANDARD="standard-labels",e.LABEL_LAYOUT_HIGHLIGHT_TABLE="highlight-table-labels"}(xr=t.LabelLayoutType||(t.LabelLayoutType={}));var Or;!function(e){e.NormalUnder="normalUnder",e.NormalOn="normalOn",e.SelectedUnder="selectedUnder",e.SelectedOn="selectedOn",e.HighlightedUnder="highlightedUnder",e.HighlightedOn="highlightedOn",e.EdgeUnder="edgeUnder",e.EdgeOn="edgeOn",e.Border="border",e.SelectedUnder1="selectedUnder1",e.SelectedOn1="selectedOn1",e.UnSelectedCustomShape="unSelectedCustomShape",e.NormalAlphaMask="normalAlphaMask",e.HaloAlphaMask="haloAlphaMask",e.HighlightedUnder1="highlightedUnder1",e.HighlightedOn1="highlightedOn1",e.SelectedEdgeUnder="selectedEdgeUnder",e.BlobUnder="blobUnder",e.BlobOn="blobOn",e.HoverOverlay="hoverOverlay",e.PressedOverlay="pressedOverlay"}(Or=t.MarkLayer||(t.MarkLayer={}));var kr;!function(e){e.ColorOverrideNone="colorOverrideNone",e.ColorOverrideFog="colorOverrideFog",e.ColorOverrideOpaque="colorOverrideOpaque",e.ColorOverrideReplaceAlpha="colorOverrideReplaceAlpha",e.ColorOverrideCount="colorOverrideCount"}(kr=t.ColorOverrideMode||(t.ColorOverrideMode={}));var Nr;!function(e){e.ColorTransformNone="colorTransformNone",e.ColorTransformFog="colorTransformFog",e.ColorTransformOpaque="colorTransformOpaque",e.ColorTransformOverrideColor="colorTransformOverrideColor",e.ColorTransformOverrideAlpha="colorTransformOverrideAlpha"}(Nr=t.ColorTransformMode||(t.ColorTransformMode={}));var Vr;!function(e){e.MarkStateNormal="markStateNormal",e.MarkStateHighlighted="markStateHighlighted",e.MarkStateSelected="markStateSelected",e.MarkStateInvisible="markStateInvisible"}(Vr=t.MarkState||(t.MarkState={}));var Ur;!function(e){e.LineStateNormal="lineStateNormal",e.LineStateHighlighted="lineStateHighlighted",e.LineStateSelected="lineStateSelected"}(Ur=t.LineState||(t.LineState={}));var Br;!function(e){e.NormalUnderPass="normalUnderPass",e.NormalOnPass="normalOnPass",e.HighlightedUnderPass="highlightedUnderPass",e.HighlightedOnPass="highlightedOnPass",e.SelectedUnderPass="selectedUnderPass",e.SelectedOnPass="selectedOnPass",e.RenderPassCount="renderPassCount"}(Br=t.RenderPass||(t.RenderPass={}));var Gr;!function(e){e.ModelContainerRole="modelContainerRole",e.BackgroundRole="backgroundRole",e.UnderMarkRole="underMarkRole",e.MarkRole="markRole",e.UnderLabelRole="underLabelRole",e.LabelRole="labelRole",e.ForegroundRole="foregroundRole"}(Gr=t.ElementRole||(t.ElementRole={}));var Hr;!function(e){e.PathMoveTo="moveto",e.PathLineTo="lineto",e.PathCurveTo="curveto"}(Hr=t.PathElement||(t.PathElement={}));var Wr;!function(e){e.ZT_Invalid="invalid",e.ZT_Viz="viz",e.ZT_ColorLegend="color",e.ZT_ShapeLegend="shape",e.ZT_SizeLegend="size",e.ZT_MapLegend="map",e.ZT_QuickFilter="filter",e.ZT_Highlighter="highlighter",e.ZT_CurrPage="current-page",e.ZT_Empty="empty",e.ZT_Title="title",e.ZT_Text="text",e.ZT_Bitmap="bitmap",e.ZT_Web="web",e.ZT_AddIn="add-in",e.ZT_DashboardObject="dashboard-object",e.ZT_ParamCtrl="paramctrl",e.ZT_FlipboardNav="flipboard-nav",e.ZT_Flipboard="flipboard",e.ZT_LayoutBasic="layout-basic",e.ZT_LayoutFlow="layout-flow",e.ZT_LayoutFreeForm="layout-free-form",e.ZT_End="end"}(Wr=t.ZoneType||(t.ZoneType={}));var jr;!function(e){e.DBO_Invalid="invalid",e.DBO_Button="button",e.DBO_WorksheetFlipboard="worksheet-flipboard"}(jr=t.DocDashboardObjectTypes||(t.DocDashboardObjectTypes={}));var zr;!function(e){e.CT_Viz="viz",e.CT_ColorLegend="color",e.CT_ShapeLegend="shape",e.CT_SizeLegend="size",e.CT_MapLegend="map",e.CT_QuickFilter="filter",e.CT_Highlighter="highlighter",e.CT_CurrPage="current-page",e.CT_ParamCtrl="paramctrl",e.CT_Title="title",e.CT_Text="text",e.CT_Bitmap="bitmap",e.CT_Web="web",e.CT_AddIn="add-in",e.CT_DashboardObject="dashboard-object",e.CT_FlipboardNav="flipboard-nav",e.CT_Flipboard="flipboard",e.CT_None="content-none"}(zr=t.ContentType||(t.ContentType={}));var Qr;!function(e){e.ZLT_Basic="basic",e.ZLT_FreeForm="free-form",e.ZLT_Flow="flow",e.ZLT_DistributeEvenly="distribute-evenly",e.ZLT_Trivial="trivial"}(Qr=t.ZoneLayoutType||(t.ZoneLayoutType={}));var qr;!function(e){e.BT_Bounding="bounding",e.BT_Border="border",e.BT_Content="content"}(qr=t.BoxType||(t.BoxType={}));var Zr;!function(e){e.ModifyZoneZOrderCommandFront="front",e.ModifyZoneZOrderCommandBack="back",e.ModifyZoneZOrderCommandRelativePos="rel-pos"}(Zr=t.ModifyZoneZOrderCommandType||(t.ModifyZoneZOrderCommandType={}));var Yr;!function(e){e.THA_Left="h-align-left",e.THA_Center="h-align-center",e.THA_Right="h-align-right",e.THA_Automatic="h-align-auto"}(Yr=t.TextRegionHAlign||(t.TextRegionHAlign={}));var Kr;!function(e){e.TVA_Bottom="v-align-bottom",e.TVA_Center="v-align-center",e.TVA_Top="v-align-top",e.TVA_Automatic="v-align-auto"}(Kr=t.TextRegionVAlign||(t.TextRegionVAlign={}));var Jr;!function(e){e.ACIT_Invalid="invalid",e.ACIT_Field="field",e.ACIT_Function="func",e.ACIT_Separator="separator",e.ACIT_Header="header"}(Jr=t.AutoCompleteItemType||(t.AutoCompleteItemType={}));var Xr;!function(e){e.CC_CalculationDialog="calculation-dialog",e.CC_TypeInPill="type-in-pill",e.CC_FilterTop="filter-top",e.CC_FilterCondition="filter-condition",e.CC_JoinCalcDialog="join-calc-dialog"}(Xr=t.CalculationContext||(t.CalculationContext={}));var $r;!function(e){e.ForecastComponentType__ETS_NONE="ets-none",e.ForecastComponentType__ETS_ADDITIVE="ets-additive",e.ForecastComponentType__ETS_MULTIPLICATIVE="ets-multiplicative"}($r=t.ForecastComponentType||(t.ForecastComponentType={}));var ei;!function(e){e.PI_AXIS_NONE="none",e.PI_AXIS_X="axis-x",e.PI_AXIS_Y="axis-y"}(ei=t.PredictionIntervalAxis||(t.PredictionIntervalAxis={}));var ti;!function(e){e.QFT_Unknown="unknown",e.QFT_Quantitative="quantitative",e.QFT_RelativeDate="relative-date",e.QFT_Hierarchy="hierarchy",e.QFT_Categorical="categorical"}(ti=t.QuickFilterType||(t.QuickFilterType={}));var ai;!function(e){e.QuickFilterCategoricalCtrl__QFCC_Readout="readout",e.QuickFilterCategoricalCtrl__QFCC_Slider="slider",e.QuickFilterCategoricalCtrl__QFCC_StepBtns="step-buttons",e.QuickFilterCategoricalCtrl__QFCC_AllBtn="all-buttons",e.QuickFilterCategoricalCtrl__QFCC_FilterState="filterstate-button",e.QuickFilterCategoricalCtrl__QFCC_Search="search",e.QuickFilterCategoricalCtrl__QFCC_Domain="domain",e.QuickFilterCategoricalCtrl__QFCC_MoreFewerButton="morefewer-button",e.QuickFilterCategoricalCtrl__QFCC_Exclude="exclude",e.QuickFilterCategoricalCtrl__QFCC_Mode="mode",e.QuickFilterCategoricalCtrl__QFCC_Levels="levels",e.QuickFilterCategoricalCtrl__QFCC_ApplyButton="apply-button"}(ai=t.QuickFilterCategoricalCtrl||(t.QuickFilterCategoricalCtrl={}));var ri;!function(e){e.QuickFilterCategoricalMode__QFCM_CheckList="check-list",e.QuickFilterCategoricalMode__QFCM_RadioList="radio-list",e.QuickFilterCategoricalMode__QFCM_Dropdown="dropdown",e.QuickFilterCategoricalMode__QFCM_Slider="slider",e.QuickFilterCategoricalMode__QFCM_Pattern="pattern",e.QuickFilterCategoricalMode__QFCM_TypeInList="type-in-list",e.QuickFilterCategoricalMode__QFCM_CheckDropdown="check-dropdown"}(ri=t.QuickFilterCategoricalMode||(t.QuickFilterCategoricalMode={}));var ii;!function(e){e.QuickFilterQuantitativeCtrl__QFQC_Readouts="readouts",e.QuickFilterQuantitativeCtrl__QFQC_Slider="slider",e.QuickFilterQuantitativeCtrl__QFQC_NullCtrls="null-controls",e.QuickFilterQuantitativeCtrl__QFQC_ReldatePicker="rel-date-picker",e.QuickFilterQuantitativeCtrl__QFQC_Domain="domain",e.QuickFilterQuantitativeCtrl__QFQC_MoreFewerButton="morefewer-button",e.QuickFilterQuantitativeCtrl__QFQC_FilterState="filterstate-button"}(ii=t.QuickFilterQuantitativeCtrl||(t.QuickFilterQuantitativeCtrl={}));var ni;!function(e){e.QuickFilterQuantitativeMode__QFQM_MinMax="min-max",e.QuickFilterQuantitativeMode__QFQM_MinOnly="min-only",e.QuickFilterQuantitativeMode__QFQM_MaxOnly="max-only",e.QuickFilterQuantitativeMode__QFQM_RelDate="rel-date",e.QuickFilterQuantitativeMode__QFQM_RelPick="rel-pick"}(ni=t.QuickFilterQuantitativeMode||(t.QuickFilterQuantitativeMode={}));var oi;!function(e){e.RenderModeServer="render-mode-server",e.RenderModeClient="render-mode-client"}(oi=t.RenderMode||(t.RenderMode={}));var li;!function(e){e.AORM_ADD="add",e.AORM_REMOVE="remove"}(li=t.AddOrRemoveMarks||(t.AddOrRemoveMarks={}));var si;!function(e){e.GSV_On="on",e.GSV_Off="off"}(si=t.VisualDocEnumsGeoSearchVisibility||(t.VisualDocEnumsGeoSearchVisibility={}));var di;!function(e){e.MSV_On="on",e.MSV_Off="off"}(di=t.VisualDocEnumsMapScaleVisibility||(t.VisualDocEnumsMapScaleVisibility={}));var ci;!function(e){e.ADV_On="on",e.ADV_Off="off"}(ci=t.VisualDocEnumsAutoDrillVisibility||(t.VisualDocEnumsAutoDrillVisibility={}));var ui;!function(e){e.MT_Pan_Map="pan-map",e.MT_Rectangular_Selection="rectangular-selection",e.MT_Radial_Selection="radial-selection",e.MT_Zoom_In="zoom-in",e.MT_Zoom_Out="zoom-out",e.MT_Single_Selection="single-selection",e.MT_Lasso_Selection="lasso-selection",e.MT_All_Selection_Tools="all-selection-tools",e.MT_Area_Zoom="area-zoom",e.MT_No_Tools="no-tools",e.MT_Advanced_Selection_Tools="advanced-selection-tools",e.MT_Map_Tools="map-tools",e.MT_Non_Map_Tools="non-map-tools",e.MT_Tool_Mask="tool-mask"}(ui=t.VisualDocEnumsMapToolSelection||(t.VisualDocEnumsMapToolSelection={}));var pi;!function(e){e.FTV_Auto="auto",e.FTV_Show="show",e.FTV_Hide="hide"}(pi=t.VisualDocEnumsFloatingToolbarVisibility||(t.VisualDocEnumsFloatingToolbarVisibility={}));var mi;!function(e){e.NAV_Auto="auto",e.NAV_Fixed="fixed"}(mi=t.VisualDocEnumsVizNavigationSetting||(t.VisualDocEnumsVizNavigationSetting={}));var gi;!function(e){e.Percent="percent",e.EntireView="entire-view",e.FitWidth="fit-width",e.FitHeight="fit-height"}(gi=t.VisualDocEnumsZoomType||(t.VisualDocEnumsZoomType={}));var hi;!function(e){e.SheetScrollFirst="scroll-first",e.SheetScrollPrev="scroll-prev",e.SheetScrollNext="scroll-next",e.SheetScrollLast="scroll-last"}(hi=t.SheetScrollDirection||(t.SheetScrollDirection={}));var Si;!function(e){e.REALITY="reality",e.FIRST="first-time-in-cube",e.LAST="latest-time-in-cube",e.CUSTOM_FOR_CUBE="custom-for-cube",e.CUSTOM_PER_ATTRIBUTE="custom-per-attribute"}(Si=t.PerspectiveUtilsAggregateType||(t.PerspectiveUtilsAggregateType={}));var fi;!function(e){e.EdgeDrag="edge-drag",e.EdgeSnapAlign="edge-snap-align",e.EdgeSnapPosition="edge-snap-position"}(fi=t.ZoneEdgeMove||(t.ZoneEdgeMove={}));var yi;!function(e){e.FCT_NONE="fct-none",e.FCT_Color="fct-color",e.FCT_Font="fct-font",e.FCT_Border="fct-border",e.FCT_Stroke="fct-stroke",e.FCT_Number="fct-number",e.FCT_Layout="fct-layout",e.FCT_Text="fct-text",e.FCT_OptColor="fct-optcolor",e.FCT_BandColor="fct-bandcolor",e.FCT_BandSize="fct-bandsize",e.FCT_BandLevel="fct-bandlevel",e.FCT_DivLevel="fct-divlevel",e.FCT_SpecValsText="fct-specvalstext",e.FCT_SpecValsGraph="fct-specvalsgraph",e.FCT_HAlign="fct-halign",e.FCT_Orient="fct-orient",e.FCT_Rounding="fct-rounding",e.FCT_LineEnd="fct-lineend",e.FCT_LineEndSize="fct-lineendsize",e.FCT_BodyType="fct-bodytype",e.FCT_AlphaLevel="fct-alphalevel",e.FCT_LineInterpolation="fct-line-interpolation",e.FCT_MarkBorder="fct-markborder",e.FCT_MarkHalo="fct-markhalo",e.FCT_MarkMarkers="fct-markmarkers",e.FCT_RefLinePalette="fct-reflinepalette",e.FCT_Reverse="fct-reverse",e.FCT_Whiskers="fct-whiskers",e.FCT_BoxplotPalette="fct-boxplotpalette",e.FCT_SolidStroke="fct-solidstroke",e.FCT_BoxplotStyle="fct-boxplotstyle",e.FCT_BoxplotCompoundFill="fct-boxplotcompoundfill"}(yi=t.FormatControlType||(t.FormatControlType={}));var Ti;!function(e){e.FCF_VisualStylesheet="fcf_visualstylesheet",e.FCF_PaneStylesheet="fcf_panestylesheet",e.FCF_FixedScope="fcf_fixedscope",e.FCF_AllowTransparency="fcf_allowtransparency"}(Ti=t.FormatControlFlag||(t.FormatControlFlag={}));var bi;!function(e){e.ACS_RepositoryDir="repository-dir",e.ACS_ApplicationDir="application-dir",e.ACS_SamplesDir="samples-dir"}(bi=t.AppConfigEnum||(t.AppConfigEnum={}));var Ii;!function(e){e.DELTA_NONE="none",e.DELTA_ADDED="added",e.DELTA_EDITED="edited",e.DELTA_REMOVED="removed"}(Ii=t.DeltaType||(t.DeltaType={}));var Ci;!function(e){e.ExtractType_All="extract-type-all",e.ExtractType_Some="extract-type-some",e.ExtractType_None="extract-type-none"}(Ci=t.ExtractType||(t.ExtractType={}));var vi;!function(e){e.ExtractRefresh_None="extract-refresh-none",e.ExtractRefresh_Pending="extract-refresh-pending",e.ExtractRefresh_InProgress="extract-refresh-inprogress",e.ExtractRefresh_Done="extract-refresh-done",e.ExtractRefresh_Error="extract-refresh-error",e.ExtractRefresh_Canceled="extract-refresh-canceled"}(vi=t.ExtractRefreshStatus||(t.ExtractRefreshStatus={}));var Di;!function(e){e.MUS_Automatic="automatic",e.MUS_Metric="metric",e.MUS_US="us"}(Di=t.MapUnitSelectionEnum||(t.MapUnitSelectionEnum={}));var Pi;!function(e){e.RT_FULL="full",e.RT_INCREMENT="increment",e.RT_APPEND_FROM_DATA_SOURCE="append-from-data-source",e.RT_APPEND_FROM_FILE="append-from-file"}(Pi=t.DataConnectionHistoryRefreshType||(t.DataConnectionHistoryRefreshType={}));var _i;!function(e){e.SCE_STYLE_DEFAULT="style_default",e.SCE_STYLE_PRIMARY_FIELD="style_prim_field",e.SCE_STYLE_SECONDARY_FIELD="style_sec_field",e.SCE_STYLE_LOCAL_FUNCTION="style_local_func",e.SCE_STYLE_REMOTE_FUNCTION="style_remote_func",e.SCE_STYLE_PARAMETER="style_param",e.SCE_STYLE_COMMENT="style_comment",e.SCE_STYLE_INVALID_FIELD="style_invalid_field",e.SCE_STYLE_TABLE_EXPR="style_table_expr",e.SCE_STYLE_STRING="style_string",e.SCE_STYLE_DISABLED="style_disabled",e.SCE_STYLE_DRAG_OVER_FIELD="style_drag_over_field",e.SCE_STYLE_DRAG_OVER_SEL="style_drag_over_sel",e.SCE_STYLE_SELECTION="style_selection"}(_i=t.CalcStyle||(t.CalcStyle={}));var Ai;!function(e){e.FG_NUMERIC="num",e.FG_STRING="str",e.FG_DATE="date",e.FG_CAST="cast",e.FG_LOGICAL="logic",e.FG_AGGREGATE="agg",e.FG_OPERATOR="oper",e.FG_SYSTEM="sys",e.FG_PASSTHRU="pass",e.FG_SPECIAL="spec",e.FG_USER="user",e.FG_TABLECALC="table"}(Ai=t.FunctionGroup||(t.FunctionGroup={}));var Mi;!function(e){e.FAT_NONE="none",e.FAT_BOOL="boolean",e.FAT_REAL="real",e.FAT_INT="integer",e.FAT_STR="str",e.FAT_DATETIME="datetime",e.FAT_DATE="date",e.FAT_LOCALSTR="locstr",e.FAT_NULL="nil",e.FAT_ERROR="err",e.FAT_ANY="any",e.FAT_BIN="bin",e.FAT_TUPLE="tup",e.FAT_LOCALREAL="locreal",e.FAT_LOCALINT="locint",e.FAT_SPATIAL="spatial"}(Mi=t.FunctionArgType||(t.FunctionArgType={}));var Fi;!function(e){e.NoDisposition="no-disposition",e.Began="began",e.Ended="ended",e.Occurred="occurred",e.Active="active",e.Idle="idle"}(Fi=t.ActivityDisposition||(t.ActivityDisposition={}));var Ei;!function(e){e.NoResult="no-result",e.Succeeded="succeeded",e.Failed="failure",e.ThrewException="threw-exception",e.TimedOut="timed-out",e.Canceled="canceled",e.UnknownResult="unknown-result"}(Ei=t.ActivityResult||(t.ActivityResult={}));var Li;!function(e){e.ConstantReferenceLine="constant-reference-line",e.AverageReferenceLine="average-reference-line",e.CustomReferenceLine="custom-reference-line",e.CustomReferenceBand="custom-reference-band",e.AverageAndNinetyFive="average-and-ninety-five",e.MedianAndNinetyFive="median-and-ninety-five",e.CustomDistributionBand="custom-distribution-band",e.Boxplot="boxplot",e.CustomBoxplot="custom-boxplot",e.Totals="totals",e.TrendLineObject="trend-line-object",e.Forecast="forecast",e.Cluster="cluster",e.Outlier="outlier",e.MedianAndQuartiles="median-and-quartiles",e.Unknown="unknown"}(Li=t.AnalyticsObjectType||(t.AnalyticsObjectType={}));var Ri;!function(e){e.TargetCell="target-cell",e.TargetPane="target-pane",e.TargetTable="target-table",e.TargetLinear="target-linear",e.TargetLog="target-log",e.TargetExponential="target-exponential",e.TargetPolynomial="target-polynomial",e.TargetPower="target-power",e.TargetForecast="target-forecast",e.TargetCluster="target-cluster",e.TargetOutlier="target-outlier",e.TargetSubtotals="target-subtotals",e.TargetColumnTotals="target-column-totals",e.TargetRowTotals="target-row-totals"}(Ri=t.AnalyticsObjectDropTarget||(t.AnalyticsObjectDropTarget={}));var wi;!function(e){e.INVALID_CAPTION="invalid-caption-for-new-calc",e.INVALID_FORMULA="invalid-formula",e.SUCCEED="succeed"}(wi=t.CalcApplyResult||(t.CalcApplyResult={}));var xi;!function(e){e.UIAutomationCommandStatus_Success="success",e.UIAutomationCommandStatus_UnsupportedControlTypeError="unsupported-control-type-error",e.UIAutomationCommandStatus_UnsupportedActionError="unsupported-action-error",e.UIAutomationCommandStatus_ComponentNotFoundError="component-not-found-error",e.UIAutomationCommandStatus_UnknownError="unknown-error",e.UIAutomationCommandStatus_SaveError="save-error",e.UIAutomationCommandStatus_BadInputError="bad-input-error"}(xi=t.UIAutomationCommandStatus||(t.UIAutomationCommandStatus={}));var Oi;!function(e){e.DropWhenNever="never",e.DropWhenAlways="always",e.DropWhenSelected="when-selected"}(Oi=t.DropWhen||(t.DropWhen={}));var ki;!function(e){e.DOMAIN_INVALID="domain-invalid",e.DOMAIN_FREE_ENTRY="domain-free-entry",e.DOMAIN_LIST="domain-list",e.DOMAIN_MIN="domain-min",e.DOMAIN_MAX="domain-max"}(ki=t.ValueDomainType||(t.ValueDomainType={}));var Ni;!function(e){e.Equals="equals",e.NotEquals="not-equals",e.LessThan="less-than",e.LessThanEqual="less-than-equal",e.GreaterThan="greater-than",e.GreaterThanEqual="greater-than-equal",e.RangeInclusive="range-inclusive"}(Ni=t.OperationType||(t.OperationType={}));var Vi;!function(e){e.DropFieldNo="no",e.DropFieldYes="yes",e.DropFieldLock="lock",e.DropFieldFilter="filter",e.DropFieldDisaggregate="disaggregate"}(Vi=t.DropFieldResult||(t.DropFieldResult={}));var Ui;!function(e){e.NRC_UseOld="use-old",e.NRC_UseNew="use-new",e.NRC_RenameNew="rename-new"}(Ui=t.NameConflictResolution||(t.NameConflictResolution={}));var Bi;!function(e){e.SeparatorType__StringSeparator="string-separator",e.SeparatorType__CharacterCountSeparator="character-count-separator"}(Bi=t.SeparatorType||(t.SeparatorType={}));var Gi;!function(e){e.SplitMode__CS_ALL="split-all",e.SplitMode__CS_FIRST="split-first",e.SplitMode__CS_LAST="split-last"}(Gi=t.SplitMode||(t.SplitMode={}));var Hi;!function(e){e.NodeSelection_None="none",e.NodeSelection_SingleRow="single-row",e.NodeSelection_MultiRow="multi-row",e.NodeSelection_SingleColumn="single-column",e.NodeSelection_MultiColumn="multi-column",e.NodeSelection_Mixed="mixed"}(Hi=t.NodeSelectionType||(t.NodeSelectionType={}));var Wi;!function(e){e.SDI_DataSource="data-source",e.SDI_Worksheet="worksheet",e.SDI_Dashboard="dashboard",e.SDI_All="all"}(Wi=t.SourceDestIcon||(t.SourceDestIcon={}));var ji;!function(e){e.LL_RightVertical="right-vertical",e.LL_RightHorizontal="right-horizontal",e.LL_BottomVertical="bottom-vertical",e.LL_BottomHorizontal="bottom-horizontal"}(ji=t.LegendLayout||(t.LegendLayout={}));var zi;!function(e){e.JSON_OK="ok",e.JSON_NO_SHEET="no-sheet",e.JSON_INVALID_FIELD="invalid-field"}(zi=t.GetJsonResponseEnum||(t.GetJsonResponseEnum={}));var Qi;!function(e){e.CM_Unknown="UNKNWN",e.CM_BootstrapRequest="BTSTRP",e.CM_ProcessPrimaryPayload="PROPRI",e.CM_ProcessSecondaryPayload="PROSEC",e.CM_InitializeModels="MDLINI",e.CM_HandleModelEvents="MDLEVT",e.CM_ExecuteLocalCommand="EXELOC",e.CM_ExecuteRemoteCommand="EXEREM",e.CM_ProcessLocalResponse="PROLOC",e.CM_ProcessRemoteResponse="PROREM",e.CM_RenderPanetable="RNDRPT",e.CM_RenderRegion="RNDRRG",e.CM_RuntimeConversion="RTCONV",e.CM_ClientLoaded="CLNTLD",e.CM_ApplicationStartup="APPSTR",e.CM_ApplicationInteractive="APPINT",e.CM_AllZonesLoaded="ALLZNS",e.CM_ToolbarLayout="TBRLAY",e.CM_ToolbarHandleNewToolbar="TBRHNT",e.CM_ToolbarAddToolbar="TBRADD",e.CM_ToolbarHandleResize="TBRHRE",e.CM_ModuleLoaded="MDLOAD",e.CM_RuntimeLoaded="RTLOAD",e.CM_RuntimeFirstRun="RTFRUN"}(Qi=t.ClientMetric||(t.ClientMetric={}));var qi;!function(e){e.IER_Success="success",e.IER_EmptyCaption="empty-caption",e.IER_DuplicateCaption="duplicate-caption",e.IER_FailedValidation="failed-validation",e.IER_InvalidURL="invalid-url",e.IER_EmptyXRange="empty-x-range",e.IER_EmptyYRange="empty-y-range",e.IER_NoImagePreview="no-image-preview",e.IER_RenderException="render-exception",e.IER_TableauException="tableau-exception"}(qi=t.ImagesEditResultCode||(t.ImagesEditResultCode={}));var Zi;!function(e){e.DP_Datasource="datasource",e.DP_Selection="selection",e.DP_Table="table",e.DP_SQLQuery="sql-query"}(Zi=t.DataProviderType||(t.DataProviderType={}));var Yi;!function(e){e.DashboardDeviceLayout_Default="default",e.DashboardDeviceLayout_Desktop="desktop",e.DashboardDeviceLayout_Tablet="tablet",e.DashboardDeviceLayout_Phone="phone"}(Yi=t.DashboardDeviceLayout||(t.DashboardDeviceLayout={}));var Ki;!function(e){e.DeviceSource_Unknown="unknown",e.DeviceSource_SnapshotService="snapshot-srv",e.DeviceSource_UrlParam="url-param"}(Ki=t.DeviceSource||(t.DeviceSource={}));var Ji;!function(e){e.NoDimension="no",e.MinWidthDimension="minwidth",e.MinHeightDimension="minheight",e.MaxWidthDimension="maxwidth",e.MaxHeightDimension="maxheight",e.FixedWidthDimension="fixedwidth",e.FixedHeightDimension="fixedheight",e.ScrollableHeightDimension="scrollableheight",e.MinDimensions="mins",e.MaxDimensions="maxs"}(Ji=t.DashboardSizingDimension||(t.DashboardSizingDimension={}));var Xi;!function(e){e.Caption="caption",e.Number="number",e.Dot="dot",e.ArrowOnly="arrowonly"}(Xi=t.FlipboardNavType||(t.FlipboardNavType={}));var $i;!function(e){e.UnspecifiedSizing="unspecified",e.AutomaticSizing="automatic",e.FixedSizing="fixed",e.RangeSizing="range",e.VScrollSizing="vscroll"}($i=t.DashboardSizingMode||(t.DashboardSizingMode={}));var en;!function(e){e.GOM_Automatic="gom-automatic",e.GOM_On="gom-on",e.GOM_Off="gom-off"}(en=t.GridOverlayMode||(t.GridOverlayMode={}));var tn;!function(e){e.FieldPickerDialogUseCase_ReplaceField="replace-field-use-case",e.FieldPickerDialogUseCase_CreateIdentitySet="create-identity-set",e.FieldPickerDialogUseCase_EditDatasrouceAliases="edit-datasource-aliases-use-case",e.FieldPickerDialogUseCase_EditFilters="edit-filters-use-case",e.FieldPickerDialogUseCase_ExtractFilter="incremental-extract-use-case"}(tn=t.FieldPickerDialogUseCase||(t.FieldPickerDialogUseCase={}));var an;!function(e){e.ST_Top="top",e.ST_Right="right",e.ST_Bottom="bottom",e.ST_Left="left"}(an=t.SideType||(t.SideType={}));var rn;!function(e){e.EA_None="ea-none",e.EA_Warning="ea-warning",e.EA_Prompt="ea-prompt",e.EA_Info="ea-info",e.EA_Server="ea-server"}(rn=t.WorkgroupPublishErrorType||(t.WorkgroupPublishErrorType={}));var nn;!function(e){e.NeverSignedIn="server-connection-status-never-signed-in",e.HasSignedIn="server-connection_status-has-signed-in",e.WillAutoSignIn="server-connection_status-will-auto-sign-in",e.SignedIn="server-connection_status-signed-in"}(nn=t.ServerConnectionStatus||(t.ServerConnectionStatus={}));var on;!function(e){e.SOWValue__SOW_SYSTEMDEFAULT="sow-system-default",e.SOWValue__SOW_7DAYPERIOD="sow-7-day-period",e.SOWValue__SOW_SUNDAY="sow-sunday",e.SOWValue__SOW_MONDAY="sow-monday",e.SOWValue__SOW_TUESDAY="sow-tuesday",e.SOWValue__SOW_WEDNESDAY="sow-wednesday",e.SOWValue__SOW_THURSDAY="sow-thursday",e.SOWValue__SOW_FRIDAY="sow-friday",e.SOWValue__SOW_SATURDAY="sow-saturday",e.SOWValue__SOW_ISO8601WEEK="sow-iso8601-week"}(on=t.SOWValue||(t.SOWValue={}));var ln;!function(e){e.FindType_Starts="findtype-starts",e.FindType_Ends="findtype-ends",e.FindType_Contains="findtype-contains",e.FindType_Exact="findtype-exact"}(ln=t.FindType||(t.FindType={}));var sn;!function(e){e.PerspectiveType_Reality="perspectivetype-reality",e.PerspectiveType_First="perspectivetype-first",e.PerspectiveType_Last="perspectivetype-last",e.PerspectiveType_Custom="perspectivetype-custom"}(sn=t.PerspectiveEnumPerspectiveType||(t.PerspectiveEnumPerspectiveType={}));var dn;!function(e){e.RawVTL="raw-vtl",e.RawStore="raw-store",e.PayloadVTL="payload-vtl",e.FinalStore="final-store",e.Input="input",e.Output="output"}(dn=t.RuntimeInfoRuntimeOutput||(t.RuntimeInfoRuntimeOutput={}));var cn;!function(e){e.Empty="empty",e.MultiPolygon="multiPolygon",e.MultiPoint="multiPoint",e.MultiLineString="multiLineString"}(cn=t.GeometryType||(t.GeometryType={}));var un;!function(e){e.MarksScalingAutomatic="marks-scaling-automatic",e.MarksScalingOn="marks-scaling-on",e.MarksScalingOff="marks-scaling-off"}(un=t.MarkSizingSetting||(t.MarkSizingSetting={}));var pn;!function(e){e.Columns="cardtype-columns",e.Rows="cardtype-rows",e.Pages="cardtype-pages",e.CurrentPage="cardtype-currentPage",e.Filters="cardtype-filters",e.Marks="cardtype-marks",e.Measures="cardtype-measures",e.ColorLegend="cardtype-colorLegend",e.ShapeLegend="cardtype-shapeLegend",e.SizeLegend="cardtype-sizeLegend",e.MapLegend="cardtype-mapLegend",e.Title="cardtype-title",e.Caption="cardtype-caption",e.Summary="cardtype-summary",e.Parameter="cardtype-parameter",e.QuickFilter="cardtype-quickFilter",e.Highlighter="cardtype-highlighter"}(pn=t.CardType||(t.CardType={}));var mn;!function(e){e.TableViewFieldData="table-view-field-data",e.TableViewGroupData="table-view-group-data"}(mn=t.TableViewDataType||(t.TableViewDataType={}));var gn;!function(e){e.LINK_ERROR="linkerror",e.OVERLAP_TEXT="WarnOverlappingText",e.INVALID_WORKSHEET="WarnInvalidWorksheet",e.OPEN_BOOK="openbook",e.OPEN_DATASOURCE="opendatasource",e.OPEN_SHEET="opensheet",e.LOCALDATA_AMBIGUITY="LocalDataAmbiguity",e.LOCALDATA_MISMATCH="LocalDataMismatch",e.MISSING_LOCAL_TILE="MissingLocalTiles",e.MAP_TILE_DOWNLOAD="MapTileDownloadError",e.MAP_TILE_INTERMITTENT="MapTileIntermittent",e.MAP_TILE_REGION="MapTileRegion",e.MAP_SERVER_FORBIDDEN="MapServerForbidden",e.DM_CANNOT_SCORE="DMCannotScore",e.DM_SCORING_NOT_REC="DMScoringNotRecommended",e.LOCAL_DATA_LIBRARY_MISSING="LocalDataLibraryMissing",e.DM_MISSING_MODEL="DMMissingModel",e.DI_NO_LINK="DINoLink",e.LOCALDATA_NO_GEOMETRY="LocalDataNoGeometry",e.LOCALDATA_NO_GEOMETRY_UPGRADE="LocalDataNoGeometryUpgrade",e.DI_NO_RELATIONSHIPS="DINoRelationships"}(gn=t.WarningType||(t.WarningType={}));var hn;!function(e){e.DataTab="data-tab",e.Document="document",e.SheetSorter="sheet-sorter"}(hn=t.WorkbookUIMode||(t.WorkbookUIMode={}));var Sn;!function(e){e.File="file",e.Data="data",e.Worksheet="worksheet",e.Dashboard="dashboard",e.Analysis="analysis",e.Format="format",e.Map="map",e.Help="help"}(Sn=t.TopLevelMenuItem||(t.TopLevelMenuItem={}));var fn;!function(e){e.Invalid="invalid",e.Dashboard="dashboard"}(fn=t.AddInType||(t.AddInType={}));var yn;!function(e){e.Unknown="unknown",e.Desktop="desktop",e.Server="server"}(yn=t.AddInContext||(t.AddInContext={}));var Tn;!function(e){e.Unknown="unknown",e.Authoring="authoring",e.Viewing="viewing"}(Tn=t.AddInMode||(t.AddInMode={}));var bn;!function(e){e.Success="success",e.DialogAlreadyOpen="dialog-already-open",e.InvalidDomain="invalid-domain"}(bn=t.ExtensionDialogResult||(t.ExtensionDialogResult={}));var In;!function(e){e.None="none",e.FullData="full-data"}(In=t.ExtensionPermission||(t.ExtensionPermission={}));var Cn;!function(e){e.LFG_Invalid="invalid",e.LFG_MultiPolygon="multiPolygon",e.LFG_MultiLine="multiLine",e.LFG_MultiPoint="multiPoint",e.LFG_StartObject="startObject",e.LFG_StartPolygon="startPolygon",e.LFG_StartLine="startLine",e.LFG_EndGeometry="endGeometry"}(Cn=t.LinearFloatGeometryMarker||(t.LinearFloatGeometryMarker={}));var vn;!function(e){e.Navigate="Nav",e.Reload="Reload",e.BackForward="BackFwd",e.Reserved="Reserved"}(vn=t.NavigationType||(t.NavigationType={}));var Dn;!function(e){e.CreateOptions="Opt",e.ParameterParse="Parse",e.Bootstrap="Boot",e.TopLevelViz="Top"}(Dn=t.NavigationSource||(t.NavigationSource={}));var Pn;!function(e){e.Invalid="Invalid",e.Success="Success",e.AlreadyCancelling="AlreadyCancelling",e.NothingToCancel="NothingToCancel",e.NotAllowed="NotAllowed"}(Pn=t.CommandCancellationResult||(t.CommandCancellationResult={}));var _n;!function(e){e.Alphabetic="alphabetic",e.Generic="generic",e.Nested="nested"}(_n=t.SortIndicatorType||(t.SortIndicatorType={}));var An;!function(e){e.Unsorted="unsorted",e.SortAscending="sort-ascending",e.SortDescending="sort-descending"}(An=t.ShelfSortIndicatorState||(t.ShelfSortIndicatorState={}));var Mn;!function(e){e.AnimationScenario_None="animation-scenario-none",e.AnimationScenario_Scatterplot="animation-scenario-scatterplot",
e.AnimationScenario_VerticalBars="animation-scenario-vertical-bars",e.AnimationScenario_HorizontalBars="animation-scenario-horizontal-bars",e.AnimationScenario_VerticalLines="animation-scenario-vertical-lines",e.AnimationScenario_HorizontalLines="animation-scenario-horizontal-lines",e.AnimationScenario_VerticalAreas="animation-scenario-vertical-areas",e.AnimationScenario_HorizontalAreas="animation-scenario-horizontal-areas",e.AnimationScenario_All="animation-scenario-all"}(Mn=t.AnimationScenarioType||(t.AnimationScenarioType={}));var Fn;!function(e){e.DataPresent="data-present",e.ConstComparison="const-comparison"}(Fn=t.DataAlertType||(t.DataAlertType={}));var En;!function(e){e.GreaterThan="greater-than",e.GreaterThanEqual="greater-than-equal",e.Equals="equals",e.LessThan="less-than",e.LessThanEqual="less-than-equal"}(En=t.DataAlertConditionOperationType||(t.DataAlertConditionOperationType={}));var Ln;!function(e){e.Create="create",e.Edit="edit"}(Ln=t.DataAlertDialogMode||(t.DataAlertDialogMode={}))},function(e,t,a){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=a(82),n=a(85),o=a(96),l=a(98),s=a(99),d=a(100),c=a(101),u=a(92),p=a(97),m=function(e){return e},g=function(){function e(){}return e.createPresLayerToApiParamRegistry=function(e){var t=new S;return t.addRegistration(n.ParameterId.AddInLocator,i.ParameterId.ExtensionLocator,u.PresLayerToApiConverter.convertExtensionLocator),t.addRegistration(n.ParameterId.AddInBootstrapInfo,i.ParameterId.ExtensionBootstrapInfo,u.PresLayerToApiConverter.convertExtensionBootstrapInfo),t.addRegistration(n.ParameterId.UnderlyingDataTable,i.ParameterId.UnderlyingDataTable,p.UnderlyingDataConverter.buildUnderlyingDataTable.bind(void 0,!1)),t.addRegistration(n.ParameterId.UnderlyingDataTable,i.ParameterId.UnderlyingSummaryDataTable,p.UnderlyingDataConverter.buildUnderlyingDataTable.bind(void 0,!0)),t.addRegistration(n.ParameterId.UnderlyingDataTable,i.ParameterId.DataSourceDataTable,p.UnderlyingDataConverter.buildUnderlyingDataTable.bind(void 0,!0)),t.addRegistration(n.ParameterId.FieldCaption,i.ParameterId.FieldName,m),t.addRegistration(n.ParameterId.SelectionData,i.ParameterId.SelectedData,o.ActiveMarksDataConverter.buildSelectedDataTable),t.addRegistration(n.ParameterId.HighlightedData,i.ParameterId.HighlightedData,o.ActiveMarksDataConverter.buildHighlightedDataTable),t.addRegistration(n.ParameterId.AddInSettingsInfo,i.ParameterId.ExtensionSettingsInfo,u.PresLayerToApiConverter.convertExtensionSettingsInfo),t.addRegistration(n.ParameterId.Worksheet,i.ParameterId.WorksheetName,m),t.addRegistration(n.ParameterId.ParameterCtrls,i.ParameterId.ParameterInfos,c.ParametersDataConverter.convertParameterList),t.addRegistration(n.ParameterId.ParameterCtrl,i.ParameterId.ParameterInfo,c.ParametersDataConverter.convertParameter),t.addRegistration(n.ParameterId.DataSchema,i.ParameterId.DataSchema,u.PresLayerToApiConverter.convertDataSchema),t.addRegistration(n.ParameterId.FiltersInfo,i.ParameterId.WorksheetFilters,s.FiltersConverter.convertFiltersPresModel),t.addRegistration(n.ParameterId.CategoricalDomain,i.ParameterId.CategoricalDomain,s.FiltersConverter.convertCategoricalDomain),t.addRegistration(n.ParameterId.QuantitativeDomain,i.ParameterId.QuantitativeDomain,s.FiltersConverter.convertQuantitativeDomain),t.addRegistration(n.ParameterId.JoinDescription,i.ParameterId.JoinDescription,u.PresLayerToApiConverter.convertJoinDescription),t.addRegistration(n.ParameterId.ConnectionDescriptionSummaries,i.ParameterId.ConnectionDescriptionSummaries,u.PresLayerToApiConverter.convertConnectionDescrptionSummaries),t.addRegistration(n.ParameterId.ExtensionDialogPayload,i.ParameterId.ExtensionDialogPayload,m),t.addRegistration(n.ParameterId.ExtensionDialogResult,i.ParameterId.ExtensionDialogResult,u.PresLayerToApiConverter.convertExtensionDialogResult),t},e.createApiToPresLayerParamRegistry=function(e){var t=new h;return t.addRegistration(i.ParameterId.ExtensionLocator,n.ParameterId.AddInLocator,l.ApiToPresLayerConverter.convertExtensionLocator),t.addRegistration(i.ParameterId.SettingsValues,n.ParameterId.AddInSettings,m),t.addRegistration(i.ParameterId.IgnoreAliases,n.ParameterId.IgnoreAliases,m),t.addRegistration(i.ParameterId.IgnoreSelection,n.ParameterId.IgnoreSelection,m),t.addRegistration(i.ParameterId.IncludeAllColumns,n.ParameterId.IncludeAllColumns,m),t.addRegistration(i.ParameterId.MaxRows,n.ParameterId.MaxRows,m),t.addRegistration(i.ParameterId.VisualId,n.ParameterId.VisualIDPM,l.ApiToPresLayerConverter.convertVisualId),t.addRegistration(i.ParameterId.ColumnsToInclude,n.ParameterId.FieldDisplayNames,m),t.addRegistration(i.ParameterId.FieldName,n.ParameterId.QualifiedFieldCaption,m),t.addRegistration(i.ParameterId.FilterValues,n.ParameterId.FilterAliases,l.ApiToPresLayerConverter.convertFilterValues),t.addRegistration(i.ParameterId.FilterUpdateType,n.ParameterId.FilterUpdateType,l.ApiToPresLayerConverter.convertFilterType),t.addRegistration(i.ParameterId.IsExcludeMode,n.ParameterId.Exclude,m),t.addRegistration(i.ParameterId.FilterRangeMin,n.ParameterId.RangeMin,m),t.addRegistration(i.ParameterId.FilterRangeMax,n.ParameterId.RangeMax,m),t.addRegistration(i.ParameterId.FilterRangeNullOption,n.ParameterId.Included,l.ApiToPresLayerConverter.ConvertNullOption),t.addRegistration(i.ParameterId.FieldId,n.ParameterId.FieldName,m),t.addRegistration(i.ParameterId.DomainType,n.ParameterId.FilterDomainType,l.ApiToPresLayerConverter.ConvertFilterDomainType),t.addRegistration(i.ParameterId.VisualId,n.ParameterId.Worksheet,l.ApiToPresLayerConverter.convertVisualIdToWorksheet),t.addRegistration(i.ParameterId.VisualId,n.ParameterId.Dashboard,l.ApiToPresLayerConverter.convertVisualIdToDashboard),t.addRegistration(i.ParameterId.ParameterCaption,n.ParameterId.FieldCaption,m),t.addRegistration(i.ParameterId.ParameterFieldName,n.ParameterId.FieldNameString,m),t.addRegistration(i.ParameterId.ParameterFieldName,n.ParameterId.GlobalFieldName,m),t.addRegistration(i.ParameterId.ParameterValue,n.ParameterId.ValueStr,m),t.addRegistration(i.ParameterId.SheetPath,n.ParameterId.SheetPathPM,function(e){return l.ApiToPresLayerConverter.convertSheetPath(e)}),t.addRegistration(i.ParameterId.Selection,n.ParameterId.Selection,m),t.addRegistration(i.ParameterId.SelectionUpdateType,n.ParameterId.SelectionUpdateType,m),t.addRegistration(i.ParameterId.HierValSelectionModels,n.ParameterId.HierValSelectionModels,m),t.addRegistration(i.ParameterId.QuantRangeSelectionModels,n.ParameterId.QuantRangeSelectionModels,m),t.addRegistration(i.ParameterId.DimValSelectionModels,n.ParameterId.DimValSelectionModels,m),t.addRegistration(i.ParameterId.DataSourceId,n.ParameterId.Datasource,m),t.addRegistration(i.ParameterId.ExtensionDialogUrl,n.ParameterId.ExtensionDialogUrl,m),t.addRegistration(i.ParameterId.ExtensionDialogPayload,n.ParameterId.ExtensionDialogPayload,m),t.addRegistration(i.ParameterId.IsExtensionDialog,n.ParameterId.IsExtensionDialog,m),t.addRegistration(i.ParameterId.ExtensionDialogH,n.ParameterId.ExtensionDialogH,m),t.addRegistration(i.ParameterId.ExtensionDialogW,n.ParameterId.ExtensionDialogW,m),t},e}();t.ParameterMappingRegistryFactory=g;var h=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(d.MappingRegistry);t.ApiToPresLayerMappingRegistry=h;var S=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(d.MappingRegistry);t.PresLayerToApiMappingRegistry=S},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(83),n=a(93),o=a(97),l=function(){function e(){}return e.buildSelectedDataTable=function(t){return{data:e.buildActiveMarksList(t.dataDictionary,t.vizData)}},e.buildHighlightedDataTable=function(t){return{data:e.buildActiveMarksList(t.dataDictionary,t.vizData)}},e.buildActiveMarksList=function(e,t){for(var a=new Array,l=function(l){var s=t.paneColumnsData.vizDataColumns.filter(function(e){return e.paneIndices.indexOf(l)>-1}),d=s.map(function(e){var t=e.paneIndices.indexOf(l),a=e.columnIndices[t];return a}),c=t.paneColumnsData.paneColumnsList[l];if(c.vizPaneColumns.length!==s.length)throw i.ErrorHelpers.presModelParsingError("VizDataPresModel");for(var u=new Array,p=new Array,m=c.vizPaneColumns[0].tupleIds,g=new Array,h=0;h<m.length;h++){var S={type:r.MarkType.Bar,color:"red",tupleId:m[h]};g.push(S);for(var f=new Array(c.vizPaneColumns.length-1),y=1;y<c.vizPaneColumns.length;y++){var T=s[d[y]],b=c.vizPaneColumns[y];if(0===h){var I={dataType:n.PresLayerToApiEnumMappings.dataType.convert(T.dataType),fieldName:T.fn,isReferenced:!0,index:y-1,fieldCaption:T.fieldCaption};u.push(I)}var C=o.UnderlyingDataConverter.lookupValueFromDictionary(e,T.dataType,b.valueIndices[h]),v=o.UnderlyingDataConverter.lookupValueFromDictionary(e,T.dataType,b.aliasIndices[h])||"",D=v,P={value:C,formattedValue:D,aliasedValue:v};f[y-1]=P}p.push(f)}var _={dataTable:p,headers:u,marks:g};a.push(_)},s=0;s<t.paneColumnsData.paneColumnsList.length;s++)l(s);return a},e}();t.ActiveMarksDataConverter=l},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(93),i=a(83),n=a(94),o=function(){function e(){}return e.lookupValueFromDictionary=function(t,a,r){r<0&&(a=n.DataType.DT_STRING,r=-r-1);var i=null,o=e.getRawValue(t,a,r);return null!==o&&(i=o.toString()),i},e.getRawValue=function(e,t,a){if(!e.dataSegments)return null;for(var r=0,i=Object.keys(e.dataSegments);r<i.length;r++)for(var n=i[r],o=e.dataSegments[n],l=0,s=o.dataColumns;l<s.length;l++){var d=s[l];if(d&&d.dataType===t){if(a<d.dataValues.length)return d.dataValues[a];a-=d.dataValues.length;break}}return null},e.buildDataTable=function(t,a){var r={dataTable:e.buildTable(t,a),headers:a.map(function(t,a){return e.buildColumnModel(t,a)})};return r},e.buildUnderlyingDataTable=function(t,a){var r={data:e.buildDataTable(a.dataDictionary,a.underlyingDataTableColumns),isSummary:t};return r},e.buildColumnModel=function(e,t){return{dataType:r.PresLayerToApiEnumMappings.dataType.convert(e.dataType),fieldName:e.fn,fieldCaption:e.fieldCaption,isReferenced:!!e.isReferenced,index:t}},e.buildTable=function(t,a){if(0===a.length)return new Array;for(var r=a[0].formatValIdxs.length,o=a.length,l=new Array(r),s=0;s<r;s++)l[s]=new Array(o);for(var d=0;d<o;d++)for(var c=a[d],s=0;s<r;s++){var u=e.lookupValueFromDictionary(t,n.DataType.DT_STRING,c.formatValIdxs[s]);if(null===u)throw i.ErrorHelpers.presModelParsingError("UnderlyingDataTableColumnPresModel");var p={value:e.lookupValueFromDictionary(t,c.dataType,c.valueIndices[s]),formattedValue:u,aliasedValue:u};l[s][d]=p}return l},e}();t.UnderlyingDataConverter=o},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(93),i=a(83),n=function(){function e(){}return e.convertSheetPath=function(e){if(!e)throw i.ErrorHelpers.invalidValueForArgumentError(e,"apiSheetPath");var t={sheetName:e.sheetName,isDashboard:e.isDashboard,storyboard:e.storyboard||"",flipboardZoneId:e.flipboardZoneID||0,storyPointId:e.storyPointID||0};return t},e.convertExtensionLocator=function(t){var a={addInInstanceId:t.instanceId,sheetPath:e.convertSheetPath(t.dashboardPath)};return a},e.convertVisualId=function(e){var t={worksheet:e.worksheet,dashboard:e.dashboard,storyboard:e.storyboard,storyPointId:e.storyPointID,flipboardZoneId:e.flipboardZoneID};return t},e.convertVisualIdToWorksheet=function(e){return e.worksheet},e.convertVisualIdToDashboard=function(e){return e.dashboard||""},e.convertFilterValues=function(e){return 0===e.length?[""]:e},e.convertFilterType=function(e){return r.ApiToPresLayerEnumMappings.filterUpdateType.convert(e)},e.ConvertNullOption=function(e){return r.ApiToPresLayerEnumMappings.nullOption.convert(e)},e.ConvertFilterDomainType=function(e){return r.ApiToPresLayerEnumMappings.filterDomainType.convert(e)},e}();t.ApiToPresLayerConverter=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(94),n=a(93),o=a(92),l=function(){function e(){}return e.convertFiltersPresModel=function(t){var a=[];return t.forEach(function(t){switch(t.filterType){case i.FilterType.FLTR_Categorical:a.push(e.convertCategoricalFilterPresModel(t));break;case i.FilterType.FLTR_Quantitative:a.push(e.convertQuantitativeFilterPresModel(t));break;case i.FilterType.FLTR_RelativeDate:a.push(e.convertRelativeDateFilterPresModel(t));break;default:return}}),a},e.convertCategoricalFilterPresModel=function(t){var a=t.categoricalFilterInfo.captionedFilterValueList.map(function(t){return e.convertFilterValuePresModel(t)}),i={values:a,isExclude:t.categoricalFilterInfo.exclude,filterType:r.FilterType.Categorical,fieldCaption:t.fieldCaption,fieldName:t.fn,visualId:o.PresLayerToApiConverter.convertVisualId(t.visualIdPresModel)};return i},e.convertQuantitativeFilterPresModel=function(t){var a=e.convertFilterValuePresModel(t.quantitativeFilterInfo.captionedRangeMin),i=e.convertFilterValuePresModel(t.quantitativeFilterInfo.captionedRangeMax),n={filterType:r.FilterType.Range,fieldCaption:t.fieldCaption,fieldName:t.fn,visualId:o.PresLayerToApiConverter.convertVisualId(t.visualIdPresModel),min:a,max:i,includeNullValues:e.convertIncludedNullValues(t.quantitativeFilterInfo.included)};return n},e.convertRelativeDateFilterPresModel=function(t){var a=e.convertFilterValuePresModel(t.relativeDateFilterInfo.captionedAnchorDate),i={filterType:r.FilterType.RelativeDate,fieldCaption:t.fieldCaption,fieldName:t.fn,visualId:o.PresLayerToApiConverter.convertVisualId(t.visualIdPresModel),anchorDate:a,periodType:n.PresLayerToApiEnumMappings.dateStepPeriod.convert(t.relativeDateFilterInfo.datePeriodType),rangeType:n.PresLayerToApiEnumMappings.dateRangeType.convert(t.relativeDateFilterInfo.dateRangeType),rangeN:t.relativeDateFilterInfo.rangeN};return i},e.convertCategoricalDomain=function(t){var a=t.captionedFilterValueList.map(function(t){return e.convertFilterValuePresModel(t)});return{values:a}},e.convertQuantitativeDomain=function(t){var a=e.convertFilterValuePresModel(t.captionedRangeMin),r=e.convertFilterValuePresModel(t.captionedRangeMax);return{max:r,min:a}},e.convertFilterValuePresModel=function(e){var t;switch(e.dataType){case i.DataType.DT_BOOLEAN:t=Boolean(e.dataValueStr);break;case i.DataType.DT_DATE:t=new Date(e.dataValueStr);break;case i.DataType.DT_DATETIME:t=new Date(e.dataValueStr);break;case i.DataType.DT_INTEGER:t=Number.parseInt(e.dataValueStr);break;case i.DataType.DT_REAL:t=Number.parseFloat(e.dataValueStr);break;default:t=e.dataValueStr}return{value:t,aliasedValue:"",formattedValue:e.dataValueDisplayString}},e.convertIncludedNullValues=function(e){return e===i.FiltersQuantitativeIncludedValues.InRangeOrNull||e===i.FiltersQuantitativeIncludedValues.All||e===i.FiltersQuantitativeIncludedValues.Null},e}();t.FiltersConverter=l},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(84),n=function(){function e(){this._registry={}}return e.prototype.has=function(e,t){var a=this.makeKey(e,t);return!!this._registry.hasOwnProperty(a)&&!!this._registry[a]},e.prototype.get=function(e,t){if(!this.has(e,t))throw new i.InternalTableauError(r.ErrorCodes.MISSING_ENUM_MAPPING,"Missing requested mapping: "+e+" to "+t);var a=this.makeKey(e,t);return this._registry[a]},e.prototype.addRegistration=function(e,t,a){var r=this.makeKey(e,t);this._registry[r]=a},e.prototype.makeKey=function(e,t){var a={input:e,output:t};return JSON.stringify(a)},e}();t.MappingRegistry=n},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(82),i=a(83),n=a(93),o=function(){function e(){}return e.convertParameterList=function(t){return t.map(e.convertParameter)},e.convertParameter=function(t){var a=e.convertAliasedDataValue(t.valueAlias,t.formattedValue),i=n.PresLayerToApiEnumMappings.parameterTypesDomainType.convert(t.parameterDomainType),o={name:t.fieldCaption,fieldName:t.parameterName,dataType:n.PresLayerToApiEnumMappings.dataType.convert(t.dataType),currentValue:a,allowableValuesType:i};if(i===r.DomainRestrictionType.List){for(var l=new Array,s=0;s<t.valuesAliases.length;s++){var d=t.valuesAliases[s],c=t.formattedValues[s];l.push(e.convertAliasedDataValue(d,c))}o.allowableValues=l}else i===r.DomainRestrictionType.Range&&(o.minValue=e.makeDataValue(t.valueMin,t.formattedMin),o.maxValue=e.makeDataValue(t.valueMax,t.formattedMax),o.stepSize=e.convertNumber(o.dataType,t.valueInc),o.dateStepPeriod=n.PresLayerToApiEnumMappings.dateStepPeriod.convert(t.datePeriodType,!1));return o},e.convertNumber=function(e,t){if(t){if(e===r.DataType.Int||e===r.DataType.Date||e===r.DataType.DateTime)return parseInt(t,10);if(e===r.DataType.Float)return parseFloat(t)}},e.makeDataValue=function(e,t,a){var r={value:e,formattedValue:t,aliasedValue:a||t};return r},e.convertAliasedDataValue=function(t,a){if(!(t&&t instanceof Array))throw i.ErrorHelpers.presModelParsingError("ParameterCtrlPresModel");var r=t[0],n=t.length<2?void 0:t[1];return e.makeDataValue(r,a,n)},e}();t.ParametersDataConverter=o},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(103),i=function(){function e(e,t,a,i){this._extensionName=t,this._extensionID=a,this._capabilities=i,this._cmdPermissions=r.CommandPermissionMappingRegistryFactory.createCmdPermissionMappingRegistry(e)}return e.prototype.validate=function(e){var t=this._cmdPermissions.getCommandPermission(e);return!t||this._capabilities.indexOf(t)!==-1||(console.error("Extension (name = "+this._extensionName+", ID = "+this._extensionID+") is missing required permission: "+t),!1)},e}();t.PermissionValidator=i},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(87),i=a(94),n=function(){function e(){this._permissionMap={}}return e.prototype.addCommandPermission=function(e,t){if(this._permissionMap[e])throw new Error("Only One Permission Per Command");this._permissionMap[e]=t},e.prototype.getCommandPermission=function(e){return this._permissionMap[e]},e}();t.CommandPermissionMappingRegistry=n;var o=function(){function e(){}return e.createCmdPermissionMappingRegistry=function(e){var t=new n;return t.addCommandPermission(r.DocCommands.GetUnderlyingData,i.ExtensionPermission.FullData),t.addCommandPermission(r.DocCommands.GetDataSourceData,i.ExtensionPermission.FullData),t.addCommandPermission(r.DocCommands.GetConnectionDescriptionSummaryPresModels,i.ExtensionPermission.FullData),t.addCommandPermission(r.DocCommands.GetJoinDescriptionPresModel,i.ExtensionPermission.FullData),t},e}();t.CommandPermissionMappingRegistryFactory=o},function(e,t,a){"use strict";function r(e){for(var a in e)t.hasOwnProperty(a)||(t[a]=e[a])}Object.defineProperty(t,"__esModule",{value:!0}),r(a(6)),r(a(7)),r(a(8)),r(a(9)),r(a(10))},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){var t=this;this._interopObject=e,this._notificationHandlers={},e&&e.OnNotification&&e.OnNotification.connect(function(e){t.dispatchNotification(e)})}return Object.defineProperty(e.prototype,"AddInInstanceInfo",{get:function(){return this._interopObject.addInInstanceInfo},enumerable:!0,configurable:!0}),e.prototype.invokeCommand=function(e,t,a){var r=this;return new Promise(function(i,n){try{e=e||"tabdoc",r._interopObject.ExecuteCommand(e,t,a,function(e){if(e.Success)i(e.Result);else{var t="ExecuteCommand failed, with result: "+JSON.stringify(e.Result);n(new Error(t))}})}catch(o){n(o)}})},e.prototype.registerNotificationHandler=function(e,t){var a=this;if(e in this._notificationHandlers)this._notificationHandlers[e].push(t);else{this._notificationHandlers[e]=[t];try{this._interopObject.RegisterNotificationHandler(e)}catch(r){}}return function(){return a.removeNotificationHandler(e,t)}},e.prototype.removeNotificationHandler=function(e,t){var a=this._notificationHandlers[e];if(a){var r=a.indexOf(t);r>=0&&a.splice(r,1),0===a.length&&delete this._notificationHandlers[e]}},e.prototype.dispatchNotification=function(e){var t=e.eventId,a=e.presModel;if(t in this._notificationHandlers)for(var r=this._notificationHandlers[t],i=r.length-1;i>=0;i--)r[i](a)},e}();t.AddInApiPresLayerImpl=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e){var t=this;this._apiEventHandler=e,this._notificationHandlers=[],this._apiEventHandler.setEventHandler(function(e,a){t._notificationHandlers.forEach(function(t){return t({notificationId:e,data:a})})})}return e.prototype.setVersionNumber=function(e){this._apiEventHandler.setVersionNumber(e)},e.prototype.execute=function(e,t){return this._apiEventHandler.execute(e,t)},e.prototype.registerNotificationHandler=function(e){this._notificationHandlers.push(e)},e.prototype.unregisterNotificationHandler=function(e){this._notificationHandlers=this._notificationHandlers.filter(function(t){return t!==e})},e}();t.DesktopApiDispatcher=a},function(e,t,a){"use strict";function r(){return new Promise(function(e,t){try{new n.QWebChannel(qt.webChannelTransport,function(t){var a=t.objects.addInPresLayer;e(a)})}catch(a){t(a)}})}function i(){return"object"==typeof qt}Object.defineProperty(t,"__esModule",{value:!0}),a(108);var n=a(109);t.initializeWebChannelPresLayer=r,t.hasQt=i},function(e,t){},function(e,t,a){"use strict";function r(e,t,a){function n(e,t){var r=e[0],n=e[1];d[r]={connect:function(e){return"function"!=typeof e?void console.error("Bad callback given to connect to signal "+r):(d.__objectSignals__[n]=d.__objectSignals__[n]||[],d.__objectSignals__[n].push(e),void(t||"destroyed"===r||a.exec({type:i.connectToSignal,object:d.__id__,signal:n})))},disconnect:function(e){if("function"!=typeof e)return void console.error("Bad callback given to disconnect from signal "+r);d.__objectSignals__[n]=d.__objectSignals__[n]||[];var o=d.__objectSignals__[n].indexOf(e);return o===-1?void console.error("Cannot find connection of signal "+r+" to "+e.name):(d.__objectSignals__[n].splice(o,1),void(t||0!==d.__objectSignals__[n].length||a.exec({type:i.disconnectFromSignal,object:d.__id__,signal:n})))}}}function o(e,t){var a=d.__objectSignals__[e];a&&a.forEach(function(e){e.apply(e,t)})}function l(e){var t=e[0],r=e[1];d[t]=function(){for(var e,t=[],n=0;n<arguments.length;++n)"function"==typeof arguments[n]?e=arguments[n]:t.push(arguments[n]);a.exec({type:i.invokeMethod,object:d.__id__,method:r,args:t},function(t){if(void 0!==t){var a=d.unwrapQObject(t);e&&e(a)}})}}function s(e){var t=e[0],r=e[1],o=e[2];d.__propertyCache__[t]=e[3],o&&(1===o[0]&&(o[0]=r+"Changed"),n(o,!0)),Object.defineProperty(d,r,{get:function(){var e=d.__propertyCache__[t];return void 0===e&&console.warn('Undefined value in property cache for property "'+r+'" in object '+d.__id__),e},set:function(e){return void 0===e?void console.warn("Property setter for "+r+" called with undefined value!"):(d.__propertyCache__[t]=e,void a.exec({type:i.setProperty,object:d.__id__,property:t,value:e}))}})}this.__id__=e,a.objects[e]=this,this.__objectSignals__={},this.__propertyCache__={};var d=this;this.unwrapQObject=function(e){if(e instanceof Array){for(var t=new Array(e.length),i=0;i<e.length;++i)t[i]=d.unwrapQObject(e[i]);return t}if(!e||!e["__QObject*__"]||void 0===e.id)return e;var n=e.id;if(a.objects[n])return a.objects[n];if(!e.data)return void console.error("Cannot unwrap unknown QObject "+n+" without data.");var o=new r(n,e.data,a);return o.destroyed.connect(function(){if(a.objects[n]===o){delete a.objects[n];var e=[];for(var t in o)e.push(t);for(var r in e)delete o[e[r]]}}),o.unwrapProperties(),o},this.unwrapProperties=function(){for(var e in d.__propertyCache__)d.__propertyCache__[e]=d.unwrapQObject(d.__propertyCache__[e])},this.propertyUpdate=function(e,t){for(var a in t){var r=t[a];d.__propertyCache__[a]=r}for(var i in e)o(i,e[i])},this.signalEmitted=function(e,t){o(e,t)},t.methods.forEach(l),t.properties.forEach(s),t.signals.forEach(function(e){n(e,!1)});for(var e in t.enums)d[e]=t.enums[e]}var i={signal:1,propertyUpdate:2,init:3,idle:4,debug:5,invokeMethod:6,connectToSignal:7,disconnectFromSignal:8,setProperty:9,response:10},n=function(e,t){if("object"!=typeof e||"function"!=typeof e.send)return void console.error("The QWebChannel expects a transport object with a send function and onmessage callback property. Given is: transport: "+typeof e+", transport.send: "+typeof e.send);var a=this;this.transport=e,this.send=function(e){"string"!=typeof e&&(e=JSON.stringify(e)),a.transport.send(e)},this.transport.onmessage=function(e){var t=e.data;switch("string"==typeof t&&(t=JSON.parse(t)),t.type){case i.signal:a.handleSignal(t);break;case i.response:a.handleResponse(t);break;case i.propertyUpdate:a.handlePropertyUpdate(t);break;default:console.error("invalid message received:",e.data)}},this.execCallbacks={},this.execId=0,this.exec=function(e,t){return t?(a.execId===Number.MAX_VALUE&&(a.execId=Number.MIN_VALUE),e.hasOwnProperty("id")?void console.error("Cannot exec message with property id: "+JSON.stringify(e)):(e.id=a.execId++,a.execCallbacks[e.id]=t,void a.send(e))):void a.send(e)},this.objects={},this.handleSignal=function(e){var t=a.objects[e.object];t?t.signalEmitted(e.signal,e.args):console.warn("Unhandled signal: "+e.object+"::"+e.signal)},this.handleResponse=function(e){return e.hasOwnProperty("id")?(a.execCallbacks[e.id](e.data),void delete a.execCallbacks[e.id]):void console.error("Invalid response message received: ",JSON.stringify(e))},this.handlePropertyUpdate=function(e){for(var t in e.data){var r=e.data[t],n=a.objects[r.object];n?n.propertyUpdate(r.signals,r.properties):console.warn("Unhandled property update: "+r.object+"::"+r.signal)}a.exec({type:i.idle})},this.debug=function(e){a.send({type:i.debug,data:e})},a.exec({type:i.init},function(e){for(var n in e)var o=new r(n,e[n],a);for(var n in a.objects)a.objects[n].unwrapProperties();t&&t(a),a.exec({type:i.idle})})};e.exports={QWebChannel:n}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,